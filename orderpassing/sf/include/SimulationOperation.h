/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SimulationOperation_H
#define SimulationOperation_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Simulation_types.h"

namespace Simulation {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SimulationOperationIf {
 public:
  virtual ~SimulationOperationIf() {}
  virtual void CancelOrder(OrderCancelRtnMsg& _return, const int32_t id) = 0;
  virtual void CreateOrder(OrderRtnMsg& _return, const std::string& InstrCode, const  ::AtsType::OrderWay::type way, const int32_t quantity, const double price, const  ::AtsType::OrderOpenClose::type openclose, const int32_t orderId, const int32_t tradingtype, const  ::AtsType::OrderRestriction::type orderrestriction) = 0;
  virtual void subscribe_item(const std::string& code) = 0;
};

class SimulationOperationIfFactory {
 public:
  typedef SimulationOperationIf Handler;

  virtual ~SimulationOperationIfFactory() {}

  virtual SimulationOperationIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SimulationOperationIf* /* handler */) = 0;
};

class SimulationOperationIfSingletonFactory : virtual public SimulationOperationIfFactory {
 public:
  SimulationOperationIfSingletonFactory(const boost::shared_ptr<SimulationOperationIf>& iface) : iface_(iface) {}
  virtual ~SimulationOperationIfSingletonFactory() {}

  virtual SimulationOperationIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SimulationOperationIf* /* handler */) {}

 protected:
  boost::shared_ptr<SimulationOperationIf> iface_;
};

class SimulationOperationNull : virtual public SimulationOperationIf {
 public:
  virtual ~SimulationOperationNull() {}
  void CancelOrder(OrderCancelRtnMsg& /* _return */, const int32_t /* id */) {
    return;
  }
  void CreateOrder(OrderRtnMsg& /* _return */, const std::string& /* InstrCode */, const  ::AtsType::OrderWay::type /* way */, const int32_t /* quantity */, const double /* price */, const  ::AtsType::OrderOpenClose::type /* openclose */, const int32_t /* orderId */, const int32_t /* tradingtype */, const  ::AtsType::OrderRestriction::type /* orderrestriction */) {
    return;
  }
  void subscribe_item(const std::string& /* code */) {
    return;
  }
};

typedef struct _SimulationOperation_CancelOrder_args__isset {
  _SimulationOperation_CancelOrder_args__isset() : id(false) {}
  bool id :1;
} _SimulationOperation_CancelOrder_args__isset;

class SimulationOperation_CancelOrder_args {
 public:

  SimulationOperation_CancelOrder_args(const SimulationOperation_CancelOrder_args&);
  SimulationOperation_CancelOrder_args& operator=(const SimulationOperation_CancelOrder_args&);
  SimulationOperation_CancelOrder_args() : id(0) {
  }

  virtual ~SimulationOperation_CancelOrder_args() throw();
  int32_t id;

  _SimulationOperation_CancelOrder_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const SimulationOperation_CancelOrder_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const SimulationOperation_CancelOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimulationOperation_CancelOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SimulationOperation_CancelOrder_pargs {
 public:


  virtual ~SimulationOperation_CancelOrder_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimulationOperation_CancelOrder_result__isset {
  _SimulationOperation_CancelOrder_result__isset() : success(false) {}
  bool success :1;
} _SimulationOperation_CancelOrder_result__isset;

class SimulationOperation_CancelOrder_result {
 public:

  SimulationOperation_CancelOrder_result(const SimulationOperation_CancelOrder_result&);
  SimulationOperation_CancelOrder_result& operator=(const SimulationOperation_CancelOrder_result&);
  SimulationOperation_CancelOrder_result() {
  }

  virtual ~SimulationOperation_CancelOrder_result() throw();
  OrderCancelRtnMsg success;

  _SimulationOperation_CancelOrder_result__isset __isset;

  void __set_success(const OrderCancelRtnMsg& val);

  bool operator == (const SimulationOperation_CancelOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimulationOperation_CancelOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimulationOperation_CancelOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimulationOperation_CancelOrder_presult__isset {
  _SimulationOperation_CancelOrder_presult__isset() : success(false) {}
  bool success :1;
} _SimulationOperation_CancelOrder_presult__isset;

class SimulationOperation_CancelOrder_presult {
 public:


  virtual ~SimulationOperation_CancelOrder_presult() throw();
  OrderCancelRtnMsg* success;

  _SimulationOperation_CancelOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SimulationOperation_CreateOrder_args__isset {
  _SimulationOperation_CreateOrder_args__isset() : InstrCode(false), way(false), quantity(false), price(false), openclose(false), orderId(false), tradingtype(false), orderrestriction(false) {}
  bool InstrCode :1;
  bool way :1;
  bool quantity :1;
  bool price :1;
  bool openclose :1;
  bool orderId :1;
  bool tradingtype :1;
  bool orderrestriction :1;
} _SimulationOperation_CreateOrder_args__isset;

class SimulationOperation_CreateOrder_args {
 public:

  SimulationOperation_CreateOrder_args(const SimulationOperation_CreateOrder_args&);
  SimulationOperation_CreateOrder_args& operator=(const SimulationOperation_CreateOrder_args&);
  SimulationOperation_CreateOrder_args() : InstrCode(), way(( ::AtsType::OrderWay::type)0), quantity(0), price(0), openclose(( ::AtsType::OrderOpenClose::type)0), orderId(0), tradingtype(0), orderrestriction(( ::AtsType::OrderRestriction::type)0) {
  }

  virtual ~SimulationOperation_CreateOrder_args() throw();
  std::string InstrCode;
   ::AtsType::OrderWay::type way;
  int32_t quantity;
  double price;
   ::AtsType::OrderOpenClose::type openclose;
  int32_t orderId;
  int32_t tradingtype;
   ::AtsType::OrderRestriction::type orderrestriction;

  _SimulationOperation_CreateOrder_args__isset __isset;

  void __set_InstrCode(const std::string& val);

  void __set_way(const  ::AtsType::OrderWay::type val);

  void __set_quantity(const int32_t val);

  void __set_price(const double val);

  void __set_openclose(const  ::AtsType::OrderOpenClose::type val);

  void __set_orderId(const int32_t val);

  void __set_tradingtype(const int32_t val);

  void __set_orderrestriction(const  ::AtsType::OrderRestriction::type val);

  bool operator == (const SimulationOperation_CreateOrder_args & rhs) const
  {
    if (!(InstrCode == rhs.InstrCode))
      return false;
    if (!(way == rhs.way))
      return false;
    if (!(quantity == rhs.quantity))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(openclose == rhs.openclose))
      return false;
    if (!(orderId == rhs.orderId))
      return false;
    if (!(tradingtype == rhs.tradingtype))
      return false;
    if (!(orderrestriction == rhs.orderrestriction))
      return false;
    return true;
  }
  bool operator != (const SimulationOperation_CreateOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimulationOperation_CreateOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SimulationOperation_CreateOrder_pargs {
 public:


  virtual ~SimulationOperation_CreateOrder_pargs() throw();
  const std::string* InstrCode;
  const  ::AtsType::OrderWay::type* way;
  const int32_t* quantity;
  const double* price;
  const  ::AtsType::OrderOpenClose::type* openclose;
  const int32_t* orderId;
  const int32_t* tradingtype;
  const  ::AtsType::OrderRestriction::type* orderrestriction;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimulationOperation_CreateOrder_result__isset {
  _SimulationOperation_CreateOrder_result__isset() : success(false) {}
  bool success :1;
} _SimulationOperation_CreateOrder_result__isset;

class SimulationOperation_CreateOrder_result {
 public:

  SimulationOperation_CreateOrder_result(const SimulationOperation_CreateOrder_result&);
  SimulationOperation_CreateOrder_result& operator=(const SimulationOperation_CreateOrder_result&);
  SimulationOperation_CreateOrder_result() {
  }

  virtual ~SimulationOperation_CreateOrder_result() throw();
  OrderRtnMsg success;

  _SimulationOperation_CreateOrder_result__isset __isset;

  void __set_success(const OrderRtnMsg& val);

  bool operator == (const SimulationOperation_CreateOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimulationOperation_CreateOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimulationOperation_CreateOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimulationOperation_CreateOrder_presult__isset {
  _SimulationOperation_CreateOrder_presult__isset() : success(false) {}
  bool success :1;
} _SimulationOperation_CreateOrder_presult__isset;

class SimulationOperation_CreateOrder_presult {
 public:


  virtual ~SimulationOperation_CreateOrder_presult() throw();
  OrderRtnMsg* success;

  _SimulationOperation_CreateOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SimulationOperation_subscribe_item_args__isset {
  _SimulationOperation_subscribe_item_args__isset() : code(false) {}
  bool code :1;
} _SimulationOperation_subscribe_item_args__isset;

class SimulationOperation_subscribe_item_args {
 public:

  SimulationOperation_subscribe_item_args(const SimulationOperation_subscribe_item_args&);
  SimulationOperation_subscribe_item_args& operator=(const SimulationOperation_subscribe_item_args&);
  SimulationOperation_subscribe_item_args() : code() {
  }

  virtual ~SimulationOperation_subscribe_item_args() throw();
  std::string code;

  _SimulationOperation_subscribe_item_args__isset __isset;

  void __set_code(const std::string& val);

  bool operator == (const SimulationOperation_subscribe_item_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const SimulationOperation_subscribe_item_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimulationOperation_subscribe_item_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SimulationOperation_subscribe_item_pargs {
 public:


  virtual ~SimulationOperation_subscribe_item_pargs() throw();
  const std::string* code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SimulationOperation_subscribe_item_result {
 public:

  SimulationOperation_subscribe_item_result(const SimulationOperation_subscribe_item_result&);
  SimulationOperation_subscribe_item_result& operator=(const SimulationOperation_subscribe_item_result&);
  SimulationOperation_subscribe_item_result() {
  }

  virtual ~SimulationOperation_subscribe_item_result() throw();

  bool operator == (const SimulationOperation_subscribe_item_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SimulationOperation_subscribe_item_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimulationOperation_subscribe_item_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SimulationOperation_subscribe_item_presult {
 public:


  virtual ~SimulationOperation_subscribe_item_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SimulationOperationClient : virtual public SimulationOperationIf {
 public:
  SimulationOperationClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SimulationOperationClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void CancelOrder(OrderCancelRtnMsg& _return, const int32_t id);
  void send_CancelOrder(const int32_t id);
  void recv_CancelOrder(OrderCancelRtnMsg& _return);
  void CreateOrder(OrderRtnMsg& _return, const std::string& InstrCode, const  ::AtsType::OrderWay::type way, const int32_t quantity, const double price, const  ::AtsType::OrderOpenClose::type openclose, const int32_t orderId, const int32_t tradingtype, const  ::AtsType::OrderRestriction::type orderrestriction);
  void send_CreateOrder(const std::string& InstrCode, const  ::AtsType::OrderWay::type way, const int32_t quantity, const double price, const  ::AtsType::OrderOpenClose::type openclose, const int32_t orderId, const int32_t tradingtype, const  ::AtsType::OrderRestriction::type orderrestriction);
  void recv_CreateOrder(OrderRtnMsg& _return);
  void subscribe_item(const std::string& code);
  void send_subscribe_item(const std::string& code);
  void recv_subscribe_item();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SimulationOperationProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SimulationOperationIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SimulationOperationProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_CancelOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_subscribe_item(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SimulationOperationProcessor(boost::shared_ptr<SimulationOperationIf> iface) :
    iface_(iface) {
    processMap_["CancelOrder"] = &SimulationOperationProcessor::process_CancelOrder;
    processMap_["CreateOrder"] = &SimulationOperationProcessor::process_CreateOrder;
    processMap_["subscribe_item"] = &SimulationOperationProcessor::process_subscribe_item;
  }

  virtual ~SimulationOperationProcessor() {}
};

class SimulationOperationProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SimulationOperationProcessorFactory(const ::boost::shared_ptr< SimulationOperationIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SimulationOperationIfFactory > handlerFactory_;
};

class SimulationOperationMultiface : virtual public SimulationOperationIf {
 public:
  SimulationOperationMultiface(std::vector<boost::shared_ptr<SimulationOperationIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SimulationOperationMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SimulationOperationIf> > ifaces_;
  SimulationOperationMultiface() {}
  void add(boost::shared_ptr<SimulationOperationIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void CancelOrder(OrderCancelRtnMsg& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CancelOrder(_return, id);
    }
    ifaces_[i]->CancelOrder(_return, id);
    return;
  }

  void CreateOrder(OrderRtnMsg& _return, const std::string& InstrCode, const  ::AtsType::OrderWay::type way, const int32_t quantity, const double price, const  ::AtsType::OrderOpenClose::type openclose, const int32_t orderId, const int32_t tradingtype, const  ::AtsType::OrderRestriction::type orderrestriction) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateOrder(_return, InstrCode, way, quantity, price, openclose, orderId, tradingtype, orderrestriction);
    }
    ifaces_[i]->CreateOrder(_return, InstrCode, way, quantity, price, openclose, orderId, tradingtype, orderrestriction);
    return;
  }

  void subscribe_item(const std::string& code) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->subscribe_item(code);
    }
    ifaces_[i]->subscribe_item(code);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SimulationOperationConcurrentClient : virtual public SimulationOperationIf {
 public:
  SimulationOperationConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SimulationOperationConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void CancelOrder(OrderCancelRtnMsg& _return, const int32_t id);
  int32_t send_CancelOrder(const int32_t id);
  void recv_CancelOrder(OrderCancelRtnMsg& _return, const int32_t seqid);
  void CreateOrder(OrderRtnMsg& _return, const std::string& InstrCode, const  ::AtsType::OrderWay::type way, const int32_t quantity, const double price, const  ::AtsType::OrderOpenClose::type openclose, const int32_t orderId, const int32_t tradingtype, const  ::AtsType::OrderRestriction::type orderrestriction);
  int32_t send_CreateOrder(const std::string& InstrCode, const  ::AtsType::OrderWay::type way, const int32_t quantity, const double price, const  ::AtsType::OrderOpenClose::type openclose, const int32_t orderId, const int32_t tradingtype, const  ::AtsType::OrderRestriction::type orderrestriction);
  void recv_CreateOrder(OrderRtnMsg& _return, const int32_t seqid);
  void subscribe_item(const std::string& code);
  int32_t send_subscribe_item(const std::string& code);
  void recv_subscribe_item(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
