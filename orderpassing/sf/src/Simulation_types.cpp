/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Simulation_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Simulation {


FeedMsg::~FeedMsg() throw() {
}


void FeedMsg::__set_Code(const std::string& val) {
  this->Code = val;
}

void FeedMsg::__set_MarketTime(const std::string& val) {
  this->MarketTime = val;
}

void FeedMsg::__set_Last(const double val) {
  this->Last = val;
}

void FeedMsg::__set_BidDepths(const std::vector<double> & val) {
  this->BidDepths = val;
}

void FeedMsg::__set_AskDepths(const std::vector<double> & val) {
  this->AskDepths = val;
}

void FeedMsg::__set_BidQtys(const std::vector<int32_t> & val) {
  this->BidQtys = val;
}

void FeedMsg::__set_AskQtys(const std::vector<int32_t> & val) {
  this->AskQtys = val;
}

void FeedMsg::__set_DailyVolume(const int64_t val) {
  this->DailyVolume = val;
}

void FeedMsg::__set_TurnOver(const double val) {
  this->TurnOver = val;
}

void FeedMsg::__set_OpenInterest(const int64_t val) {
  this->OpenInterest = val;
}

void FeedMsg::__set_Close(const double val) {
  this->Close = val;
__isset.Close = true;
}

void FeedMsg::__set_Settlement(const double val) {
  this->Settlement = val;
__isset.Settlement = true;
}

void FeedMsg::__set_UpperLimit(const double val) {
  this->UpperLimit = val;
__isset.UpperLimit = true;
}

void FeedMsg::__set_LowerLimit(const double val) {
  this->LowerLimit = val;
__isset.LowerLimit = true;
}

uint32_t FeedMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Code);
          this->__isset.Code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->MarketTime);
          this->__isset.MarketTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Last);
          this->__isset.Last = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->BidDepths.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->BidDepths.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readDouble(this->BidDepths[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.BidDepths = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AskDepths.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->AskDepths.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readDouble(this->AskDepths[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AskDepths = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->BidQtys.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->BidQtys.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readI32(this->BidQtys[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.BidQtys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AskQtys.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->AskQtys.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += iprot->readI32(this->AskQtys[_i19]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AskQtys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->DailyVolume);
          this->__isset.DailyVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->TurnOver);
          this->__isset.TurnOver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->OpenInterest);
          this->__isset.OpenInterest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Close);
          this->__isset.Close = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Settlement);
          this->__isset.Settlement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->UpperLimit);
          this->__isset.UpperLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->LowerLimit);
          this->__isset.LowerLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FeedMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FeedMsg");

  xfer += oprot->writeFieldBegin("Code", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MarketTime", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->MarketTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Last", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->Last);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BidDepths", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->BidDepths.size()));
    std::vector<double> ::const_iterator _iter20;
    for (_iter20 = this->BidDepths.begin(); _iter20 != this->BidDepths.end(); ++_iter20)
    {
      xfer += oprot->writeDouble((*_iter20));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AskDepths", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->AskDepths.size()));
    std::vector<double> ::const_iterator _iter21;
    for (_iter21 = this->AskDepths.begin(); _iter21 != this->AskDepths.end(); ++_iter21)
    {
      xfer += oprot->writeDouble((*_iter21));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BidQtys", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->BidQtys.size()));
    std::vector<int32_t> ::const_iterator _iter22;
    for (_iter22 = this->BidQtys.begin(); _iter22 != this->BidQtys.end(); ++_iter22)
    {
      xfer += oprot->writeI32((*_iter22));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AskQtys", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->AskQtys.size()));
    std::vector<int32_t> ::const_iterator _iter23;
    for (_iter23 = this->AskQtys.begin(); _iter23 != this->AskQtys.end(); ++_iter23)
    {
      xfer += oprot->writeI32((*_iter23));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DailyVolume", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->DailyVolume);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TurnOver", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->TurnOver);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OpenInterest", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->OpenInterest);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.Close) {
    xfer += oprot->writeFieldBegin("Close", ::apache::thrift::protocol::T_DOUBLE, 11);
    xfer += oprot->writeDouble(this->Close);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Settlement) {
    xfer += oprot->writeFieldBegin("Settlement", ::apache::thrift::protocol::T_DOUBLE, 12);
    xfer += oprot->writeDouble(this->Settlement);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.UpperLimit) {
    xfer += oprot->writeFieldBegin("UpperLimit", ::apache::thrift::protocol::T_DOUBLE, 13);
    xfer += oprot->writeDouble(this->UpperLimit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.LowerLimit) {
    xfer += oprot->writeFieldBegin("LowerLimit", ::apache::thrift::protocol::T_DOUBLE, 14);
    xfer += oprot->writeDouble(this->LowerLimit);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FeedMsg &a, FeedMsg &b) {
  using ::std::swap;
  swap(a.Code, b.Code);
  swap(a.MarketTime, b.MarketTime);
  swap(a.Last, b.Last);
  swap(a.BidDepths, b.BidDepths);
  swap(a.AskDepths, b.AskDepths);
  swap(a.BidQtys, b.BidQtys);
  swap(a.AskQtys, b.AskQtys);
  swap(a.DailyVolume, b.DailyVolume);
  swap(a.TurnOver, b.TurnOver);
  swap(a.OpenInterest, b.OpenInterest);
  swap(a.Close, b.Close);
  swap(a.Settlement, b.Settlement);
  swap(a.UpperLimit, b.UpperLimit);
  swap(a.LowerLimit, b.LowerLimit);
  swap(a.__isset, b.__isset);
}

FeedMsg::FeedMsg(const FeedMsg& other24) {
  Code = other24.Code;
  MarketTime = other24.MarketTime;
  Last = other24.Last;
  BidDepths = other24.BidDepths;
  AskDepths = other24.AskDepths;
  BidQtys = other24.BidQtys;
  AskQtys = other24.AskQtys;
  DailyVolume = other24.DailyVolume;
  TurnOver = other24.TurnOver;
  OpenInterest = other24.OpenInterest;
  Close = other24.Close;
  Settlement = other24.Settlement;
  UpperLimit = other24.UpperLimit;
  LowerLimit = other24.LowerLimit;
  __isset = other24.__isset;
}
FeedMsg& FeedMsg::operator=(const FeedMsg& other25) {
  Code = other25.Code;
  MarketTime = other25.MarketTime;
  Last = other25.Last;
  BidDepths = other25.BidDepths;
  AskDepths = other25.AskDepths;
  BidQtys = other25.BidQtys;
  AskQtys = other25.AskQtys;
  DailyVolume = other25.DailyVolume;
  TurnOver = other25.TurnOver;
  OpenInterest = other25.OpenInterest;
  Close = other25.Close;
  Settlement = other25.Settlement;
  UpperLimit = other25.UpperLimit;
  LowerLimit = other25.LowerLimit;
  __isset = other25.__isset;
  return *this;
}
void FeedMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FeedMsg(";
  out << "Code=" << to_string(Code);
  out << ", " << "MarketTime=" << to_string(MarketTime);
  out << ", " << "Last=" << to_string(Last);
  out << ", " << "BidDepths=" << to_string(BidDepths);
  out << ", " << "AskDepths=" << to_string(AskDepths);
  out << ", " << "BidQtys=" << to_string(BidQtys);
  out << ", " << "AskQtys=" << to_string(AskQtys);
  out << ", " << "DailyVolume=" << to_string(DailyVolume);
  out << ", " << "TurnOver=" << to_string(TurnOver);
  out << ", " << "OpenInterest=" << to_string(OpenInterest);
  out << ", " << "Close="; (__isset.Close ? (out << to_string(Close)) : (out << "<null>"));
  out << ", " << "Settlement="; (__isset.Settlement ? (out << to_string(Settlement)) : (out << "<null>"));
  out << ", " << "UpperLimit="; (__isset.UpperLimit ? (out << to_string(UpperLimit)) : (out << "<null>"));
  out << ", " << "LowerLimit="; (__isset.LowerLimit ? (out << to_string(LowerLimit)) : (out << "<null>"));
  out << ")";
}


OrderRtnMsg::~OrderRtnMsg() throw() {
}


void OrderRtnMsg::__set_orderId(const int32_t val) {
  this->orderId = val;
}

void OrderRtnMsg::__set_IsSuccess(const bool val) {
  this->IsSuccess = val;
}

void OrderRtnMsg::__set_reason(const std::string& val) {
  this->reason = val;
}

uint32_t OrderRtnMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->orderId);
          this->__isset.orderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsSuccess);
          this->__isset.IsSuccess = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OrderRtnMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OrderRtnMsg");

  xfer += oprot->writeFieldBegin("orderId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->orderId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsSuccess", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsSuccess);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->reason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OrderRtnMsg &a, OrderRtnMsg &b) {
  using ::std::swap;
  swap(a.orderId, b.orderId);
  swap(a.IsSuccess, b.IsSuccess);
  swap(a.reason, b.reason);
  swap(a.__isset, b.__isset);
}

OrderRtnMsg::OrderRtnMsg(const OrderRtnMsg& other26) {
  orderId = other26.orderId;
  IsSuccess = other26.IsSuccess;
  reason = other26.reason;
  __isset = other26.__isset;
}
OrderRtnMsg& OrderRtnMsg::operator=(const OrderRtnMsg& other27) {
  orderId = other27.orderId;
  IsSuccess = other27.IsSuccess;
  reason = other27.reason;
  __isset = other27.__isset;
  return *this;
}
void OrderRtnMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OrderRtnMsg(";
  out << "orderId=" << to_string(orderId);
  out << ", " << "IsSuccess=" << to_string(IsSuccess);
  out << ", " << "reason=" << to_string(reason);
  out << ")";
}


OrderTradeRtnMsg::~OrderTradeRtnMsg() throw() {
}


void OrderTradeRtnMsg::__set_orderId(const int32_t val) {
  this->orderId = val;
}

void OrderTradeRtnMsg::__set_ExeQuantity(const int32_t val) {
  this->ExeQuantity = val;
}

void OrderTradeRtnMsg::__set_price(const double val) {
  this->price = val;
}

void OrderTradeRtnMsg::__set_tradertime(const std::string& val) {
  this->tradertime = val;
}

void OrderTradeRtnMsg::__set_MatchID(const std::string& val) {
  this->MatchID = val;
}

uint32_t OrderTradeRtnMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->orderId);
          this->__isset.orderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ExeQuantity);
          this->__isset.ExeQuantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tradertime);
          this->__isset.tradertime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->MatchID);
          this->__isset.MatchID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OrderTradeRtnMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OrderTradeRtnMsg");

  xfer += oprot->writeFieldBegin("orderId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->orderId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ExeQuantity", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->ExeQuantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tradertime", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->tradertime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MatchID", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->MatchID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OrderTradeRtnMsg &a, OrderTradeRtnMsg &b) {
  using ::std::swap;
  swap(a.orderId, b.orderId);
  swap(a.ExeQuantity, b.ExeQuantity);
  swap(a.price, b.price);
  swap(a.tradertime, b.tradertime);
  swap(a.MatchID, b.MatchID);
  swap(a.__isset, b.__isset);
}

OrderTradeRtnMsg::OrderTradeRtnMsg(const OrderTradeRtnMsg& other28) {
  orderId = other28.orderId;
  ExeQuantity = other28.ExeQuantity;
  price = other28.price;
  tradertime = other28.tradertime;
  MatchID = other28.MatchID;
  __isset = other28.__isset;
}
OrderTradeRtnMsg& OrderTradeRtnMsg::operator=(const OrderTradeRtnMsg& other29) {
  orderId = other29.orderId;
  ExeQuantity = other29.ExeQuantity;
  price = other29.price;
  tradertime = other29.tradertime;
  MatchID = other29.MatchID;
  __isset = other29.__isset;
  return *this;
}
void OrderTradeRtnMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OrderTradeRtnMsg(";
  out << "orderId=" << to_string(orderId);
  out << ", " << "ExeQuantity=" << to_string(ExeQuantity);
  out << ", " << "price=" << to_string(price);
  out << ", " << "tradertime=" << to_string(tradertime);
  out << ", " << "MatchID=" << to_string(MatchID);
  out << ")";
}


OrderCancelRtnMsg::~OrderCancelRtnMsg() throw() {
}


void OrderCancelRtnMsg::__set_orderId(const int32_t val) {
  this->orderId = val;
}

void OrderCancelRtnMsg::__set_IsSuccess(const bool val) {
  this->IsSuccess = val;
}

void OrderCancelRtnMsg::__set_reason(const std::string& val) {
  this->reason = val;
}

void OrderCancelRtnMsg::__set_CancelNum(const int32_t val) {
  this->CancelNum = val;
}

uint32_t OrderCancelRtnMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->orderId);
          this->__isset.orderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsSuccess);
          this->__isset.IsSuccess = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->CancelNum);
          this->__isset.CancelNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OrderCancelRtnMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OrderCancelRtnMsg");

  xfer += oprot->writeFieldBegin("orderId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->orderId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsSuccess", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsSuccess);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->reason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CancelNum", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->CancelNum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OrderCancelRtnMsg &a, OrderCancelRtnMsg &b) {
  using ::std::swap;
  swap(a.orderId, b.orderId);
  swap(a.IsSuccess, b.IsSuccess);
  swap(a.reason, b.reason);
  swap(a.CancelNum, b.CancelNum);
  swap(a.__isset, b.__isset);
}

OrderCancelRtnMsg::OrderCancelRtnMsg(const OrderCancelRtnMsg& other30) {
  orderId = other30.orderId;
  IsSuccess = other30.IsSuccess;
  reason = other30.reason;
  CancelNum = other30.CancelNum;
  __isset = other30.__isset;
}
OrderCancelRtnMsg& OrderCancelRtnMsg::operator=(const OrderCancelRtnMsg& other31) {
  orderId = other31.orderId;
  IsSuccess = other31.IsSuccess;
  reason = other31.reason;
  CancelNum = other31.CancelNum;
  __isset = other31.__isset;
  return *this;
}
void OrderCancelRtnMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OrderCancelRtnMsg(";
  out << "orderId=" << to_string(orderId);
  out << ", " << "IsSuccess=" << to_string(IsSuccess);
  out << ", " << "reason=" << to_string(reason);
  out << ", " << "CancelNum=" << to_string(CancelNum);
  out << ")";
}

} // namespace
