/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "AtsType_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace AtsType {

int _kOrderWayValues[] = {
  OrderWay::Undef,
  OrderWay::Buy,
  OrderWay::Sell,
  OrderWay::CoveredBuy,
  OrderWay::CoveredSell,
  OrderWay::Freeze,
  OrderWay::Unfreeze,
  OrderWay::PLEDGE_BOND_IN,
  OrderWay::PLEDGE_BOND_OUT,
  OrderWay::ETFPur,
  OrderWay::ETFRed,
  OrderWay::OFPur,
  OrderWay::OFRed,
  OrderWay::Exercise
};
const char* _kOrderWayNames[] = {
  "Undef",
  "Buy",
  "Sell",
  "CoveredBuy",
  "CoveredSell",
  "Freeze",
  "Unfreeze",
  "PLEDGE_BOND_IN",
  "PLEDGE_BOND_OUT",
  "ETFPur",
  "ETFRed",
  "OFPur",
  "OFRed",
  "Exercise"
};
const std::map<int, const char*> _OrderWay_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(14, _kOrderWayValues, _kOrderWayNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrderActionValues[] = {
  OrderAction::Created,
  OrderAction::Modified,
  OrderAction::Cancelled,
  OrderAction::Undef
};
const char* _kOrderActionNames[] = {
  "Created",
  "Modified",
  "Cancelled",
  "Undef"
};
const std::map<int, const char*> _OrderAction_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kOrderActionValues, _kOrderActionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrderOpenCloseValues[] = {
  OrderOpenClose::Undef,
  OrderOpenClose::Open,
  OrderOpenClose::Close,
  OrderOpenClose::CloseToday
};
const char* _kOrderOpenCloseNames[] = {
  "Undef",
  "Open",
  "Close",
  "CloseToday"
};
const std::map<int, const char*> _OrderOpenClose_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kOrderOpenCloseValues, _kOrderOpenCloseNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrderPriceModeValues[] = {
  OrderPriceMode::Undef,
  OrderPriceMode::Limit,
  OrderPriceMode::Market
};
const char* _kOrderPriceModeNames[] = {
  "Undef",
  "Limit",
  "Market"
};
const std::map<int, const char*> _OrderPriceMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kOrderPriceModeValues, _kOrderPriceModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrderRestrictionValues[] = {
  OrderRestriction::Undef,
  OrderRestriction::None,
  OrderRestriction::ImmediateAndCancel,
  OrderRestriction::FillAndKill
};
const char* _kOrderRestrictionNames[] = {
  "Undef",
  "None",
  "ImmediateAndCancel",
  "FillAndKill"
};
const std::map<int, const char*> _OrderRestriction_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kOrderRestrictionValues, _kOrderRestrictionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrderStatusValues[] = {
  OrderStatus::Undef,
  OrderStatus::WaitServer,
  OrderStatus::WaitMarket,
  OrderStatus::Ack,
  OrderStatus::Nack,
  OrderStatus::Reject,
  OrderStatus::Cancel,
  OrderStatus::Exec
};
const char* _kOrderStatusNames[] = {
  "Undef",
  "WaitServer",
  "WaitMarket",
  "Ack",
  "Nack",
  "Reject",
  "Cancel",
  "Exec"
};
const std::map<int, const char*> _OrderStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kOrderStatusValues, _kOrderStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kFeedSourceStatusValues[] = {
  FeedSourceStatus::Up,
  FeedSourceStatus::Down
};
const char* _kFeedSourceStatusNames[] = {
  "Up",
  "Down"
};
const std::map<int, const char*> _FeedSourceStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kFeedSourceStatusValues, _kFeedSourceStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kConnectionStatusValues[] = {
  ConnectionStatus::Disconnected,
  ConnectionStatus::WaitConnect,
  ConnectionStatus::Connected
};
const char* _kConnectionStatusNames[] = {
  "Disconnected",
  "WaitConnect",
  "Connected"
};
const std::map<int, const char*> _ConnectionStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kConnectionStatusValues, _kConnectionStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kYesterdayPositionTypeValues[] = {
  YesterdayPositionType::Local,
  YesterdayPositionType::External
};
const char* _kYesterdayPositionTypeNames[] = {
  "Local",
  "External"
};
const std::map<int, const char*> _YesterdayPositionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kYesterdayPositionTypeValues, _kYesterdayPositionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kYesterdayPriceTypeValues[] = {
  YesterdayPriceType::Local,
  YesterdayPriceType::External
};
const char* _kYesterdayPriceTypeNames[] = {
  "Local",
  "External"
};
const std::map<int, const char*> _YesterdayPriceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kYesterdayPriceTypeValues, _kYesterdayPriceTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTradingPhaseValues[] = {
  TradingPhase::PREOPEN,
  TradingPhase::OPEN,
  TradingPhase::CLOSE,
  TradingPhase::PRECLOSE,
  TradingPhase::NO_CANCEL
};
const char* _kTradingPhaseNames[] = {
  "PREOPEN",
  "OPEN",
  "CLOSE",
  "PRECLOSE",
  "NO_CANCEL"
};
const std::map<int, const char*> _TradingPhase_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTradingPhaseValues, _kTradingPhaseNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kInstrTypeValues[] = {
  InstrType::Undef,
  InstrType::Index,
  InstrType::Stock,
  InstrType::Option,
  InstrType::Call,
  InstrType::Put,
  InstrType::Future,
  InstrType::Futurespread,
  InstrType::ETF,
  InstrType::Repo,
  InstrType::Bond,
  InstrType::Fund,
  InstrType::Forex,
  InstrType::Max
};
const char* _kInstrTypeNames[] = {
  "Undef",
  "Index",
  "Stock",
  "Option",
  "Call",
  "Put",
  "Future",
  "Futurespread",
  "ETF",
  "Repo",
  "Bond",
  "Fund",
  "Forex",
  "Max"
};
const std::map<int, const char*> _InstrType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(14, _kInstrTypeValues, _kInstrTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

} // namespace
