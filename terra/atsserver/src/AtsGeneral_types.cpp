/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "AtsGeneral_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace AtsGeneral {


FeedSourceMsg::~FeedSourceMsg() throw() {
}


void FeedSourceMsg::__set_Name(const std::string& val) {
  this->Name = val;
}

void FeedSourceMsg::__set_Status(const  ::AtsType::FeedSourceStatus::type val) {
  this->Status = val;
}

void FeedSourceMsg::__set_Activated(const bool val) {
  this->Activated = val;
}

uint32_t FeedSourceMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->Status = ( ::AtsType::FeedSourceStatus::type)ecast0;
          this->__isset.Status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->Activated);
          this->__isset.Activated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FeedSourceMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FeedSourceMsg");

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Status", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->Status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Activated", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->Activated);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FeedSourceMsg &a, FeedSourceMsg &b) {
  using ::std::swap;
  swap(a.Name, b.Name);
  swap(a.Status, b.Status);
  swap(a.Activated, b.Activated);
  swap(a.__isset, b.__isset);
}

FeedSourceMsg::FeedSourceMsg(const FeedSourceMsg& other1) {
  Name = other1.Name;
  Status = other1.Status;
  Activated = other1.Activated;
  __isset = other1.__isset;
}
FeedSourceMsg& FeedSourceMsg::operator=(const FeedSourceMsg& other2) {
  Name = other2.Name;
  Status = other2.Status;
  Activated = other2.Activated;
  __isset = other2.__isset;
  return *this;
}
void FeedSourceMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FeedSourceMsg(";
  out << "Name=" << to_string(Name);
  out << ", " << "Status=" << to_string(Status);
  out << ", " << "Activated=" << to_string(Activated);
  out << ")";
}


ConnectionMsg::~ConnectionMsg() throw() {
}


void ConnectionMsg::__set_Name(const std::string& val) {
  this->Name = val;
}

void ConnectionMsg::__set_Status(const  ::AtsType::ConnectionStatus::type val) {
  this->Status = val;
}

void ConnectionMsg::__set_TradingAllowed(const bool val) {
  this->TradingAllowed = val;
}

void ConnectionMsg::__set_New(const int32_t val) {
  this->New = val;
}

void ConnectionMsg::__set_Mod(const int32_t val) {
  this->Mod = val;
}

void ConnectionMsg::__set_Can(const int32_t val) {
  this->Can = val;
}

void ConnectionMsg::__set_Ack(const int32_t val) {
  this->Ack = val;
}

void ConnectionMsg::__set_Rej(const int32_t val) {
  this->Rej = val;
}

void ConnectionMsg::__set_NAck(const int32_t val) {
  this->NAck = val;
}

void ConnectionMsg::__set_Exe(const int32_t val) {
  this->Exe = val;
}

void ConnectionMsg::__set_RiskDegree(const double val) {
  this->RiskDegree = val;
}

uint32_t ConnectionMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->Status = ( ::AtsType::ConnectionStatus::type)ecast3;
          this->__isset.Status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->TradingAllowed);
          this->__isset.TradingAllowed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->New);
          this->__isset.New = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Mod);
          this->__isset.Mod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Can);
          this->__isset.Can = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Ack);
          this->__isset.Ack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Rej);
          this->__isset.Rej = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->NAck);
          this->__isset.NAck = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Exe);
          this->__isset.Exe = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->RiskDegree);
          this->__isset.RiskDegree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConnectionMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ConnectionMsg");

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Status", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->Status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TradingAllowed", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->TradingAllowed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("New", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->New);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Mod", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->Mod);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Can", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->Can);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Ack", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->Ack);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Rej", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->Rej);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("NAck", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->NAck);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Exe", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->Exe);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RiskDegree", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->RiskDegree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConnectionMsg &a, ConnectionMsg &b) {
  using ::std::swap;
  swap(a.Name, b.Name);
  swap(a.Status, b.Status);
  swap(a.TradingAllowed, b.TradingAllowed);
  swap(a.New, b.New);
  swap(a.Mod, b.Mod);
  swap(a.Can, b.Can);
  swap(a.Ack, b.Ack);
  swap(a.Rej, b.Rej);
  swap(a.NAck, b.NAck);
  swap(a.Exe, b.Exe);
  swap(a.RiskDegree, b.RiskDegree);
  swap(a.__isset, b.__isset);
}

ConnectionMsg::ConnectionMsg(const ConnectionMsg& other4) {
  Name = other4.Name;
  Status = other4.Status;
  TradingAllowed = other4.TradingAllowed;
  New = other4.New;
  Mod = other4.Mod;
  Can = other4.Can;
  Ack = other4.Ack;
  Rej = other4.Rej;
  NAck = other4.NAck;
  Exe = other4.Exe;
  RiskDegree = other4.RiskDegree;
  __isset = other4.__isset;
}
ConnectionMsg& ConnectionMsg::operator=(const ConnectionMsg& other5) {
  Name = other5.Name;
  Status = other5.Status;
  TradingAllowed = other5.TradingAllowed;
  New = other5.New;
  Mod = other5.Mod;
  Can = other5.Can;
  Ack = other5.Ack;
  Rej = other5.Rej;
  NAck = other5.NAck;
  Exe = other5.Exe;
  RiskDegree = other5.RiskDegree;
  __isset = other5.__isset;
  return *this;
}
void ConnectionMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ConnectionMsg(";
  out << "Name=" << to_string(Name);
  out << ", " << "Status=" << to_string(Status);
  out << ", " << "TradingAllowed=" << to_string(TradingAllowed);
  out << ", " << "New=" << to_string(New);
  out << ", " << "Mod=" << to_string(Mod);
  out << ", " << "Can=" << to_string(Can);
  out << ", " << "Ack=" << to_string(Ack);
  out << ", " << "Rej=" << to_string(Rej);
  out << ", " << "NAck=" << to_string(NAck);
  out << ", " << "Exe=" << to_string(Exe);
  out << ", " << "RiskDegree=" << to_string(RiskDegree);
  out << ")";
}


LogMsg::~LogMsg() throw() {
}


void LogMsg::__set_TimeStamp(const std::string& val) {
  this->TimeStamp = val;
}

void LogMsg::__set_Message(const std::string& val) {
  this->Message = val;
}

uint32_t LogMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->TimeStamp);
          this->__isset.TimeStamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Message);
          this->__isset.Message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LogMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LogMsg");

  xfer += oprot->writeFieldBegin("TimeStamp", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->TimeStamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LogMsg &a, LogMsg &b) {
  using ::std::swap;
  swap(a.TimeStamp, b.TimeStamp);
  swap(a.Message, b.Message);
  swap(a.__isset, b.__isset);
}

LogMsg::LogMsg(const LogMsg& other6) {
  TimeStamp = other6.TimeStamp;
  Message = other6.Message;
  __isset = other6.__isset;
}
LogMsg& LogMsg::operator=(const LogMsg& other7) {
  TimeStamp = other7.TimeStamp;
  Message = other7.Message;
  __isset = other7.__isset;
  return *this;
}
void LogMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LogMsg(";
  out << "TimeStamp=" << to_string(TimeStamp);
  out << ", " << "Message=" << to_string(Message);
  out << ")";
}


OrderMsg::~OrderMsg() throw() {
}


void OrderMsg::__set_Code(const std::string& val) {
  this->Code = val;
}

void OrderMsg::__set_Id(const int32_t val) {
  this->Id = val;
}

void OrderMsg::__set_TimeStamp(const std::string& val) {
  this->TimeStamp = val;
}

void OrderMsg::__set_Active(const bool val) {
  this->Active = val;
}

void OrderMsg::__set_Way(const  ::AtsType::OrderWay::type val) {
  this->Way = val;
}

void OrderMsg::__set_Action(const  ::AtsType::OrderAction::type val) {
  this->Action = val;
}

void OrderMsg::__set_TradingType(const int32_t val) {
  this->TradingType = val;
}

void OrderMsg::__set_Quantity(const int32_t val) {
  this->Quantity = val;
}

void OrderMsg::__set_Price(const double val) {
  this->Price = val;
}

void OrderMsg::__set_ExecQty(const int32_t val) {
  this->ExecQty = val;
}

void OrderMsg::__set_ExecPrice(const double val) {
  this->ExecPrice = val;
}

void OrderMsg::__set_BookQty(const int32_t val) {
  this->BookQty = val;
}

void OrderMsg::__set_Status(const  ::AtsType::OrderStatus::type val) {
  this->Status = val;
}

void OrderMsg::__set_Portfolio(const std::string& val) {
  this->Portfolio = val;
}

void OrderMsg::__set_LastReason(const std::string& val) {
  this->LastReason = val;
}

void OrderMsg::__set_Ack_Cancel_Ratio(const std::string& val) {
  this->Ack_Cancel_Ratio = val;
}

void OrderMsg::__set_OpenClose(const  ::AtsType::OrderOpenClose::type val) {
  this->OpenClose = val;
}

uint32_t OrderMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Code);
          this->__isset.Code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->TimeStamp);
          this->__isset.TimeStamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->Active);
          this->__isset.Active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->Way = ( ::AtsType::OrderWay::type)ecast8;
          this->__isset.Way = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast9;
          xfer += iprot->readI32(ecast9);
          this->Action = ( ::AtsType::OrderAction::type)ecast9;
          this->__isset.Action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->TradingType);
          this->__isset.TradingType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Quantity);
          this->__isset.Quantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Price);
          this->__isset.Price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ExecQty);
          this->__isset.ExecQty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ExecPrice);
          this->__isset.ExecPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->BookQty);
          this->__isset.BookQty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->Status = ( ::AtsType::OrderStatus::type)ecast10;
          this->__isset.Status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Portfolio);
          this->__isset.Portfolio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->LastReason);
          this->__isset.LastReason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Ack_Cancel_Ratio);
          this->__isset.Ack_Cancel_Ratio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->OpenClose = ( ::AtsType::OrderOpenClose::type)ecast11;
          this->__isset.OpenClose = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OrderMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OrderMsg");

  xfer += oprot->writeFieldBegin("Code", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TimeStamp", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->TimeStamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Active", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->Active);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Way", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->Way);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Action", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->Action);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TradingType", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->TradingType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Quantity", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->Quantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Price", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->Price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ExecQty", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->ExecQty);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ExecPrice", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->ExecPrice);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BookQty", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->BookQty);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Status", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32((int32_t)this->Status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Portfolio", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->Portfolio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LastReason", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->LastReason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Ack_Cancel_Ratio", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->Ack_Cancel_Ratio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OpenClose", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32((int32_t)this->OpenClose);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OrderMsg &a, OrderMsg &b) {
  using ::std::swap;
  swap(a.Code, b.Code);
  swap(a.Id, b.Id);
  swap(a.TimeStamp, b.TimeStamp);
  swap(a.Active, b.Active);
  swap(a.Way, b.Way);
  swap(a.Action, b.Action);
  swap(a.TradingType, b.TradingType);
  swap(a.Quantity, b.Quantity);
  swap(a.Price, b.Price);
  swap(a.ExecQty, b.ExecQty);
  swap(a.ExecPrice, b.ExecPrice);
  swap(a.BookQty, b.BookQty);
  swap(a.Status, b.Status);
  swap(a.Portfolio, b.Portfolio);
  swap(a.LastReason, b.LastReason);
  swap(a.Ack_Cancel_Ratio, b.Ack_Cancel_Ratio);
  swap(a.OpenClose, b.OpenClose);
  swap(a.__isset, b.__isset);
}

OrderMsg::OrderMsg(const OrderMsg& other12) {
  Code = other12.Code;
  Id = other12.Id;
  TimeStamp = other12.TimeStamp;
  Active = other12.Active;
  Way = other12.Way;
  Action = other12.Action;
  TradingType = other12.TradingType;
  Quantity = other12.Quantity;
  Price = other12.Price;
  ExecQty = other12.ExecQty;
  ExecPrice = other12.ExecPrice;
  BookQty = other12.BookQty;
  Status = other12.Status;
  Portfolio = other12.Portfolio;
  LastReason = other12.LastReason;
  Ack_Cancel_Ratio = other12.Ack_Cancel_Ratio;
  OpenClose = other12.OpenClose;
  __isset = other12.__isset;
}
OrderMsg& OrderMsg::operator=(const OrderMsg& other13) {
  Code = other13.Code;
  Id = other13.Id;
  TimeStamp = other13.TimeStamp;
  Active = other13.Active;
  Way = other13.Way;
  Action = other13.Action;
  TradingType = other13.TradingType;
  Quantity = other13.Quantity;
  Price = other13.Price;
  ExecQty = other13.ExecQty;
  ExecPrice = other13.ExecPrice;
  BookQty = other13.BookQty;
  Status = other13.Status;
  Portfolio = other13.Portfolio;
  LastReason = other13.LastReason;
  Ack_Cancel_Ratio = other13.Ack_Cancel_Ratio;
  OpenClose = other13.OpenClose;
  __isset = other13.__isset;
  return *this;
}
void OrderMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OrderMsg(";
  out << "Code=" << to_string(Code);
  out << ", " << "Id=" << to_string(Id);
  out << ", " << "TimeStamp=" << to_string(TimeStamp);
  out << ", " << "Active=" << to_string(Active);
  out << ", " << "Way=" << to_string(Way);
  out << ", " << "Action=" << to_string(Action);
  out << ", " << "TradingType=" << to_string(TradingType);
  out << ", " << "Quantity=" << to_string(Quantity);
  out << ", " << "Price=" << to_string(Price);
  out << ", " << "ExecQty=" << to_string(ExecQty);
  out << ", " << "ExecPrice=" << to_string(ExecPrice);
  out << ", " << "BookQty=" << to_string(BookQty);
  out << ", " << "Status=" << to_string(Status);
  out << ", " << "Portfolio=" << to_string(Portfolio);
  out << ", " << "LastReason=" << to_string(LastReason);
  out << ", " << "Ack_Cancel_Ratio=" << to_string(Ack_Cancel_Ratio);
  out << ", " << "OpenClose=" << to_string(OpenClose);
  out << ")";
}


QuoteMsg::~QuoteMsg() throw() {
}


void QuoteMsg::__set_Code(const std::string& val) {
  this->Code = val;
}

void QuoteMsg::__set_Id(const int32_t val) {
  this->Id = val;
}

void QuoteMsg::__set_TimeStamp(const std::string& val) {
  this->TimeStamp = val;
}

void QuoteMsg::__set_TradingType(const int32_t val) {
  this->TradingType = val;
}

void QuoteMsg::__set_Status(const  ::AtsType::OrderStatus::type val) {
  this->Status = val;
}

void QuoteMsg::__set_Portfolio(const std::string& val) {
  this->Portfolio = val;
}

void QuoteMsg::__set_LastReason(const std::string& val) {
  this->LastReason = val;
}

void QuoteMsg::__set_BuyOrder(const OrderMsg& val) {
  this->BuyOrder = val;
}

void QuoteMsg::__set_SellOrder(const OrderMsg& val) {
  this->SellOrder = val;
}

void QuoteMsg::__set_FQR_ID(const std::string& val) {
  this->FQR_ID = val;
}

uint32_t QuoteMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Code);
          this->__isset.Code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->TimeStamp);
          this->__isset.TimeStamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->TradingType);
          this->__isset.TradingType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast14;
          xfer += iprot->readI32(ecast14);
          this->Status = ( ::AtsType::OrderStatus::type)ecast14;
          this->__isset.Status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Portfolio);
          this->__isset.Portfolio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->LastReason);
          this->__isset.LastReason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->BuyOrder.read(iprot);
          this->__isset.BuyOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->SellOrder.read(iprot);
          this->__isset.SellOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->FQR_ID);
          this->__isset.FQR_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QuoteMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QuoteMsg");

  xfer += oprot->writeFieldBegin("Code", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TimeStamp", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->TimeStamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TradingType", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->TradingType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Status", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->Status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Portfolio", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->Portfolio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LastReason", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->LastReason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BuyOrder", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->BuyOrder.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SellOrder", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->SellOrder.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FQR_ID", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->FQR_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QuoteMsg &a, QuoteMsg &b) {
  using ::std::swap;
  swap(a.Code, b.Code);
  swap(a.Id, b.Id);
  swap(a.TimeStamp, b.TimeStamp);
  swap(a.TradingType, b.TradingType);
  swap(a.Status, b.Status);
  swap(a.Portfolio, b.Portfolio);
  swap(a.LastReason, b.LastReason);
  swap(a.BuyOrder, b.BuyOrder);
  swap(a.SellOrder, b.SellOrder);
  swap(a.FQR_ID, b.FQR_ID);
  swap(a.__isset, b.__isset);
}

QuoteMsg::QuoteMsg(const QuoteMsg& other15) {
  Code = other15.Code;
  Id = other15.Id;
  TimeStamp = other15.TimeStamp;
  TradingType = other15.TradingType;
  Status = other15.Status;
  Portfolio = other15.Portfolio;
  LastReason = other15.LastReason;
  BuyOrder = other15.BuyOrder;
  SellOrder = other15.SellOrder;
  FQR_ID = other15.FQR_ID;
  __isset = other15.__isset;
}
QuoteMsg& QuoteMsg::operator=(const QuoteMsg& other16) {
  Code = other16.Code;
  Id = other16.Id;
  TimeStamp = other16.TimeStamp;
  TradingType = other16.TradingType;
  Status = other16.Status;
  Portfolio = other16.Portfolio;
  LastReason = other16.LastReason;
  BuyOrder = other16.BuyOrder;
  SellOrder = other16.SellOrder;
  FQR_ID = other16.FQR_ID;
  __isset = other16.__isset;
  return *this;
}
void QuoteMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QuoteMsg(";
  out << "Code=" << to_string(Code);
  out << ", " << "Id=" << to_string(Id);
  out << ", " << "TimeStamp=" << to_string(TimeStamp);
  out << ", " << "TradingType=" << to_string(TradingType);
  out << ", " << "Status=" << to_string(Status);
  out << ", " << "Portfolio=" << to_string(Portfolio);
  out << ", " << "LastReason=" << to_string(LastReason);
  out << ", " << "BuyOrder=" << to_string(BuyOrder);
  out << ", " << "SellOrder=" << to_string(SellOrder);
  out << ", " << "FQR_ID=" << to_string(FQR_ID);
  out << ")";
}


ExecMsg::~ExecMsg() throw() {
}


void ExecMsg::__set_Code(const std::string& val) {
  this->Code = val;
}

void ExecMsg::__set_Id(const int32_t val) {
  this->Id = val;
}

void ExecMsg::__set_Way(const  ::AtsType::OrderWay::type val) {
  this->Way = val;
}

void ExecMsg::__set_Quantity(const int32_t val) {
  this->Quantity = val;
}

void ExecMsg::__set_Price(const double val) {
  this->Price = val;
}

void ExecMsg::__set_Reference(const std::string& val) {
  this->Reference = val;
}

void ExecMsg::__set_Time(const std::string& val) {
  this->Time = val;
}

void ExecMsg::__set_TradingType(const int32_t val) {
  this->TradingType = val;
}

void ExecMsg::__set_Portfolio(const std::string& val) {
  this->Portfolio = val;
}

void ExecMsg::__set_OpenClose(const std::string& val) {
  this->OpenClose = val;
}

uint32_t ExecMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Code);
          this->__isset.Code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast17;
          xfer += iprot->readI32(ecast17);
          this->Way = ( ::AtsType::OrderWay::type)ecast17;
          this->__isset.Way = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Quantity);
          this->__isset.Quantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Price);
          this->__isset.Price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Reference);
          this->__isset.Reference = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Time);
          this->__isset.Time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->TradingType);
          this->__isset.TradingType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Portfolio);
          this->__isset.Portfolio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->OpenClose);
          this->__isset.OpenClose = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExecMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ExecMsg");

  xfer += oprot->writeFieldBegin("Code", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Way", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->Way);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Quantity", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->Quantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Price", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->Price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Reference", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->Reference);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Time", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->Time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TradingType", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->TradingType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Portfolio", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->Portfolio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OpenClose", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->OpenClose);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExecMsg &a, ExecMsg &b) {
  using ::std::swap;
  swap(a.Code, b.Code);
  swap(a.Id, b.Id);
  swap(a.Way, b.Way);
  swap(a.Quantity, b.Quantity);
  swap(a.Price, b.Price);
  swap(a.Reference, b.Reference);
  swap(a.Time, b.Time);
  swap(a.TradingType, b.TradingType);
  swap(a.Portfolio, b.Portfolio);
  swap(a.OpenClose, b.OpenClose);
  swap(a.__isset, b.__isset);
}

ExecMsg::ExecMsg(const ExecMsg& other18) {
  Code = other18.Code;
  Id = other18.Id;
  Way = other18.Way;
  Quantity = other18.Quantity;
  Price = other18.Price;
  Reference = other18.Reference;
  Time = other18.Time;
  TradingType = other18.TradingType;
  Portfolio = other18.Portfolio;
  OpenClose = other18.OpenClose;
  __isset = other18.__isset;
}
ExecMsg& ExecMsg::operator=(const ExecMsg& other19) {
  Code = other19.Code;
  Id = other19.Id;
  Way = other19.Way;
  Quantity = other19.Quantity;
  Price = other19.Price;
  Reference = other19.Reference;
  Time = other19.Time;
  TradingType = other19.TradingType;
  Portfolio = other19.Portfolio;
  OpenClose = other19.OpenClose;
  __isset = other19.__isset;
  return *this;
}
void ExecMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ExecMsg(";
  out << "Code=" << to_string(Code);
  out << ", " << "Id=" << to_string(Id);
  out << ", " << "Way=" << to_string(Way);
  out << ", " << "Quantity=" << to_string(Quantity);
  out << ", " << "Price=" << to_string(Price);
  out << ", " << "Reference=" << to_string(Reference);
  out << ", " << "Time=" << to_string(Time);
  out << ", " << "TradingType=" << to_string(TradingType);
  out << ", " << "Portfolio=" << to_string(Portfolio);
  out << ", " << "OpenClose=" << to_string(OpenClose);
  out << ")";
}


ListQuoteMsg::~ListQuoteMsg() throw() {
}


void ListQuoteMsg::__set_Quotes(const std::vector<QuoteMsg> & val) {
  this->Quotes = val;
}

uint32_t ListQuoteMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Quotes.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _etype23;
            xfer += iprot->readListBegin(_etype23, _size20);
            this->Quotes.resize(_size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              xfer += this->Quotes[_i24].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Quotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListQuoteMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListQuoteMsg");

  xfer += oprot->writeFieldBegin("Quotes", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Quotes.size()));
    std::vector<QuoteMsg> ::const_iterator _iter25;
    for (_iter25 = this->Quotes.begin(); _iter25 != this->Quotes.end(); ++_iter25)
    {
      xfer += (*_iter25).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListQuoteMsg &a, ListQuoteMsg &b) {
  using ::std::swap;
  swap(a.Quotes, b.Quotes);
  swap(a.__isset, b.__isset);
}

ListQuoteMsg::ListQuoteMsg(const ListQuoteMsg& other26) {
  Quotes = other26.Quotes;
  __isset = other26.__isset;
}
ListQuoteMsg& ListQuoteMsg::operator=(const ListQuoteMsg& other27) {
  Quotes = other27.Quotes;
  __isset = other27.__isset;
  return *this;
}
void ListQuoteMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListQuoteMsg(";
  out << "Quotes=" << to_string(Quotes);
  out << ")";
}


ListExecMsg::~ListExecMsg() throw() {
}


void ListExecMsg::__set_Execs(const std::vector<ExecMsg> & val) {
  this->Execs = val;
}

uint32_t ListExecMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Execs.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->Execs.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              xfer += this->Execs[_i32].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Execs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListExecMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListExecMsg");

  xfer += oprot->writeFieldBegin("Execs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Execs.size()));
    std::vector<ExecMsg> ::const_iterator _iter33;
    for (_iter33 = this->Execs.begin(); _iter33 != this->Execs.end(); ++_iter33)
    {
      xfer += (*_iter33).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListExecMsg &a, ListExecMsg &b) {
  using ::std::swap;
  swap(a.Execs, b.Execs);
  swap(a.__isset, b.__isset);
}

ListExecMsg::ListExecMsg(const ListExecMsg& other34) {
  Execs = other34.Execs;
  __isset = other34.__isset;
}
ListExecMsg& ListExecMsg::operator=(const ListExecMsg& other35) {
  Execs = other35.Execs;
  __isset = other35.__isset;
  return *this;
}
void ListExecMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListExecMsg(";
  out << "Execs=" << to_string(Execs);
  out << ")";
}


ListOrderMsg::~ListOrderMsg() throw() {
}


void ListOrderMsg::__set_Orders(const std::vector<OrderMsg> & val) {
  this->Orders = val;
}

uint32_t ListOrderMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Orders.clear();
            uint32_t _size36;
            ::apache::thrift::protocol::TType _etype39;
            xfer += iprot->readListBegin(_etype39, _size36);
            this->Orders.resize(_size36);
            uint32_t _i40;
            for (_i40 = 0; _i40 < _size36; ++_i40)
            {
              xfer += this->Orders[_i40].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Orders = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListOrderMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListOrderMsg");

  xfer += oprot->writeFieldBegin("Orders", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Orders.size()));
    std::vector<OrderMsg> ::const_iterator _iter41;
    for (_iter41 = this->Orders.begin(); _iter41 != this->Orders.end(); ++_iter41)
    {
      xfer += (*_iter41).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListOrderMsg &a, ListOrderMsg &b) {
  using ::std::swap;
  swap(a.Orders, b.Orders);
  swap(a.__isset, b.__isset);
}

ListOrderMsg::ListOrderMsg(const ListOrderMsg& other42) {
  Orders = other42.Orders;
  __isset = other42.__isset;
}
ListOrderMsg& ListOrderMsg::operator=(const ListOrderMsg& other43) {
  Orders = other43.Orders;
  __isset = other43.__isset;
  return *this;
}
void ListOrderMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListOrderMsg(";
  out << "Orders=" << to_string(Orders);
  out << ")";
}


ListLogMsg::~ListLogMsg() throw() {
}


void ListLogMsg::__set_Logs(const std::vector<LogMsg> & val) {
  this->Logs = val;
}

uint32_t ListLogMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Logs.clear();
            uint32_t _size44;
            ::apache::thrift::protocol::TType _etype47;
            xfer += iprot->readListBegin(_etype47, _size44);
            this->Logs.resize(_size44);
            uint32_t _i48;
            for (_i48 = 0; _i48 < _size44; ++_i48)
            {
              xfer += this->Logs[_i48].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Logs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListLogMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListLogMsg");

  xfer += oprot->writeFieldBegin("Logs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Logs.size()));
    std::vector<LogMsg> ::const_iterator _iter49;
    for (_iter49 = this->Logs.begin(); _iter49 != this->Logs.end(); ++_iter49)
    {
      xfer += (*_iter49).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListLogMsg &a, ListLogMsg &b) {
  using ::std::swap;
  swap(a.Logs, b.Logs);
  swap(a.__isset, b.__isset);
}

ListLogMsg::ListLogMsg(const ListLogMsg& other50) {
  Logs = other50.Logs;
  __isset = other50.__isset;
}
ListLogMsg& ListLogMsg::operator=(const ListLogMsg& other51) {
  Logs = other51.Logs;
  __isset = other51.__isset;
  return *this;
}
void ListLogMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListLogMsg(";
  out << "Logs=" << to_string(Logs);
  out << ")";
}


PositionMsg::~PositionMsg() throw() {
}


void PositionMsg::__set_Instrument(const std::string& val) {
  this->Instrument = val;
}

void PositionMsg::__set_Portfolio(const std::string& val) {
  this->Portfolio = val;
}

void PositionMsg::__set_YesterdayPosition(const int32_t val) {
  this->YesterdayPosition = val;
}

void PositionMsg::__set_TodayPosition(const int32_t val) {
  this->TodayPosition = val;
}

void PositionMsg::__set_TotalPosition(const int32_t val) {
  this->TotalPosition = val;
}

void PositionMsg::__set_TodayBuyPosition(const int32_t val) {
  this->TodayBuyPosition = val;
}

void PositionMsg::__set_TodayBuyPrice(const double val) {
  this->TodayBuyPrice = val;
}

void PositionMsg::__set_TodaySellPosition(const int32_t val) {
  this->TodaySellPosition = val;
}

void PositionMsg::__set_TodaySellPrice(const double val) {
  this->TodaySellPrice = val;
}

void PositionMsg::__set_YesterdayPrice(const double val) {
  this->YesterdayPrice = val;
}

void PositionMsg::__set_YesterdayPriceLocal(const double val) {
  this->YesterdayPriceLocal = val;
}

void PositionMsg::__set_YesterdayPriceExternal(const double val) {
  this->YesterdayPriceExternal = val;
}

void PositionMsg::__set_YesterdayPositionLocal(const int32_t val) {
  this->YesterdayPositionLocal = val;
}

void PositionMsg::__set_YesterdayPositionManual(const int32_t val) {
  this->YesterdayPositionManual = val;
}

void PositionMsg::__set_YesterdayPositionExternal(const int32_t val) {
  this->YesterdayPositionExternal = val;
}

void PositionMsg::__set_UseManualPosition(const bool val) {
  this->UseManualPosition = val;
}

void PositionMsg::__set_YstPositionType(const  ::AtsType::YesterdayPositionType::type val) {
  this->YstPositionType = val;
}

void PositionMsg::__set_YstPriceType(const  ::AtsType::YesterdayPriceType::type val) {
  this->YstPriceType = val;
}

void PositionMsg::__set_Connection(const std::string& val) {
  this->Connection = val;
}

void PositionMsg::__set_TodayPurPosition(const int32_t val) {
  this->TodayPurPosition = val;
}

void PositionMsg::__set_TodayRedPosition(const int32_t val) {
  this->TodayRedPosition = val;
}

void PositionMsg::__set_AccoutTotalPosition(const int32_t val) {
  this->AccoutTotalPosition = val;
}

uint32_t PositionMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Instrument);
          this->__isset.Instrument = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Portfolio);
          this->__isset.Portfolio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->YesterdayPosition);
          this->__isset.YesterdayPosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->TodayPosition);
          this->__isset.TodayPosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->TotalPosition);
          this->__isset.TotalPosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->TodayBuyPosition);
          this->__isset.TodayBuyPosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->TodayBuyPrice);
          this->__isset.TodayBuyPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->TodaySellPosition);
          this->__isset.TodaySellPosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->TodaySellPrice);
          this->__isset.TodaySellPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->YesterdayPrice);
          this->__isset.YesterdayPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->YesterdayPriceLocal);
          this->__isset.YesterdayPriceLocal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->YesterdayPriceExternal);
          this->__isset.YesterdayPriceExternal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->YesterdayPositionLocal);
          this->__isset.YesterdayPositionLocal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->YesterdayPositionManual);
          this->__isset.YesterdayPositionManual = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->YesterdayPositionExternal);
          this->__isset.YesterdayPositionExternal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->UseManualPosition);
          this->__isset.UseManualPosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast52;
          xfer += iprot->readI32(ecast52);
          this->YstPositionType = ( ::AtsType::YesterdayPositionType::type)ecast52;
          this->__isset.YstPositionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast53;
          xfer += iprot->readI32(ecast53);
          this->YstPriceType = ( ::AtsType::YesterdayPriceType::type)ecast53;
          this->__isset.YstPriceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Connection);
          this->__isset.Connection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->TodayPurPosition);
          this->__isset.TodayPurPosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->TodayRedPosition);
          this->__isset.TodayRedPosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->AccoutTotalPosition);
          this->__isset.AccoutTotalPosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PositionMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PositionMsg");

  xfer += oprot->writeFieldBegin("Instrument", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Instrument);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Portfolio", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Portfolio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("YesterdayPosition", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->YesterdayPosition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TodayPosition", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->TodayPosition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TotalPosition", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->TotalPosition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TodayBuyPosition", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->TodayBuyPosition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TodayBuyPrice", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->TodayBuyPrice);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TodaySellPosition", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->TodaySellPosition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TodaySellPrice", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->TodaySellPrice);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("YesterdayPrice", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->YesterdayPrice);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("YesterdayPriceLocal", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->YesterdayPriceLocal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("YesterdayPriceExternal", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->YesterdayPriceExternal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("YesterdayPositionLocal", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->YesterdayPositionLocal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("YesterdayPositionManual", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->YesterdayPositionManual);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("YesterdayPositionExternal", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->YesterdayPositionExternal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UseManualPosition", ::apache::thrift::protocol::T_BOOL, 16);
  xfer += oprot->writeBool(this->UseManualPosition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("YstPositionType", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32((int32_t)this->YstPositionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("YstPriceType", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32((int32_t)this->YstPriceType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Connection", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->Connection);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TodayPurPosition", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->TodayPurPosition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TodayRedPosition", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->TodayRedPosition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AccoutTotalPosition", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->AccoutTotalPosition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PositionMsg &a, PositionMsg &b) {
  using ::std::swap;
  swap(a.Instrument, b.Instrument);
  swap(a.Portfolio, b.Portfolio);
  swap(a.YesterdayPosition, b.YesterdayPosition);
  swap(a.TodayPosition, b.TodayPosition);
  swap(a.TotalPosition, b.TotalPosition);
  swap(a.TodayBuyPosition, b.TodayBuyPosition);
  swap(a.TodayBuyPrice, b.TodayBuyPrice);
  swap(a.TodaySellPosition, b.TodaySellPosition);
  swap(a.TodaySellPrice, b.TodaySellPrice);
  swap(a.YesterdayPrice, b.YesterdayPrice);
  swap(a.YesterdayPriceLocal, b.YesterdayPriceLocal);
  swap(a.YesterdayPriceExternal, b.YesterdayPriceExternal);
  swap(a.YesterdayPositionLocal, b.YesterdayPositionLocal);
  swap(a.YesterdayPositionManual, b.YesterdayPositionManual);
  swap(a.YesterdayPositionExternal, b.YesterdayPositionExternal);
  swap(a.UseManualPosition, b.UseManualPosition);
  swap(a.YstPositionType, b.YstPositionType);
  swap(a.YstPriceType, b.YstPriceType);
  swap(a.Connection, b.Connection);
  swap(a.TodayPurPosition, b.TodayPurPosition);
  swap(a.TodayRedPosition, b.TodayRedPosition);
  swap(a.AccoutTotalPosition, b.AccoutTotalPosition);
  swap(a.__isset, b.__isset);
}

PositionMsg::PositionMsg(const PositionMsg& other54) {
  Instrument = other54.Instrument;
  Portfolio = other54.Portfolio;
  YesterdayPosition = other54.YesterdayPosition;
  TodayPosition = other54.TodayPosition;
  TotalPosition = other54.TotalPosition;
  TodayBuyPosition = other54.TodayBuyPosition;
  TodayBuyPrice = other54.TodayBuyPrice;
  TodaySellPosition = other54.TodaySellPosition;
  TodaySellPrice = other54.TodaySellPrice;
  YesterdayPrice = other54.YesterdayPrice;
  YesterdayPriceLocal = other54.YesterdayPriceLocal;
  YesterdayPriceExternal = other54.YesterdayPriceExternal;
  YesterdayPositionLocal = other54.YesterdayPositionLocal;
  YesterdayPositionManual = other54.YesterdayPositionManual;
  YesterdayPositionExternal = other54.YesterdayPositionExternal;
  UseManualPosition = other54.UseManualPosition;
  YstPositionType = other54.YstPositionType;
  YstPriceType = other54.YstPriceType;
  Connection = other54.Connection;
  TodayPurPosition = other54.TodayPurPosition;
  TodayRedPosition = other54.TodayRedPosition;
  AccoutTotalPosition = other54.AccoutTotalPosition;
  __isset = other54.__isset;
}
PositionMsg& PositionMsg::operator=(const PositionMsg& other55) {
  Instrument = other55.Instrument;
  Portfolio = other55.Portfolio;
  YesterdayPosition = other55.YesterdayPosition;
  TodayPosition = other55.TodayPosition;
  TotalPosition = other55.TotalPosition;
  TodayBuyPosition = other55.TodayBuyPosition;
  TodayBuyPrice = other55.TodayBuyPrice;
  TodaySellPosition = other55.TodaySellPosition;
  TodaySellPrice = other55.TodaySellPrice;
  YesterdayPrice = other55.YesterdayPrice;
  YesterdayPriceLocal = other55.YesterdayPriceLocal;
  YesterdayPriceExternal = other55.YesterdayPriceExternal;
  YesterdayPositionLocal = other55.YesterdayPositionLocal;
  YesterdayPositionManual = other55.YesterdayPositionManual;
  YesterdayPositionExternal = other55.YesterdayPositionExternal;
  UseManualPosition = other55.UseManualPosition;
  YstPositionType = other55.YstPositionType;
  YstPriceType = other55.YstPriceType;
  Connection = other55.Connection;
  TodayPurPosition = other55.TodayPurPosition;
  TodayRedPosition = other55.TodayRedPosition;
  AccoutTotalPosition = other55.AccoutTotalPosition;
  __isset = other55.__isset;
  return *this;
}
void PositionMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PositionMsg(";
  out << "Instrument=" << to_string(Instrument);
  out << ", " << "Portfolio=" << to_string(Portfolio);
  out << ", " << "YesterdayPosition=" << to_string(YesterdayPosition);
  out << ", " << "TodayPosition=" << to_string(TodayPosition);
  out << ", " << "TotalPosition=" << to_string(TotalPosition);
  out << ", " << "TodayBuyPosition=" << to_string(TodayBuyPosition);
  out << ", " << "TodayBuyPrice=" << to_string(TodayBuyPrice);
  out << ", " << "TodaySellPosition=" << to_string(TodaySellPosition);
  out << ", " << "TodaySellPrice=" << to_string(TodaySellPrice);
  out << ", " << "YesterdayPrice=" << to_string(YesterdayPrice);
  out << ", " << "YesterdayPriceLocal=" << to_string(YesterdayPriceLocal);
  out << ", " << "YesterdayPriceExternal=" << to_string(YesterdayPriceExternal);
  out << ", " << "YesterdayPositionLocal=" << to_string(YesterdayPositionLocal);
  out << ", " << "YesterdayPositionManual=" << to_string(YesterdayPositionManual);
  out << ", " << "YesterdayPositionExternal=" << to_string(YesterdayPositionExternal);
  out << ", " << "UseManualPosition=" << to_string(UseManualPosition);
  out << ", " << "YstPositionType=" << to_string(YstPositionType);
  out << ", " << "YstPriceType=" << to_string(YstPriceType);
  out << ", " << "Connection=" << to_string(Connection);
  out << ", " << "TodayPurPosition=" << to_string(TodayPurPosition);
  out << ", " << "TodayRedPosition=" << to_string(TodayRedPosition);
  out << ", " << "AccoutTotalPosition=" << to_string(AccoutTotalPosition);
  out << ")";
}


FeedMsg::~FeedMsg() throw() {
}


void FeedMsg::__set_Code(const std::string& val) {
  this->Code = val;
}

void FeedMsg::__set_FeedSourceName(const std::string& val) {
  this->FeedSourceName = val;
}

void FeedMsg::__set_Bid(const double val) {
  this->Bid = val;
}

void FeedMsg::__set_Ask(const double val) {
  this->Ask = val;
}

void FeedMsg::__set_BidQuantity(const int32_t val) {
  this->BidQuantity = val;
}

void FeedMsg::__set_AskQuantity(const int32_t val) {
  this->AskQuantity = val;
}

void FeedMsg::__set_Last(const double val) {
  this->Last = val;
}

void FeedMsg::__set_LastQuantity(const int32_t val) {
  this->LastQuantity = val;
}

void FeedMsg::__set_LastOrClose(const double val) {
  this->LastOrClose = val;
}

void FeedMsg::__set_Mid(const double val) {
  this->Mid = val;
}

void FeedMsg::__set_Close(const double val) {
  this->Close = val;
}

void FeedMsg::__set_Settlement(const double val) {
  this->Settlement = val;
}

void FeedMsg::__set_UpperLimit(const double val) {
  this->UpperLimit = val;
__isset.UpperLimit = true;
}

void FeedMsg::__set_LowerLimit(const double val) {
  this->LowerLimit = val;
__isset.LowerLimit = true;
}

void FeedMsg::__set_Perf(const double val) {
  this->Perf = val;
}

void FeedMsg::__set_DailyVolume(const int64_t val) {
  this->DailyVolume = val;
}

void FeedMsg::__set_isBiddAskActive(const bool val) {
  this->isBiddAskActive = val;
}

void FeedMsg::__set_isSuspended(const bool val) {
  this->isSuspended = val;
}

void FeedMsg::__set_MaxDepth(const int32_t val) {
  this->MaxDepth = val;
}

void FeedMsg::__set_BidDepths(const std::vector<double> & val) {
  this->BidDepths = val;
__isset.BidDepths = true;
}

void FeedMsg::__set_AskDepths(const std::vector<double> & val) {
  this->AskDepths = val;
__isset.AskDepths = true;
}

void FeedMsg::__set_BidQtys(const std::vector<int32_t> & val) {
  this->BidQtys = val;
__isset.BidQtys = true;
}

void FeedMsg::__set_AskQtys(const std::vector<int32_t> & val) {
  this->AskQtys = val;
__isset.AskQtys = true;
}

void FeedMsg::__set_MarketTime(const std::string& val) {
  this->MarketTime = val;
}

uint32_t FeedMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Code);
          this->__isset.Code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->FeedSourceName);
          this->__isset.FeedSourceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Bid);
          this->__isset.Bid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Ask);
          this->__isset.Ask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->BidQuantity);
          this->__isset.BidQuantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->AskQuantity);
          this->__isset.AskQuantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Last);
          this->__isset.Last = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->LastQuantity);
          this->__isset.LastQuantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->LastOrClose);
          this->__isset.LastOrClose = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Mid);
          this->__isset.Mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Close);
          this->__isset.Close = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Settlement);
          this->__isset.Settlement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->UpperLimit);
          this->__isset.UpperLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->LowerLimit);
          this->__isset.LowerLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Perf);
          this->__isset.Perf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->DailyVolume);
          this->__isset.DailyVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isBiddAskActive);
          this->__isset.isBiddAskActive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSuspended);
          this->__isset.isSuspended = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->MaxDepth);
          this->__isset.MaxDepth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->BidDepths.clear();
            uint32_t _size56;
            ::apache::thrift::protocol::TType _etype59;
            xfer += iprot->readListBegin(_etype59, _size56);
            this->BidDepths.resize(_size56);
            uint32_t _i60;
            for (_i60 = 0; _i60 < _size56; ++_i60)
            {
              xfer += iprot->readDouble(this->BidDepths[_i60]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.BidDepths = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AskDepths.clear();
            uint32_t _size61;
            ::apache::thrift::protocol::TType _etype64;
            xfer += iprot->readListBegin(_etype64, _size61);
            this->AskDepths.resize(_size61);
            uint32_t _i65;
            for (_i65 = 0; _i65 < _size61; ++_i65)
            {
              xfer += iprot->readDouble(this->AskDepths[_i65]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AskDepths = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->BidQtys.clear();
            uint32_t _size66;
            ::apache::thrift::protocol::TType _etype69;
            xfer += iprot->readListBegin(_etype69, _size66);
            this->BidQtys.resize(_size66);
            uint32_t _i70;
            for (_i70 = 0; _i70 < _size66; ++_i70)
            {
              xfer += iprot->readI32(this->BidQtys[_i70]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.BidQtys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AskQtys.clear();
            uint32_t _size71;
            ::apache::thrift::protocol::TType _etype74;
            xfer += iprot->readListBegin(_etype74, _size71);
            this->AskQtys.resize(_size71);
            uint32_t _i75;
            for (_i75 = 0; _i75 < _size71; ++_i75)
            {
              xfer += iprot->readI32(this->AskQtys[_i75]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AskQtys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->MarketTime);
          this->__isset.MarketTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FeedMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FeedMsg");

  xfer += oprot->writeFieldBegin("Code", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FeedSourceName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->FeedSourceName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Bid", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->Bid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Ask", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->Ask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BidQuantity", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->BidQuantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AskQuantity", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->AskQuantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Last", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->Last);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LastQuantity", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->LastQuantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LastOrClose", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->LastOrClose);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Mid", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->Mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Close", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->Close);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Settlement", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->Settlement);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.UpperLimit) {
    xfer += oprot->writeFieldBegin("UpperLimit", ::apache::thrift::protocol::T_DOUBLE, 13);
    xfer += oprot->writeDouble(this->UpperLimit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.LowerLimit) {
    xfer += oprot->writeFieldBegin("LowerLimit", ::apache::thrift::protocol::T_DOUBLE, 14);
    xfer += oprot->writeDouble(this->LowerLimit);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("Perf", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->Perf);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DailyVolume", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->DailyVolume);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isBiddAskActive", ::apache::thrift::protocol::T_BOOL, 17);
  xfer += oprot->writeBool(this->isBiddAskActive);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isSuspended", ::apache::thrift::protocol::T_BOOL, 18);
  xfer += oprot->writeBool(this->isSuspended);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MaxDepth", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->MaxDepth);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.BidDepths) {
    xfer += oprot->writeFieldBegin("BidDepths", ::apache::thrift::protocol::T_LIST, 20);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->BidDepths.size()));
      std::vector<double> ::const_iterator _iter76;
      for (_iter76 = this->BidDepths.begin(); _iter76 != this->BidDepths.end(); ++_iter76)
      {
        xfer += oprot->writeDouble((*_iter76));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AskDepths) {
    xfer += oprot->writeFieldBegin("AskDepths", ::apache::thrift::protocol::T_LIST, 21);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->AskDepths.size()));
      std::vector<double> ::const_iterator _iter77;
      for (_iter77 = this->AskDepths.begin(); _iter77 != this->AskDepths.end(); ++_iter77)
      {
        xfer += oprot->writeDouble((*_iter77));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.BidQtys) {
    xfer += oprot->writeFieldBegin("BidQtys", ::apache::thrift::protocol::T_LIST, 22);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->BidQtys.size()));
      std::vector<int32_t> ::const_iterator _iter78;
      for (_iter78 = this->BidQtys.begin(); _iter78 != this->BidQtys.end(); ++_iter78)
      {
        xfer += oprot->writeI32((*_iter78));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AskQtys) {
    xfer += oprot->writeFieldBegin("AskQtys", ::apache::thrift::protocol::T_LIST, 23);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->AskQtys.size()));
      std::vector<int32_t> ::const_iterator _iter79;
      for (_iter79 = this->AskQtys.begin(); _iter79 != this->AskQtys.end(); ++_iter79)
      {
        xfer += oprot->writeI32((*_iter79));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("MarketTime", ::apache::thrift::protocol::T_STRING, 24);
  xfer += oprot->writeString(this->MarketTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FeedMsg &a, FeedMsg &b) {
  using ::std::swap;
  swap(a.Code, b.Code);
  swap(a.FeedSourceName, b.FeedSourceName);
  swap(a.Bid, b.Bid);
  swap(a.Ask, b.Ask);
  swap(a.BidQuantity, b.BidQuantity);
  swap(a.AskQuantity, b.AskQuantity);
  swap(a.Last, b.Last);
  swap(a.LastQuantity, b.LastQuantity);
  swap(a.LastOrClose, b.LastOrClose);
  swap(a.Mid, b.Mid);
  swap(a.Close, b.Close);
  swap(a.Settlement, b.Settlement);
  swap(a.UpperLimit, b.UpperLimit);
  swap(a.LowerLimit, b.LowerLimit);
  swap(a.Perf, b.Perf);
  swap(a.DailyVolume, b.DailyVolume);
  swap(a.isBiddAskActive, b.isBiddAskActive);
  swap(a.isSuspended, b.isSuspended);
  swap(a.MaxDepth, b.MaxDepth);
  swap(a.BidDepths, b.BidDepths);
  swap(a.AskDepths, b.AskDepths);
  swap(a.BidQtys, b.BidQtys);
  swap(a.AskQtys, b.AskQtys);
  swap(a.MarketTime, b.MarketTime);
  swap(a.__isset, b.__isset);
}

FeedMsg::FeedMsg(const FeedMsg& other80) {
  Code = other80.Code;
  FeedSourceName = other80.FeedSourceName;
  Bid = other80.Bid;
  Ask = other80.Ask;
  BidQuantity = other80.BidQuantity;
  AskQuantity = other80.AskQuantity;
  Last = other80.Last;
  LastQuantity = other80.LastQuantity;
  LastOrClose = other80.LastOrClose;
  Mid = other80.Mid;
  Close = other80.Close;
  Settlement = other80.Settlement;
  UpperLimit = other80.UpperLimit;
  LowerLimit = other80.LowerLimit;
  Perf = other80.Perf;
  DailyVolume = other80.DailyVolume;
  isBiddAskActive = other80.isBiddAskActive;
  isSuspended = other80.isSuspended;
  MaxDepth = other80.MaxDepth;
  BidDepths = other80.BidDepths;
  AskDepths = other80.AskDepths;
  BidQtys = other80.BidQtys;
  AskQtys = other80.AskQtys;
  MarketTime = other80.MarketTime;
  __isset = other80.__isset;
}
FeedMsg& FeedMsg::operator=(const FeedMsg& other81) {
  Code = other81.Code;
  FeedSourceName = other81.FeedSourceName;
  Bid = other81.Bid;
  Ask = other81.Ask;
  BidQuantity = other81.BidQuantity;
  AskQuantity = other81.AskQuantity;
  Last = other81.Last;
  LastQuantity = other81.LastQuantity;
  LastOrClose = other81.LastOrClose;
  Mid = other81.Mid;
  Close = other81.Close;
  Settlement = other81.Settlement;
  UpperLimit = other81.UpperLimit;
  LowerLimit = other81.LowerLimit;
  Perf = other81.Perf;
  DailyVolume = other81.DailyVolume;
  isBiddAskActive = other81.isBiddAskActive;
  isSuspended = other81.isSuspended;
  MaxDepth = other81.MaxDepth;
  BidDepths = other81.BidDepths;
  AskDepths = other81.AskDepths;
  BidQtys = other81.BidQtys;
  AskQtys = other81.AskQtys;
  MarketTime = other81.MarketTime;
  __isset = other81.__isset;
  return *this;
}
void FeedMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FeedMsg(";
  out << "Code=" << to_string(Code);
  out << ", " << "FeedSourceName=" << to_string(FeedSourceName);
  out << ", " << "Bid=" << to_string(Bid);
  out << ", " << "Ask=" << to_string(Ask);
  out << ", " << "BidQuantity=" << to_string(BidQuantity);
  out << ", " << "AskQuantity=" << to_string(AskQuantity);
  out << ", " << "Last=" << to_string(Last);
  out << ", " << "LastQuantity=" << to_string(LastQuantity);
  out << ", " << "LastOrClose=" << to_string(LastOrClose);
  out << ", " << "Mid=" << to_string(Mid);
  out << ", " << "Close=" << to_string(Close);
  out << ", " << "Settlement=" << to_string(Settlement);
  out << ", " << "UpperLimit="; (__isset.UpperLimit ? (out << to_string(UpperLimit)) : (out << "<null>"));
  out << ", " << "LowerLimit="; (__isset.LowerLimit ? (out << to_string(LowerLimit)) : (out << "<null>"));
  out << ", " << "Perf=" << to_string(Perf);
  out << ", " << "DailyVolume=" << to_string(DailyVolume);
  out << ", " << "isBiddAskActive=" << to_string(isBiddAskActive);
  out << ", " << "isSuspended=" << to_string(isSuspended);
  out << ", " << "MaxDepth=" << to_string(MaxDepth);
  out << ", " << "BidDepths="; (__isset.BidDepths ? (out << to_string(BidDepths)) : (out << "<null>"));
  out << ", " << "AskDepths="; (__isset.AskDepths ? (out << to_string(AskDepths)) : (out << "<null>"));
  out << ", " << "BidQtys="; (__isset.BidQtys ? (out << to_string(BidQtys)) : (out << "<null>"));
  out << ", " << "AskQtys="; (__isset.AskQtys ? (out << to_string(AskQtys)) : (out << "<null>"));
  out << ", " << "MarketTime=" << to_string(MarketTime);
  out << ")";
}


AtsInstrumentMsg::~AtsInstrumentMsg() throw() {
}


void AtsInstrumentMsg::__set_Code(const std::string& val) {
  this->Code = val;
}

void AtsInstrumentMsg::__set_Position(const PositionMsg& val) {
  this->Position = val;
}

void AtsInstrumentMsg::__set_FeedItem(const FeedMsg& val) {
  this->FeedItem = val;
}

void AtsInstrumentMsg::__set_OrderContainer(const std::map<int32_t, std::map<int32_t, OrderMsg> > & val) {
  this->OrderContainer = val;
}

void AtsInstrumentMsg::__set_ExchangeFees(const double val) {
  this->ExchangeFees = val;
}

void AtsInstrumentMsg::__set_BrokerFees(const double val) {
  this->BrokerFees = val;
}

void AtsInstrumentMsg::__set_YesterdayPnlBarycenter(const double val) {
  this->YesterdayPnlBarycenter = val;
}

void AtsInstrumentMsg::__set_TodayPnlBarycenter(const double val) {
  this->TodayPnlBarycenter = val;
}

void AtsInstrumentMsg::__set_SizeToSend(const int32_t val) {
  this->SizeToSend = val;
}

void AtsInstrumentMsg::__set_MarketMakerItemBid(const std::map<double, int32_t> & val) {
  this->MarketMakerItemBid = val;
}

void AtsInstrumentMsg::__set_MarketMakerItemAsk(const std::map<double, int32_t> & val) {
  this->MarketMakerItemAsk = val;
}

void AtsInstrumentMsg::__set_InstrumentClassName(const std::string& val) {
  this->InstrumentClassName = val;
}

uint32_t AtsInstrumentMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Code);
          this->__isset.Code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Position.read(iprot);
          this->__isset.Position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FeedItem.read(iprot);
          this->__isset.FeedItem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->OrderContainer.clear();
            uint32_t _size82;
            ::apache::thrift::protocol::TType _ktype83;
            ::apache::thrift::protocol::TType _vtype84;
            xfer += iprot->readMapBegin(_ktype83, _vtype84, _size82);
            uint32_t _i86;
            for (_i86 = 0; _i86 < _size82; ++_i86)
            {
              int32_t _key87;
              xfer += iprot->readI32(_key87);
              std::map<int32_t, OrderMsg> & _val88 = this->OrderContainer[_key87];
              {
                _val88.clear();
                uint32_t _size89;
                ::apache::thrift::protocol::TType _ktype90;
                ::apache::thrift::protocol::TType _vtype91;
                xfer += iprot->readMapBegin(_ktype90, _vtype91, _size89);
                uint32_t _i93;
                for (_i93 = 0; _i93 < _size89; ++_i93)
                {
                  int32_t _key94;
                  xfer += iprot->readI32(_key94);
                  OrderMsg& _val95 = _val88[_key94];
                  xfer += _val95.read(iprot);
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.OrderContainer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ExchangeFees);
          this->__isset.ExchangeFees = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->BrokerFees);
          this->__isset.BrokerFees = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->YesterdayPnlBarycenter);
          this->__isset.YesterdayPnlBarycenter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->TodayPnlBarycenter);
          this->__isset.TodayPnlBarycenter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->SizeToSend);
          this->__isset.SizeToSend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->MarketMakerItemBid.clear();
            uint32_t _size96;
            ::apache::thrift::protocol::TType _ktype97;
            ::apache::thrift::protocol::TType _vtype98;
            xfer += iprot->readMapBegin(_ktype97, _vtype98, _size96);
            uint32_t _i100;
            for (_i100 = 0; _i100 < _size96; ++_i100)
            {
              double _key101;
              xfer += iprot->readDouble(_key101);
              int32_t& _val102 = this->MarketMakerItemBid[_key101];
              xfer += iprot->readI32(_val102);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.MarketMakerItemBid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->MarketMakerItemAsk.clear();
            uint32_t _size103;
            ::apache::thrift::protocol::TType _ktype104;
            ::apache::thrift::protocol::TType _vtype105;
            xfer += iprot->readMapBegin(_ktype104, _vtype105, _size103);
            uint32_t _i107;
            for (_i107 = 0; _i107 < _size103; ++_i107)
            {
              double _key108;
              xfer += iprot->readDouble(_key108);
              int32_t& _val109 = this->MarketMakerItemAsk[_key108];
              xfer += iprot->readI32(_val109);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.MarketMakerItemAsk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->InstrumentClassName);
          this->__isset.InstrumentClassName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AtsInstrumentMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AtsInstrumentMsg");

  xfer += oprot->writeFieldBegin("Code", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Position", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->Position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FeedItem", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->FeedItem.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OrderContainer", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->OrderContainer.size()));
    std::map<int32_t, std::map<int32_t, OrderMsg> > ::const_iterator _iter110;
    for (_iter110 = this->OrderContainer.begin(); _iter110 != this->OrderContainer.end(); ++_iter110)
    {
      xfer += oprot->writeI32(_iter110->first);
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter110->second.size()));
        std::map<int32_t, OrderMsg> ::const_iterator _iter111;
        for (_iter111 = _iter110->second.begin(); _iter111 != _iter110->second.end(); ++_iter111)
        {
          xfer += oprot->writeI32(_iter111->first);
          xfer += _iter111->second.write(oprot);
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ExchangeFees", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->ExchangeFees);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BrokerFees", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->BrokerFees);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("YesterdayPnlBarycenter", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->YesterdayPnlBarycenter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TodayPnlBarycenter", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->TodayPnlBarycenter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SizeToSend", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->SizeToSend);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MarketMakerItemBid", ::apache::thrift::protocol::T_MAP, 10);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_DOUBLE, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->MarketMakerItemBid.size()));
    std::map<double, int32_t> ::const_iterator _iter112;
    for (_iter112 = this->MarketMakerItemBid.begin(); _iter112 != this->MarketMakerItemBid.end(); ++_iter112)
    {
      xfer += oprot->writeDouble(_iter112->first);
      xfer += oprot->writeI32(_iter112->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MarketMakerItemAsk", ::apache::thrift::protocol::T_MAP, 11);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_DOUBLE, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->MarketMakerItemAsk.size()));
    std::map<double, int32_t> ::const_iterator _iter113;
    for (_iter113 = this->MarketMakerItemAsk.begin(); _iter113 != this->MarketMakerItemAsk.end(); ++_iter113)
    {
      xfer += oprot->writeDouble(_iter113->first);
      xfer += oprot->writeI32(_iter113->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("InstrumentClassName", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->InstrumentClassName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AtsInstrumentMsg &a, AtsInstrumentMsg &b) {
  using ::std::swap;
  swap(a.Code, b.Code);
  swap(a.Position, b.Position);
  swap(a.FeedItem, b.FeedItem);
  swap(a.OrderContainer, b.OrderContainer);
  swap(a.ExchangeFees, b.ExchangeFees);
  swap(a.BrokerFees, b.BrokerFees);
  swap(a.YesterdayPnlBarycenter, b.YesterdayPnlBarycenter);
  swap(a.TodayPnlBarycenter, b.TodayPnlBarycenter);
  swap(a.SizeToSend, b.SizeToSend);
  swap(a.MarketMakerItemBid, b.MarketMakerItemBid);
  swap(a.MarketMakerItemAsk, b.MarketMakerItemAsk);
  swap(a.InstrumentClassName, b.InstrumentClassName);
  swap(a.__isset, b.__isset);
}

AtsInstrumentMsg::AtsInstrumentMsg(const AtsInstrumentMsg& other114) {
  Code = other114.Code;
  Position = other114.Position;
  FeedItem = other114.FeedItem;
  OrderContainer = other114.OrderContainer;
  ExchangeFees = other114.ExchangeFees;
  BrokerFees = other114.BrokerFees;
  YesterdayPnlBarycenter = other114.YesterdayPnlBarycenter;
  TodayPnlBarycenter = other114.TodayPnlBarycenter;
  SizeToSend = other114.SizeToSend;
  MarketMakerItemBid = other114.MarketMakerItemBid;
  MarketMakerItemAsk = other114.MarketMakerItemAsk;
  InstrumentClassName = other114.InstrumentClassName;
  __isset = other114.__isset;
}
AtsInstrumentMsg& AtsInstrumentMsg::operator=(const AtsInstrumentMsg& other115) {
  Code = other115.Code;
  Position = other115.Position;
  FeedItem = other115.FeedItem;
  OrderContainer = other115.OrderContainer;
  ExchangeFees = other115.ExchangeFees;
  BrokerFees = other115.BrokerFees;
  YesterdayPnlBarycenter = other115.YesterdayPnlBarycenter;
  TodayPnlBarycenter = other115.TodayPnlBarycenter;
  SizeToSend = other115.SizeToSend;
  MarketMakerItemBid = other115.MarketMakerItemBid;
  MarketMakerItemAsk = other115.MarketMakerItemAsk;
  InstrumentClassName = other115.InstrumentClassName;
  __isset = other115.__isset;
  return *this;
}
void AtsInstrumentMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AtsInstrumentMsg(";
  out << "Code=" << to_string(Code);
  out << ", " << "Position=" << to_string(Position);
  out << ", " << "FeedItem=" << to_string(FeedItem);
  out << ", " << "OrderContainer=" << to_string(OrderContainer);
  out << ", " << "ExchangeFees=" << to_string(ExchangeFees);
  out << ", " << "BrokerFees=" << to_string(BrokerFees);
  out << ", " << "YesterdayPnlBarycenter=" << to_string(YesterdayPnlBarycenter);
  out << ", " << "TodayPnlBarycenter=" << to_string(TodayPnlBarycenter);
  out << ", " << "SizeToSend=" << to_string(SizeToSend);
  out << ", " << "MarketMakerItemBid=" << to_string(MarketMakerItemBid);
  out << ", " << "MarketMakerItemAsk=" << to_string(MarketMakerItemAsk);
  out << ", " << "InstrumentClassName=" << to_string(InstrumentClassName);
  out << ")";
}


AtsMsg::~AtsMsg() throw() {
}


void AtsMsg::__set_Name(const std::string& val) {
  this->Name = val;
}

void AtsMsg::__set_AutoStatus(const bool val) {
  this->AutoStatus = val;
}

void AtsMsg::__set_YesterdayPositionType(const  ::AtsType::YesterdayPositionType::type val) {
  this->YesterdayPositionType = val;
}

void AtsMsg::__set_YesterdayPnlBary(const double val) {
  this->YesterdayPnlBary = val;
}

void AtsMsg::__set_TodayPnlBary(const double val) {
  this->TodayPnlBary = val;
}

void AtsMsg::__set_YesterdayPnlMid(const double val) {
  this->YesterdayPnlMid = val;
}

void AtsMsg::__set_TodayPnlMid(const double val) {
  this->TodayPnlMid = val;
}

void AtsMsg::__set_YesterdayPnlLast(const double val) {
  this->YesterdayPnlLast = val;
}

void AtsMsg::__set_TodayPnlLast(const double val) {
  this->TodayPnlLast = val;
}

void AtsMsg::__set_FeesExchange(const double val) {
  this->FeesExchange = val;
}

void AtsMsg::__set_FeesBroker(const double val) {
  this->FeesBroker = val;
}

void AtsMsg::__set_TotalPnl(const double val) {
  this->TotalPnl = val;
}

uint32_t AtsMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->AutoStatus);
          this->__isset.AutoStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast116;
          xfer += iprot->readI32(ecast116);
          this->YesterdayPositionType = ( ::AtsType::YesterdayPositionType::type)ecast116;
          this->__isset.YesterdayPositionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->YesterdayPnlBary);
          this->__isset.YesterdayPnlBary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->TodayPnlBary);
          this->__isset.TodayPnlBary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->YesterdayPnlMid);
          this->__isset.YesterdayPnlMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->TodayPnlMid);
          this->__isset.TodayPnlMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->YesterdayPnlLast);
          this->__isset.YesterdayPnlLast = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->TodayPnlLast);
          this->__isset.TodayPnlLast = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FeesExchange);
          this->__isset.FeesExchange = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FeesBroker);
          this->__isset.FeesBroker = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->TotalPnl);
          this->__isset.TotalPnl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AtsMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AtsMsg");

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AutoStatus", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->AutoStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("YesterdayPositionType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->YesterdayPositionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("YesterdayPnlBary", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->YesterdayPnlBary);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TodayPnlBary", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->TodayPnlBary);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("YesterdayPnlMid", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->YesterdayPnlMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TodayPnlMid", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->TodayPnlMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("YesterdayPnlLast", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->YesterdayPnlLast);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TodayPnlLast", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->TodayPnlLast);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FeesExchange", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->FeesExchange);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FeesBroker", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->FeesBroker);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TotalPnl", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->TotalPnl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AtsMsg &a, AtsMsg &b) {
  using ::std::swap;
  swap(a.Name, b.Name);
  swap(a.AutoStatus, b.AutoStatus);
  swap(a.YesterdayPositionType, b.YesterdayPositionType);
  swap(a.YesterdayPnlBary, b.YesterdayPnlBary);
  swap(a.TodayPnlBary, b.TodayPnlBary);
  swap(a.YesterdayPnlMid, b.YesterdayPnlMid);
  swap(a.TodayPnlMid, b.TodayPnlMid);
  swap(a.YesterdayPnlLast, b.YesterdayPnlLast);
  swap(a.TodayPnlLast, b.TodayPnlLast);
  swap(a.FeesExchange, b.FeesExchange);
  swap(a.FeesBroker, b.FeesBroker);
  swap(a.TotalPnl, b.TotalPnl);
  swap(a.__isset, b.__isset);
}

AtsMsg::AtsMsg(const AtsMsg& other117) {
  Name = other117.Name;
  AutoStatus = other117.AutoStatus;
  YesterdayPositionType = other117.YesterdayPositionType;
  YesterdayPnlBary = other117.YesterdayPnlBary;
  TodayPnlBary = other117.TodayPnlBary;
  YesterdayPnlMid = other117.YesterdayPnlMid;
  TodayPnlMid = other117.TodayPnlMid;
  YesterdayPnlLast = other117.YesterdayPnlLast;
  TodayPnlLast = other117.TodayPnlLast;
  FeesExchange = other117.FeesExchange;
  FeesBroker = other117.FeesBroker;
  TotalPnl = other117.TotalPnl;
  __isset = other117.__isset;
}
AtsMsg& AtsMsg::operator=(const AtsMsg& other118) {
  Name = other118.Name;
  AutoStatus = other118.AutoStatus;
  YesterdayPositionType = other118.YesterdayPositionType;
  YesterdayPnlBary = other118.YesterdayPnlBary;
  TodayPnlBary = other118.TodayPnlBary;
  YesterdayPnlMid = other118.YesterdayPnlMid;
  TodayPnlMid = other118.TodayPnlMid;
  YesterdayPnlLast = other118.YesterdayPnlLast;
  TodayPnlLast = other118.TodayPnlLast;
  FeesExchange = other118.FeesExchange;
  FeesBroker = other118.FeesBroker;
  TotalPnl = other118.TotalPnl;
  __isset = other118.__isset;
  return *this;
}
void AtsMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AtsMsg(";
  out << "Name=" << to_string(Name);
  out << ", " << "AutoStatus=" << to_string(AutoStatus);
  out << ", " << "YesterdayPositionType=" << to_string(YesterdayPositionType);
  out << ", " << "YesterdayPnlBary=" << to_string(YesterdayPnlBary);
  out << ", " << "TodayPnlBary=" << to_string(TodayPnlBary);
  out << ", " << "YesterdayPnlMid=" << to_string(YesterdayPnlMid);
  out << ", " << "TodayPnlMid=" << to_string(TodayPnlMid);
  out << ", " << "YesterdayPnlLast=" << to_string(YesterdayPnlLast);
  out << ", " << "TodayPnlLast=" << to_string(TodayPnlLast);
  out << ", " << "FeesExchange=" << to_string(FeesExchange);
  out << ", " << "FeesBroker=" << to_string(FeesBroker);
  out << ", " << "TotalPnl=" << to_string(TotalPnl);
  out << ")";
}


FeesStructMsg::~FeesStructMsg() throw() {
}


void FeesStructMsg::__set_ClassName(const std::string& val) {
  this->ClassName = val;
}

void FeesStructMsg::__set_FeesFloatExchange(const double val) {
  this->FeesFloatExchange = val;
}

void FeesStructMsg::__set_FeesFloatBroker(const double val) {
  this->FeesFloatBroker = val;
}

void FeesStructMsg::__set_FeesFixExchange(const double val) {
  this->FeesFixExchange = val;
}

void FeesStructMsg::__set_FeesFixBroker(const double val) {
  this->FeesFixBroker = val;
}

void FeesStructMsg::__set_FeesSellAmount(const double val) {
  this->FeesSellAmount = val;
}

void FeesStructMsg::__set_NotCloseToday(const bool val) {
  this->NotCloseToday = val;
}

uint32_t FeesStructMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ClassName);
          this->__isset.ClassName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FeesFloatExchange);
          this->__isset.FeesFloatExchange = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FeesFloatBroker);
          this->__isset.FeesFloatBroker = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FeesFixExchange);
          this->__isset.FeesFixExchange = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FeesFixBroker);
          this->__isset.FeesFixBroker = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FeesSellAmount);
          this->__isset.FeesSellAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->NotCloseToday);
          this->__isset.NotCloseToday = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FeesStructMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FeesStructMsg");

  xfer += oprot->writeFieldBegin("ClassName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ClassName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FeesFloatExchange", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->FeesFloatExchange);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FeesFloatBroker", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->FeesFloatBroker);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FeesFixExchange", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->FeesFixExchange);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FeesFixBroker", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->FeesFixBroker);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FeesSellAmount", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->FeesSellAmount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("NotCloseToday", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->NotCloseToday);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FeesStructMsg &a, FeesStructMsg &b) {
  using ::std::swap;
  swap(a.ClassName, b.ClassName);
  swap(a.FeesFloatExchange, b.FeesFloatExchange);
  swap(a.FeesFloatBroker, b.FeesFloatBroker);
  swap(a.FeesFixExchange, b.FeesFixExchange);
  swap(a.FeesFixBroker, b.FeesFixBroker);
  swap(a.FeesSellAmount, b.FeesSellAmount);
  swap(a.NotCloseToday, b.NotCloseToday);
  swap(a.__isset, b.__isset);
}

FeesStructMsg::FeesStructMsg(const FeesStructMsg& other119) {
  ClassName = other119.ClassName;
  FeesFloatExchange = other119.FeesFloatExchange;
  FeesFloatBroker = other119.FeesFloatBroker;
  FeesFixExchange = other119.FeesFixExchange;
  FeesFixBroker = other119.FeesFixBroker;
  FeesSellAmount = other119.FeesSellAmount;
  NotCloseToday = other119.NotCloseToday;
  __isset = other119.__isset;
}
FeesStructMsg& FeesStructMsg::operator=(const FeesStructMsg& other120) {
  ClassName = other120.ClassName;
  FeesFloatExchange = other120.FeesFloatExchange;
  FeesFloatBroker = other120.FeesFloatBroker;
  FeesFixExchange = other120.FeesFixExchange;
  FeesFixBroker = other120.FeesFixBroker;
  FeesSellAmount = other120.FeesSellAmount;
  NotCloseToday = other120.NotCloseToday;
  __isset = other120.__isset;
  return *this;
}
void FeesStructMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FeesStructMsg(";
  out << "ClassName=" << to_string(ClassName);
  out << ", " << "FeesFloatExchange=" << to_string(FeesFloatExchange);
  out << ", " << "FeesFloatBroker=" << to_string(FeesFloatBroker);
  out << ", " << "FeesFixExchange=" << to_string(FeesFixExchange);
  out << ", " << "FeesFixBroker=" << to_string(FeesFixBroker);
  out << ", " << "FeesSellAmount=" << to_string(FeesSellAmount);
  out << ", " << "NotCloseToday=" << to_string(NotCloseToday);
  out << ")";
}


InstrumentClassMsg::~InstrumentClassMsg() throw() {
}


void InstrumentClassMsg::__set_Name(const std::string& val) {
  this->Name = val;
}

void InstrumentClassMsg::__set_FeesStruct(const FeesStructMsg& val) {
  this->FeesStruct = val;
}

void InstrumentClassMsg::__set_MaturityTime(const std::string& val) {
  this->MaturityTime = val;
__isset.MaturityTime = true;
}

void InstrumentClassMsg::__set_Maturities(const std::vector<MaturityMsg> & val) {
  this->Maturities = val;
__isset.Maturities = true;
}

void InstrumentClassMsg::__set_PointValue(const int32_t val) {
  this->PointValue = val;
}

void InstrumentClassMsg::__set_Currency(const std::string& val) {
  this->Currency = val;
}

uint32_t InstrumentClassMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FeesStruct.read(iprot);
          this->__isset.FeesStruct = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->MaturityTime);
          this->__isset.MaturityTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Maturities.clear();
            uint32_t _size121;
            ::apache::thrift::protocol::TType _etype124;
            xfer += iprot->readListBegin(_etype124, _size121);
            this->Maturities.resize(_size121);
            uint32_t _i125;
            for (_i125 = 0; _i125 < _size121; ++_i125)
            {
              xfer += this->Maturities[_i125].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Maturities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->PointValue);
          this->__isset.PointValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Currency);
          this->__isset.Currency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InstrumentClassMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InstrumentClassMsg");

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FeesStruct", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->FeesStruct.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.MaturityTime) {
    xfer += oprot->writeFieldBegin("MaturityTime", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->MaturityTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Maturities) {
    xfer += oprot->writeFieldBegin("Maturities", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Maturities.size()));
      std::vector<MaturityMsg> ::const_iterator _iter126;
      for (_iter126 = this->Maturities.begin(); _iter126 != this->Maturities.end(); ++_iter126)
      {
        xfer += (*_iter126).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("PointValue", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->PointValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Currency", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->Currency);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InstrumentClassMsg &a, InstrumentClassMsg &b) {
  using ::std::swap;
  swap(a.Name, b.Name);
  swap(a.FeesStruct, b.FeesStruct);
  swap(a.MaturityTime, b.MaturityTime);
  swap(a.Maturities, b.Maturities);
  swap(a.PointValue, b.PointValue);
  swap(a.Currency, b.Currency);
  swap(a.__isset, b.__isset);
}

InstrumentClassMsg::InstrumentClassMsg(const InstrumentClassMsg& other127) {
  Name = other127.Name;
  FeesStruct = other127.FeesStruct;
  MaturityTime = other127.MaturityTime;
  Maturities = other127.Maturities;
  PointValue = other127.PointValue;
  Currency = other127.Currency;
  __isset = other127.__isset;
}
InstrumentClassMsg& InstrumentClassMsg::operator=(const InstrumentClassMsg& other128) {
  Name = other128.Name;
  FeesStruct = other128.FeesStruct;
  MaturityTime = other128.MaturityTime;
  Maturities = other128.Maturities;
  PointValue = other128.PointValue;
  Currency = other128.Currency;
  __isset = other128.__isset;
  return *this;
}
void InstrumentClassMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InstrumentClassMsg(";
  out << "Name=" << to_string(Name);
  out << ", " << "FeesStruct=" << to_string(FeesStruct);
  out << ", " << "MaturityTime="; (__isset.MaturityTime ? (out << to_string(MaturityTime)) : (out << "<null>"));
  out << ", " << "Maturities="; (__isset.Maturities ? (out << to_string(Maturities)) : (out << "<null>"));
  out << ", " << "PointValue=" << to_string(PointValue);
  out << ", " << "Currency=" << to_string(Currency);
  out << ")";
}


MaturityMsg::~MaturityMsg() throw() {
}


void MaturityMsg::__set_MaturityStr(const std::string& val) {
  this->MaturityStr = val;
}

void MaturityMsg::__set_OpenDays(const double val) {
  this->OpenDays = val;
}

void MaturityMsg::__set_OffDays(const int32_t val) {
  this->OffDays = val;
}

void MaturityMsg::__set_Actu(const double val) {
  this->Actu = val;
}

void MaturityMsg::__set_MaturityTime(const std::string& val) {
  this->MaturityTime = val;
}

uint32_t MaturityMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->MaturityStr);
          this->__isset.MaturityStr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->OpenDays);
          this->__isset.OpenDays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->OffDays);
          this->__isset.OffDays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Actu);
          this->__isset.Actu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->MaturityTime);
          this->__isset.MaturityTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MaturityMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MaturityMsg");

  xfer += oprot->writeFieldBegin("MaturityStr", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->MaturityStr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OpenDays", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->OpenDays);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OffDays", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->OffDays);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Actu", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->Actu);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MaturityTime", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->MaturityTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MaturityMsg &a, MaturityMsg &b) {
  using ::std::swap;
  swap(a.MaturityStr, b.MaturityStr);
  swap(a.OpenDays, b.OpenDays);
  swap(a.OffDays, b.OffDays);
  swap(a.Actu, b.Actu);
  swap(a.MaturityTime, b.MaturityTime);
  swap(a.__isset, b.__isset);
}

MaturityMsg::MaturityMsg(const MaturityMsg& other129) {
  MaturityStr = other129.MaturityStr;
  OpenDays = other129.OpenDays;
  OffDays = other129.OffDays;
  Actu = other129.Actu;
  MaturityTime = other129.MaturityTime;
  __isset = other129.__isset;
}
MaturityMsg& MaturityMsg::operator=(const MaturityMsg& other130) {
  MaturityStr = other130.MaturityStr;
  OpenDays = other130.OpenDays;
  OffDays = other130.OffDays;
  Actu = other130.Actu;
  MaturityTime = other130.MaturityTime;
  __isset = other130.__isset;
  return *this;
}
void MaturityMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MaturityMsg(";
  out << "MaturityStr=" << to_string(MaturityStr);
  out << ", " << "OpenDays=" << to_string(OpenDays);
  out << ", " << "OffDays=" << to_string(OffDays);
  out << ", " << "Actu=" << to_string(Actu);
  out << ", " << "MaturityTime=" << to_string(MaturityTime);
  out << ")";
}


UnderlyingMsg::~UnderlyingMsg() throw() {
}


void UnderlyingMsg::__set_Name(const std::string& val) {
  this->Name = val;
}

void UnderlyingMsg::__set_DaysOffList(const std::vector<std::string> & val) {
  this->DaysOffList = val;
}

void UnderlyingMsg::__set_Rate(const double val) {
  this->Rate = val;
}

void UnderlyingMsg::__set_FutureClassList(const std::vector<InstrumentClassMsg> & val) {
  this->FutureClassList = val;
}

void UnderlyingMsg::__set_OptionClassList(const std::vector<InstrumentClassMsg> & val) {
  this->OptionClassList = val;
}

void UnderlyingMsg::__set_StockClass(const InstrumentClassMsg& val) {
  this->StockClass = val;
__isset.StockClass = true;
}

uint32_t UnderlyingMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DaysOffList.clear();
            uint32_t _size131;
            ::apache::thrift::protocol::TType _etype134;
            xfer += iprot->readListBegin(_etype134, _size131);
            this->DaysOffList.resize(_size131);
            uint32_t _i135;
            for (_i135 = 0; _i135 < _size131; ++_i135)
            {
              xfer += iprot->readString(this->DaysOffList[_i135]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DaysOffList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Rate);
          this->__isset.Rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FutureClassList.clear();
            uint32_t _size136;
            ::apache::thrift::protocol::TType _etype139;
            xfer += iprot->readListBegin(_etype139, _size136);
            this->FutureClassList.resize(_size136);
            uint32_t _i140;
            for (_i140 = 0; _i140 < _size136; ++_i140)
            {
              xfer += this->FutureClassList[_i140].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FutureClassList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->OptionClassList.clear();
            uint32_t _size141;
            ::apache::thrift::protocol::TType _etype144;
            xfer += iprot->readListBegin(_etype144, _size141);
            this->OptionClassList.resize(_size141);
            uint32_t _i145;
            for (_i145 = 0; _i145 < _size141; ++_i145)
            {
              xfer += this->OptionClassList[_i145].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.OptionClassList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->StockClass.read(iprot);
          this->__isset.StockClass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UnderlyingMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UnderlyingMsg");

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DaysOffList", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->DaysOffList.size()));
    std::vector<std::string> ::const_iterator _iter146;
    for (_iter146 = this->DaysOffList.begin(); _iter146 != this->DaysOffList.end(); ++_iter146)
    {
      xfer += oprot->writeString((*_iter146));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Rate", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->Rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FutureClassList", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FutureClassList.size()));
    std::vector<InstrumentClassMsg> ::const_iterator _iter147;
    for (_iter147 = this->FutureClassList.begin(); _iter147 != this->FutureClassList.end(); ++_iter147)
    {
      xfer += (*_iter147).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OptionClassList", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->OptionClassList.size()));
    std::vector<InstrumentClassMsg> ::const_iterator _iter148;
    for (_iter148 = this->OptionClassList.begin(); _iter148 != this->OptionClassList.end(); ++_iter148)
    {
      xfer += (*_iter148).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.StockClass) {
    xfer += oprot->writeFieldBegin("StockClass", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->StockClass.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UnderlyingMsg &a, UnderlyingMsg &b) {
  using ::std::swap;
  swap(a.Name, b.Name);
  swap(a.DaysOffList, b.DaysOffList);
  swap(a.Rate, b.Rate);
  swap(a.FutureClassList, b.FutureClassList);
  swap(a.OptionClassList, b.OptionClassList);
  swap(a.StockClass, b.StockClass);
  swap(a.__isset, b.__isset);
}

UnderlyingMsg::UnderlyingMsg(const UnderlyingMsg& other149) {
  Name = other149.Name;
  DaysOffList = other149.DaysOffList;
  Rate = other149.Rate;
  FutureClassList = other149.FutureClassList;
  OptionClassList = other149.OptionClassList;
  StockClass = other149.StockClass;
  __isset = other149.__isset;
}
UnderlyingMsg& UnderlyingMsg::operator=(const UnderlyingMsg& other150) {
  Name = other150.Name;
  DaysOffList = other150.DaysOffList;
  Rate = other150.Rate;
  FutureClassList = other150.FutureClassList;
  OptionClassList = other150.OptionClassList;
  StockClass = other150.StockClass;
  __isset = other150.__isset;
  return *this;
}
void UnderlyingMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnderlyingMsg(";
  out << "Name=" << to_string(Name);
  out << ", " << "DaysOffList=" << to_string(DaysOffList);
  out << ", " << "Rate=" << to_string(Rate);
  out << ", " << "FutureClassList=" << to_string(FutureClassList);
  out << ", " << "OptionClassList=" << to_string(OptionClassList);
  out << ", " << "StockClass="; (__isset.StockClass ? (out << to_string(StockClass)) : (out << "<null>"));
  out << ")";
}


TradingPeriodMsg::~TradingPeriodMsg() throw() {
}


void TradingPeriodMsg::__set_StartTime(const std::string& val) {
  this->StartTime = val;
}

void TradingPeriodMsg::__set_StopTime(const std::string& val) {
  this->StopTime = val;
}

void TradingPeriodMsg::__set_Phase(const  ::AtsType::TradingPhase::type val) {
  this->Phase = val;
}

void TradingPeriodMsg::__set_AutoStopInterval(const int32_t val) {
  this->AutoStopInterval = val;
}

uint32_t TradingPeriodMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->StartTime);
          this->__isset.StartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->StopTime);
          this->__isset.StopTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast151;
          xfer += iprot->readI32(ecast151);
          this->Phase = ( ::AtsType::TradingPhase::type)ecast151;
          this->__isset.Phase = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->AutoStopInterval);
          this->__isset.AutoStopInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TradingPeriodMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TradingPeriodMsg");

  xfer += oprot->writeFieldBegin("StartTime", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->StartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("StopTime", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->StopTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Phase", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->Phase);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AutoStopInterval", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->AutoStopInterval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TradingPeriodMsg &a, TradingPeriodMsg &b) {
  using ::std::swap;
  swap(a.StartTime, b.StartTime);
  swap(a.StopTime, b.StopTime);
  swap(a.Phase, b.Phase);
  swap(a.AutoStopInterval, b.AutoStopInterval);
  swap(a.__isset, b.__isset);
}

TradingPeriodMsg::TradingPeriodMsg(const TradingPeriodMsg& other152) {
  StartTime = other152.StartTime;
  StopTime = other152.StopTime;
  Phase = other152.Phase;
  AutoStopInterval = other152.AutoStopInterval;
  __isset = other152.__isset;
}
TradingPeriodMsg& TradingPeriodMsg::operator=(const TradingPeriodMsg& other153) {
  StartTime = other153.StartTime;
  StopTime = other153.StopTime;
  Phase = other153.Phase;
  AutoStopInterval = other153.AutoStopInterval;
  __isset = other153.__isset;
  return *this;
}
void TradingPeriodMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TradingPeriodMsg(";
  out << "StartTime=" << to_string(StartTime);
  out << ", " << "StopTime=" << to_string(StopTime);
  out << ", " << "Phase=" << to_string(Phase);
  out << ", " << "AutoStopInterval=" << to_string(AutoStopInterval);
  out << ")";
}


TradingPeriodManagerMsg::~TradingPeriodManagerMsg() throw() {
}


void TradingPeriodManagerMsg::__set_TradingPeriodList(const std::vector<TradingPeriodMsg> & val) {
  this->TradingPeriodList = val;
}

void TradingPeriodManagerMsg::__set_ShiftPriceTime(const std::string& val) {
  this->ShiftPriceTime = val;
}

void TradingPeriodManagerMsg::__set_ShiftEodTime(const std::string& val) {
  this->ShiftEodTime = val;
}

void TradingPeriodManagerMsg::__set_ShiftEodTimeN(const std::string& val) {
  this->ShiftEodTimeN = val;
}

uint32_t TradingPeriodManagerMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TradingPeriodList.clear();
            uint32_t _size154;
            ::apache::thrift::protocol::TType _etype157;
            xfer += iprot->readListBegin(_etype157, _size154);
            this->TradingPeriodList.resize(_size154);
            uint32_t _i158;
            for (_i158 = 0; _i158 < _size154; ++_i158)
            {
              xfer += this->TradingPeriodList[_i158].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TradingPeriodList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ShiftPriceTime);
          this->__isset.ShiftPriceTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ShiftEodTime);
          this->__isset.ShiftEodTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ShiftEodTimeN);
          this->__isset.ShiftEodTimeN = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TradingPeriodManagerMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TradingPeriodManagerMsg");

  xfer += oprot->writeFieldBegin("TradingPeriodList", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TradingPeriodList.size()));
    std::vector<TradingPeriodMsg> ::const_iterator _iter159;
    for (_iter159 = this->TradingPeriodList.begin(); _iter159 != this->TradingPeriodList.end(); ++_iter159)
    {
      xfer += (*_iter159).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ShiftPriceTime", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ShiftPriceTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ShiftEodTime", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->ShiftEodTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ShiftEodTimeN", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->ShiftEodTimeN);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TradingPeriodManagerMsg &a, TradingPeriodManagerMsg &b) {
  using ::std::swap;
  swap(a.TradingPeriodList, b.TradingPeriodList);
  swap(a.ShiftPriceTime, b.ShiftPriceTime);
  swap(a.ShiftEodTime, b.ShiftEodTime);
  swap(a.ShiftEodTimeN, b.ShiftEodTimeN);
  swap(a.__isset, b.__isset);
}

TradingPeriodManagerMsg::TradingPeriodManagerMsg(const TradingPeriodManagerMsg& other160) {
  TradingPeriodList = other160.TradingPeriodList;
  ShiftPriceTime = other160.ShiftPriceTime;
  ShiftEodTime = other160.ShiftEodTime;
  ShiftEodTimeN = other160.ShiftEodTimeN;
  __isset = other160.__isset;
}
TradingPeriodManagerMsg& TradingPeriodManagerMsg::operator=(const TradingPeriodManagerMsg& other161) {
  TradingPeriodList = other161.TradingPeriodList;
  ShiftPriceTime = other161.ShiftPriceTime;
  ShiftEodTime = other161.ShiftEodTime;
  ShiftEodTimeN = other161.ShiftEodTimeN;
  __isset = other161.__isset;
  return *this;
}
void TradingPeriodManagerMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TradingPeriodManagerMsg(";
  out << "TradingPeriodList=" << to_string(TradingPeriodList);
  out << ", " << "ShiftPriceTime=" << to_string(ShiftPriceTime);
  out << ", " << "ShiftEodTime=" << to_string(ShiftEodTime);
  out << ", " << "ShiftEodTimeN=" << to_string(ShiftEodTimeN);
  out << ")";
}


IntraDataMsg::~IntraDataMsg() throw() {
}


void IntraDataMsg::__set_name(const std::string& val) {
  this->name = val;
}

void IntraDataMsg::__set_time(const std::string& val) {
  this->time = val;
}

void IntraDataMsg::__set_datas(const std::map<std::string, double> & val) {
  this->datas = val;
}

uint32_t IntraDataMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->datas.clear();
            uint32_t _size162;
            ::apache::thrift::protocol::TType _ktype163;
            ::apache::thrift::protocol::TType _vtype164;
            xfer += iprot->readMapBegin(_ktype163, _vtype164, _size162);
            uint32_t _i166;
            for (_i166 = 0; _i166 < _size162; ++_i166)
            {
              std::string _key167;
              xfer += iprot->readString(_key167);
              double& _val168 = this->datas[_key167];
              xfer += iprot->readDouble(_val168);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.datas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IntraDataMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IntraDataMsg");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datas", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->datas.size()));
    std::map<std::string, double> ::const_iterator _iter169;
    for (_iter169 = this->datas.begin(); _iter169 != this->datas.end(); ++_iter169)
    {
      xfer += oprot->writeString(_iter169->first);
      xfer += oprot->writeDouble(_iter169->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IntraDataMsg &a, IntraDataMsg &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.time, b.time);
  swap(a.datas, b.datas);
  swap(a.__isset, b.__isset);
}

IntraDataMsg::IntraDataMsg(const IntraDataMsg& other170) {
  name = other170.name;
  time = other170.time;
  datas = other170.datas;
  __isset = other170.__isset;
}
IntraDataMsg& IntraDataMsg::operator=(const IntraDataMsg& other171) {
  name = other171.name;
  time = other171.time;
  datas = other171.datas;
  __isset = other171.__isset;
  return *this;
}
void IntraDataMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IntraDataMsg(";
  out << "name=" << to_string(name);
  out << ", " << "time=" << to_string(time);
  out << ", " << "datas=" << to_string(datas);
  out << ")";
}


AESDataMsg::~AESDataMsg() throw() {
}


void AESDataMsg::__set_num(const std::string& val) {
  this->num = val;
}

void AESDataMsg::__set_date(const std::string& val) {
  this->date = val;
}

void AESDataMsg::__set_time_t(const std::string& val) {
  this->time_t = val;
}

uint32_t AESDataMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->num);
          this->__isset.num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->date);
          this->__isset.date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->time_t);
          this->__isset.time_t = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AESDataMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AESDataMsg");

  xfer += oprot->writeFieldBegin("num", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("date", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->date);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_t", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->time_t);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AESDataMsg &a, AESDataMsg &b) {
  using ::std::swap;
  swap(a.num, b.num);
  swap(a.date, b.date);
  swap(a.time_t, b.time_t);
  swap(a.__isset, b.__isset);
}

AESDataMsg::AESDataMsg(const AESDataMsg& other172) {
  num = other172.num;
  date = other172.date;
  time_t = other172.time_t;
  __isset = other172.__isset;
}
AESDataMsg& AESDataMsg::operator=(const AESDataMsg& other173) {
  num = other173.num;
  date = other173.date;
  time_t = other173.time_t;
  __isset = other173.__isset;
  return *this;
}
void AESDataMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AESDataMsg(";
  out << "num=" << to_string(num);
  out << ", " << "date=" << to_string(date);
  out << ", " << "time_t=" << to_string(time_t);
  out << ")";
}

} // namespace
