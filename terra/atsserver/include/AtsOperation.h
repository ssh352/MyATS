/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AtsOperation_H
#define AtsOperation_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "AtsGeneral_types.h"

namespace AtsGeneral {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AtsOperationIf {
 public:
  virtual ~AtsOperationIf() {}
  virtual int64_t HeartBeat() = 0;
  virtual void SetLocalTime(const int64_t ticks) = 0;
  virtual void CloseAll() = 0;
  virtual void FeedSourceRelease(const std::string& feedsourcename) = 0;
  virtual bool SetFeedActived(const std::string& feedsourcename, const bool activated) = 0;
  virtual bool SetConnectionTradingAllowed(const std::string& connectionname, const bool allowed) = 0;
  virtual void ConnectionConnect(const std::string& connectionname, const bool toConnect) = 0;
  virtual bool CancelOrder(const int32_t id) = 0;
  virtual void CancelAllOrder() = 0;
  virtual int32_t SetYesterdayPositionLocal(const PositionMsg& position, const int32_t yesterdayPositionLocal) = 0;
  virtual double SetYesterdayPriceLocalLocal(const PositionMsg& position, const double yesterdayPriceLocal) = 0;
  virtual int32_t SetYesterdayPositionManual(const PositionMsg& position, const int32_t yesterdayPositionManual) = 0;
  virtual int32_t SetYesterdayPositionExternal(const PositionMsg& position, const int32_t yesterdayPositionExternal) = 0;
  virtual bool SetUseManualPosition(const PositionMsg& position, const bool useManualPosition) = 0;
  virtual  ::AtsType::YesterdayPositionType::type SetYstPositionType(const PositionMsg& position, const  ::AtsType::YesterdayPositionType::type ystPositionType) = 0;
  virtual  ::AtsType::YesterdayPositionType::type SetAtsYstPositionType(const AtsMsg& ats, const  ::AtsType::YesterdayPositionType::type ystPositionType) = 0;
  virtual bool CreateManualOrder(const double price, const  ::AtsType::OrderWay::type way, const int32_t quantity, const std::string& atsName, const std::string& atsInstrumentCode, const int32_t tradingtype, const  ::AtsType::OrderRestriction::type orderrestriction, const  ::AtsType::OrderOpenClose::type openclose, const  ::AtsType::OrderPriceMode::type priceMode) = 0;
  virtual void GetFeesStruct(FeesStructMsg& _return, const std::string& className) = 0;
  virtual void UpdateFeesStruct(FeesStructMsg& _return, const FeesStructMsg& feesStruct) = 0;
  virtual double TickUpPrice(const AtsInstrumentMsg& instrument, const double price, const int32_t ticks) = 0;
  virtual double TickDownPrice(const AtsInstrumentMsg& instrument, const double price, const int32_t ticks) = 0;
  virtual void KillAll(const std::string& atsName, const int32_t tradingtype) = 0;
  virtual void GetTradingPeriodManager(TradingPeriodManagerMsg& _return, const std::string& atsName) = 0;
  virtual void SetTradingPeriodManager(const std::string& atsName, const TradingPeriodManagerMsg& tradingperiodManager) = 0;
  virtual void SaveReferential(const std::string& atsName, const TradingPeriodManagerMsg& tradingPeriodManager, const UnderlyingMsg& underlying, const InstrumentClassMsg& StockClass) = 0;
  virtual void StartPublish() = 0;
  virtual void ForceSubScribe(const std::string& atsName, const std::string& instrumentCode) = 0;
  virtual void StartAutomaton(const std::string& atsName) = 0;
  virtual void StartAutomatonByList(const std::vector<std::string> & atsName) = 0;
  virtual void StopAutomaton(const std::string& atsNamme) = 0;
  virtual void CaculateATS(const std::string& atsName) = 0;
  virtual void Start(const std::string& atsName) = 0;
  virtual void Stop(const std::string& atsName) = 0;
  virtual void SaveConfig(const std::string& atsName) = 0;
  virtual void SaveConfigDaily(const std::string& atsName) = 0;
  virtual bool CheckAesData(const AESDataMsg& msg) = 0;
  virtual void SendExternalPosition(const std::vector<std::string> & positions) = 0;
  virtual void RequestDeals(std::vector<std::string> & _return) = 0;
  virtual bool CreateManualQuote(const std::string& atsName, const std::string& atsInstrumentCode, const double bidprice, const int32_t bidquantity, const double askprice, const int32_t askquantity, const int32_t tradingtype, const  ::AtsType::OrderOpenClose::type bidopenclose, const  ::AtsType::OrderOpenClose::type askopenclose) = 0;
  virtual bool CancelQuote(const int32_t id) = 0;
  virtual void CancelAllQuote() = 0;
};

class AtsOperationIfFactory {
 public:
  typedef AtsOperationIf Handler;

  virtual ~AtsOperationIfFactory() {}

  virtual AtsOperationIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AtsOperationIf* /* handler */) = 0;
};

class AtsOperationIfSingletonFactory : virtual public AtsOperationIfFactory {
 public:
  AtsOperationIfSingletonFactory(const boost::shared_ptr<AtsOperationIf>& iface) : iface_(iface) {}
  virtual ~AtsOperationIfSingletonFactory() {}

  virtual AtsOperationIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AtsOperationIf* /* handler */) {}

 protected:
  boost::shared_ptr<AtsOperationIf> iface_;
};

class AtsOperationNull : virtual public AtsOperationIf {
 public:
  virtual ~AtsOperationNull() {}
  int64_t HeartBeat() {
    int64_t _return = 0;
    return _return;
  }
  void SetLocalTime(const int64_t /* ticks */) {
    return;
  }
  void CloseAll() {
    return;
  }
  void FeedSourceRelease(const std::string& /* feedsourcename */) {
    return;
  }
  bool SetFeedActived(const std::string& /* feedsourcename */, const bool /* activated */) {
    bool _return = false;
    return _return;
  }
  bool SetConnectionTradingAllowed(const std::string& /* connectionname */, const bool /* allowed */) {
    bool _return = false;
    return _return;
  }
  void ConnectionConnect(const std::string& /* connectionname */, const bool /* toConnect */) {
    return;
  }
  bool CancelOrder(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  void CancelAllOrder() {
    return;
  }
  int32_t SetYesterdayPositionLocal(const PositionMsg& /* position */, const int32_t /* yesterdayPositionLocal */) {
    int32_t _return = 0;
    return _return;
  }
  double SetYesterdayPriceLocalLocal(const PositionMsg& /* position */, const double /* yesterdayPriceLocal */) {
    double _return = (double)0;
    return _return;
  }
  int32_t SetYesterdayPositionManual(const PositionMsg& /* position */, const int32_t /* yesterdayPositionManual */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t SetYesterdayPositionExternal(const PositionMsg& /* position */, const int32_t /* yesterdayPositionExternal */) {
    int32_t _return = 0;
    return _return;
  }
  bool SetUseManualPosition(const PositionMsg& /* position */, const bool /* useManualPosition */) {
    bool _return = false;
    return _return;
  }
   ::AtsType::YesterdayPositionType::type SetYstPositionType(const PositionMsg& /* position */, const  ::AtsType::YesterdayPositionType::type /* ystPositionType */) {
     ::AtsType::YesterdayPositionType::type _return = ( ::AtsType::YesterdayPositionType::type)0;
    return _return;
  }
   ::AtsType::YesterdayPositionType::type SetAtsYstPositionType(const AtsMsg& /* ats */, const  ::AtsType::YesterdayPositionType::type /* ystPositionType */) {
     ::AtsType::YesterdayPositionType::type _return = ( ::AtsType::YesterdayPositionType::type)0;
    return _return;
  }
  bool CreateManualOrder(const double /* price */, const  ::AtsType::OrderWay::type /* way */, const int32_t /* quantity */, const std::string& /* atsName */, const std::string& /* atsInstrumentCode */, const int32_t /* tradingtype */, const  ::AtsType::OrderRestriction::type /* orderrestriction */, const  ::AtsType::OrderOpenClose::type /* openclose */, const  ::AtsType::OrderPriceMode::type /* priceMode */) {
    bool _return = false;
    return _return;
  }
  void GetFeesStruct(FeesStructMsg& /* _return */, const std::string& /* className */) {
    return;
  }
  void UpdateFeesStruct(FeesStructMsg& /* _return */, const FeesStructMsg& /* feesStruct */) {
    return;
  }
  double TickUpPrice(const AtsInstrumentMsg& /* instrument */, const double /* price */, const int32_t /* ticks */) {
    double _return = (double)0;
    return _return;
  }
  double TickDownPrice(const AtsInstrumentMsg& /* instrument */, const double /* price */, const int32_t /* ticks */) {
    double _return = (double)0;
    return _return;
  }
  void KillAll(const std::string& /* atsName */, const int32_t /* tradingtype */) {
    return;
  }
  void GetTradingPeriodManager(TradingPeriodManagerMsg& /* _return */, const std::string& /* atsName */) {
    return;
  }
  void SetTradingPeriodManager(const std::string& /* atsName */, const TradingPeriodManagerMsg& /* tradingperiodManager */) {
    return;
  }
  void SaveReferential(const std::string& /* atsName */, const TradingPeriodManagerMsg& /* tradingPeriodManager */, const UnderlyingMsg& /* underlying */, const InstrumentClassMsg& /* StockClass */) {
    return;
  }
  void StartPublish() {
    return;
  }
  void ForceSubScribe(const std::string& /* atsName */, const std::string& /* instrumentCode */) {
    return;
  }
  void StartAutomaton(const std::string& /* atsName */) {
    return;
  }
  void StartAutomatonByList(const std::vector<std::string> & /* atsName */) {
    return;
  }
  void StopAutomaton(const std::string& /* atsNamme */) {
    return;
  }
  void CaculateATS(const std::string& /* atsName */) {
    return;
  }
  void Start(const std::string& /* atsName */) {
    return;
  }
  void Stop(const std::string& /* atsName */) {
    return;
  }
  void SaveConfig(const std::string& /* atsName */) {
    return;
  }
  void SaveConfigDaily(const std::string& /* atsName */) {
    return;
  }
  bool CheckAesData(const AESDataMsg& /* msg */) {
    bool _return = false;
    return _return;
  }
  void SendExternalPosition(const std::vector<std::string> & /* positions */) {
    return;
  }
  void RequestDeals(std::vector<std::string> & /* _return */) {
    return;
  }
  bool CreateManualQuote(const std::string& /* atsName */, const std::string& /* atsInstrumentCode */, const double /* bidprice */, const int32_t /* bidquantity */, const double /* askprice */, const int32_t /* askquantity */, const int32_t /* tradingtype */, const  ::AtsType::OrderOpenClose::type /* bidopenclose */, const  ::AtsType::OrderOpenClose::type /* askopenclose */) {
    bool _return = false;
    return _return;
  }
  bool CancelQuote(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  void CancelAllQuote() {
    return;
  }
};


class AtsOperation_HeartBeat_args {
 public:

  AtsOperation_HeartBeat_args(const AtsOperation_HeartBeat_args&);
  AtsOperation_HeartBeat_args& operator=(const AtsOperation_HeartBeat_args&);
  AtsOperation_HeartBeat_args() {
  }

  virtual ~AtsOperation_HeartBeat_args() throw();

  bool operator == (const AtsOperation_HeartBeat_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_HeartBeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_HeartBeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_HeartBeat_pargs {
 public:


  virtual ~AtsOperation_HeartBeat_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_HeartBeat_result__isset {
  _AtsOperation_HeartBeat_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_HeartBeat_result__isset;

class AtsOperation_HeartBeat_result {
 public:

  AtsOperation_HeartBeat_result(const AtsOperation_HeartBeat_result&);
  AtsOperation_HeartBeat_result& operator=(const AtsOperation_HeartBeat_result&);
  AtsOperation_HeartBeat_result() : success(0) {
  }

  virtual ~AtsOperation_HeartBeat_result() throw();
  int64_t success;

  _AtsOperation_HeartBeat_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const AtsOperation_HeartBeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_HeartBeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_HeartBeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_HeartBeat_presult__isset {
  _AtsOperation_HeartBeat_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_HeartBeat_presult__isset;

class AtsOperation_HeartBeat_presult {
 public:


  virtual ~AtsOperation_HeartBeat_presult() throw();
  int64_t* success;

  _AtsOperation_HeartBeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_SetLocalTime_args__isset {
  _AtsOperation_SetLocalTime_args__isset() : ticks(false) {}
  bool ticks :1;
} _AtsOperation_SetLocalTime_args__isset;

class AtsOperation_SetLocalTime_args {
 public:

  AtsOperation_SetLocalTime_args(const AtsOperation_SetLocalTime_args&);
  AtsOperation_SetLocalTime_args& operator=(const AtsOperation_SetLocalTime_args&);
  AtsOperation_SetLocalTime_args() : ticks(0) {
  }

  virtual ~AtsOperation_SetLocalTime_args() throw();
  int64_t ticks;

  _AtsOperation_SetLocalTime_args__isset __isset;

  void __set_ticks(const int64_t val);

  bool operator == (const AtsOperation_SetLocalTime_args & rhs) const
  {
    if (!(ticks == rhs.ticks))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetLocalTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetLocalTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SetLocalTime_pargs {
 public:


  virtual ~AtsOperation_SetLocalTime_pargs() throw();
  const int64_t* ticks;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SetLocalTime_result {
 public:

  AtsOperation_SetLocalTime_result(const AtsOperation_SetLocalTime_result&);
  AtsOperation_SetLocalTime_result& operator=(const AtsOperation_SetLocalTime_result&);
  AtsOperation_SetLocalTime_result() {
  }

  virtual ~AtsOperation_SetLocalTime_result() throw();

  bool operator == (const AtsOperation_SetLocalTime_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_SetLocalTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetLocalTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SetLocalTime_presult {
 public:


  virtual ~AtsOperation_SetLocalTime_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AtsOperation_CloseAll_args {
 public:

  AtsOperation_CloseAll_args(const AtsOperation_CloseAll_args&);
  AtsOperation_CloseAll_args& operator=(const AtsOperation_CloseAll_args&);
  AtsOperation_CloseAll_args() {
  }

  virtual ~AtsOperation_CloseAll_args() throw();

  bool operator == (const AtsOperation_CloseAll_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_CloseAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CloseAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_CloseAll_pargs {
 public:


  virtual ~AtsOperation_CloseAll_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_CloseAll_result {
 public:

  AtsOperation_CloseAll_result(const AtsOperation_CloseAll_result&);
  AtsOperation_CloseAll_result& operator=(const AtsOperation_CloseAll_result&);
  AtsOperation_CloseAll_result() {
  }

  virtual ~AtsOperation_CloseAll_result() throw();

  bool operator == (const AtsOperation_CloseAll_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_CloseAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CloseAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_CloseAll_presult {
 public:


  virtual ~AtsOperation_CloseAll_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_FeedSourceRelease_args__isset {
  _AtsOperation_FeedSourceRelease_args__isset() : feedsourcename(false) {}
  bool feedsourcename :1;
} _AtsOperation_FeedSourceRelease_args__isset;

class AtsOperation_FeedSourceRelease_args {
 public:

  AtsOperation_FeedSourceRelease_args(const AtsOperation_FeedSourceRelease_args&);
  AtsOperation_FeedSourceRelease_args& operator=(const AtsOperation_FeedSourceRelease_args&);
  AtsOperation_FeedSourceRelease_args() : feedsourcename() {
  }

  virtual ~AtsOperation_FeedSourceRelease_args() throw();
  std::string feedsourcename;

  _AtsOperation_FeedSourceRelease_args__isset __isset;

  void __set_feedsourcename(const std::string& val);

  bool operator == (const AtsOperation_FeedSourceRelease_args & rhs) const
  {
    if (!(feedsourcename == rhs.feedsourcename))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_FeedSourceRelease_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_FeedSourceRelease_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_FeedSourceRelease_pargs {
 public:


  virtual ~AtsOperation_FeedSourceRelease_pargs() throw();
  const std::string* feedsourcename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_FeedSourceRelease_result {
 public:

  AtsOperation_FeedSourceRelease_result(const AtsOperation_FeedSourceRelease_result&);
  AtsOperation_FeedSourceRelease_result& operator=(const AtsOperation_FeedSourceRelease_result&);
  AtsOperation_FeedSourceRelease_result() {
  }

  virtual ~AtsOperation_FeedSourceRelease_result() throw();

  bool operator == (const AtsOperation_FeedSourceRelease_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_FeedSourceRelease_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_FeedSourceRelease_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_FeedSourceRelease_presult {
 public:


  virtual ~AtsOperation_FeedSourceRelease_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_SetFeedActived_args__isset {
  _AtsOperation_SetFeedActived_args__isset() : feedsourcename(false), activated(false) {}
  bool feedsourcename :1;
  bool activated :1;
} _AtsOperation_SetFeedActived_args__isset;

class AtsOperation_SetFeedActived_args {
 public:

  AtsOperation_SetFeedActived_args(const AtsOperation_SetFeedActived_args&);
  AtsOperation_SetFeedActived_args& operator=(const AtsOperation_SetFeedActived_args&);
  AtsOperation_SetFeedActived_args() : feedsourcename(), activated(0) {
  }

  virtual ~AtsOperation_SetFeedActived_args() throw();
  std::string feedsourcename;
  bool activated;

  _AtsOperation_SetFeedActived_args__isset __isset;

  void __set_feedsourcename(const std::string& val);

  void __set_activated(const bool val);

  bool operator == (const AtsOperation_SetFeedActived_args & rhs) const
  {
    if (!(feedsourcename == rhs.feedsourcename))
      return false;
    if (!(activated == rhs.activated))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetFeedActived_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetFeedActived_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SetFeedActived_pargs {
 public:


  virtual ~AtsOperation_SetFeedActived_pargs() throw();
  const std::string* feedsourcename;
  const bool* activated;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetFeedActived_result__isset {
  _AtsOperation_SetFeedActived_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetFeedActived_result__isset;

class AtsOperation_SetFeedActived_result {
 public:

  AtsOperation_SetFeedActived_result(const AtsOperation_SetFeedActived_result&);
  AtsOperation_SetFeedActived_result& operator=(const AtsOperation_SetFeedActived_result&);
  AtsOperation_SetFeedActived_result() : success(0) {
  }

  virtual ~AtsOperation_SetFeedActived_result() throw();
  bool success;

  _AtsOperation_SetFeedActived_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AtsOperation_SetFeedActived_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetFeedActived_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetFeedActived_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetFeedActived_presult__isset {
  _AtsOperation_SetFeedActived_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetFeedActived_presult__isset;

class AtsOperation_SetFeedActived_presult {
 public:


  virtual ~AtsOperation_SetFeedActived_presult() throw();
  bool* success;

  _AtsOperation_SetFeedActived_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_SetConnectionTradingAllowed_args__isset {
  _AtsOperation_SetConnectionTradingAllowed_args__isset() : connectionname(false), allowed(false) {}
  bool connectionname :1;
  bool allowed :1;
} _AtsOperation_SetConnectionTradingAllowed_args__isset;

class AtsOperation_SetConnectionTradingAllowed_args {
 public:

  AtsOperation_SetConnectionTradingAllowed_args(const AtsOperation_SetConnectionTradingAllowed_args&);
  AtsOperation_SetConnectionTradingAllowed_args& operator=(const AtsOperation_SetConnectionTradingAllowed_args&);
  AtsOperation_SetConnectionTradingAllowed_args() : connectionname(), allowed(0) {
  }

  virtual ~AtsOperation_SetConnectionTradingAllowed_args() throw();
  std::string connectionname;
  bool allowed;

  _AtsOperation_SetConnectionTradingAllowed_args__isset __isset;

  void __set_connectionname(const std::string& val);

  void __set_allowed(const bool val);

  bool operator == (const AtsOperation_SetConnectionTradingAllowed_args & rhs) const
  {
    if (!(connectionname == rhs.connectionname))
      return false;
    if (!(allowed == rhs.allowed))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetConnectionTradingAllowed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetConnectionTradingAllowed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SetConnectionTradingAllowed_pargs {
 public:


  virtual ~AtsOperation_SetConnectionTradingAllowed_pargs() throw();
  const std::string* connectionname;
  const bool* allowed;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetConnectionTradingAllowed_result__isset {
  _AtsOperation_SetConnectionTradingAllowed_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetConnectionTradingAllowed_result__isset;

class AtsOperation_SetConnectionTradingAllowed_result {
 public:

  AtsOperation_SetConnectionTradingAllowed_result(const AtsOperation_SetConnectionTradingAllowed_result&);
  AtsOperation_SetConnectionTradingAllowed_result& operator=(const AtsOperation_SetConnectionTradingAllowed_result&);
  AtsOperation_SetConnectionTradingAllowed_result() : success(0) {
  }

  virtual ~AtsOperation_SetConnectionTradingAllowed_result() throw();
  bool success;

  _AtsOperation_SetConnectionTradingAllowed_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AtsOperation_SetConnectionTradingAllowed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetConnectionTradingAllowed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetConnectionTradingAllowed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetConnectionTradingAllowed_presult__isset {
  _AtsOperation_SetConnectionTradingAllowed_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetConnectionTradingAllowed_presult__isset;

class AtsOperation_SetConnectionTradingAllowed_presult {
 public:


  virtual ~AtsOperation_SetConnectionTradingAllowed_presult() throw();
  bool* success;

  _AtsOperation_SetConnectionTradingAllowed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_ConnectionConnect_args__isset {
  _AtsOperation_ConnectionConnect_args__isset() : connectionname(false), toConnect(false) {}
  bool connectionname :1;
  bool toConnect :1;
} _AtsOperation_ConnectionConnect_args__isset;

class AtsOperation_ConnectionConnect_args {
 public:

  AtsOperation_ConnectionConnect_args(const AtsOperation_ConnectionConnect_args&);
  AtsOperation_ConnectionConnect_args& operator=(const AtsOperation_ConnectionConnect_args&);
  AtsOperation_ConnectionConnect_args() : connectionname(), toConnect(0) {
  }

  virtual ~AtsOperation_ConnectionConnect_args() throw();
  std::string connectionname;
  bool toConnect;

  _AtsOperation_ConnectionConnect_args__isset __isset;

  void __set_connectionname(const std::string& val);

  void __set_toConnect(const bool val);

  bool operator == (const AtsOperation_ConnectionConnect_args & rhs) const
  {
    if (!(connectionname == rhs.connectionname))
      return false;
    if (!(toConnect == rhs.toConnect))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_ConnectionConnect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_ConnectionConnect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_ConnectionConnect_pargs {
 public:


  virtual ~AtsOperation_ConnectionConnect_pargs() throw();
  const std::string* connectionname;
  const bool* toConnect;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_ConnectionConnect_result {
 public:

  AtsOperation_ConnectionConnect_result(const AtsOperation_ConnectionConnect_result&);
  AtsOperation_ConnectionConnect_result& operator=(const AtsOperation_ConnectionConnect_result&);
  AtsOperation_ConnectionConnect_result() {
  }

  virtual ~AtsOperation_ConnectionConnect_result() throw();

  bool operator == (const AtsOperation_ConnectionConnect_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_ConnectionConnect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_ConnectionConnect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_ConnectionConnect_presult {
 public:


  virtual ~AtsOperation_ConnectionConnect_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_CancelOrder_args__isset {
  _AtsOperation_CancelOrder_args__isset() : id(false) {}
  bool id :1;
} _AtsOperation_CancelOrder_args__isset;

class AtsOperation_CancelOrder_args {
 public:

  AtsOperation_CancelOrder_args(const AtsOperation_CancelOrder_args&);
  AtsOperation_CancelOrder_args& operator=(const AtsOperation_CancelOrder_args&);
  AtsOperation_CancelOrder_args() : id(0) {
  }

  virtual ~AtsOperation_CancelOrder_args() throw();
  int32_t id;

  _AtsOperation_CancelOrder_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const AtsOperation_CancelOrder_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_CancelOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CancelOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_CancelOrder_pargs {
 public:


  virtual ~AtsOperation_CancelOrder_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_CancelOrder_result__isset {
  _AtsOperation_CancelOrder_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_CancelOrder_result__isset;

class AtsOperation_CancelOrder_result {
 public:

  AtsOperation_CancelOrder_result(const AtsOperation_CancelOrder_result&);
  AtsOperation_CancelOrder_result& operator=(const AtsOperation_CancelOrder_result&);
  AtsOperation_CancelOrder_result() : success(0) {
  }

  virtual ~AtsOperation_CancelOrder_result() throw();
  bool success;

  _AtsOperation_CancelOrder_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AtsOperation_CancelOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_CancelOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CancelOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_CancelOrder_presult__isset {
  _AtsOperation_CancelOrder_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_CancelOrder_presult__isset;

class AtsOperation_CancelOrder_presult {
 public:


  virtual ~AtsOperation_CancelOrder_presult() throw();
  bool* success;

  _AtsOperation_CancelOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AtsOperation_CancelAllOrder_args {
 public:

  AtsOperation_CancelAllOrder_args(const AtsOperation_CancelAllOrder_args&);
  AtsOperation_CancelAllOrder_args& operator=(const AtsOperation_CancelAllOrder_args&);
  AtsOperation_CancelAllOrder_args() {
  }

  virtual ~AtsOperation_CancelAllOrder_args() throw();

  bool operator == (const AtsOperation_CancelAllOrder_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_CancelAllOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CancelAllOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_CancelAllOrder_pargs {
 public:


  virtual ~AtsOperation_CancelAllOrder_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_CancelAllOrder_result {
 public:

  AtsOperation_CancelAllOrder_result(const AtsOperation_CancelAllOrder_result&);
  AtsOperation_CancelAllOrder_result& operator=(const AtsOperation_CancelAllOrder_result&);
  AtsOperation_CancelAllOrder_result() {
  }

  virtual ~AtsOperation_CancelAllOrder_result() throw();

  bool operator == (const AtsOperation_CancelAllOrder_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_CancelAllOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CancelAllOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_CancelAllOrder_presult {
 public:


  virtual ~AtsOperation_CancelAllOrder_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_SetYesterdayPositionLocal_args__isset {
  _AtsOperation_SetYesterdayPositionLocal_args__isset() : position(false), yesterdayPositionLocal(false) {}
  bool position :1;
  bool yesterdayPositionLocal :1;
} _AtsOperation_SetYesterdayPositionLocal_args__isset;

class AtsOperation_SetYesterdayPositionLocal_args {
 public:

  AtsOperation_SetYesterdayPositionLocal_args(const AtsOperation_SetYesterdayPositionLocal_args&);
  AtsOperation_SetYesterdayPositionLocal_args& operator=(const AtsOperation_SetYesterdayPositionLocal_args&);
  AtsOperation_SetYesterdayPositionLocal_args() : yesterdayPositionLocal(0) {
  }

  virtual ~AtsOperation_SetYesterdayPositionLocal_args() throw();
  PositionMsg position;
  int32_t yesterdayPositionLocal;

  _AtsOperation_SetYesterdayPositionLocal_args__isset __isset;

  void __set_position(const PositionMsg& val);

  void __set_yesterdayPositionLocal(const int32_t val);

  bool operator == (const AtsOperation_SetYesterdayPositionLocal_args & rhs) const
  {
    if (!(position == rhs.position))
      return false;
    if (!(yesterdayPositionLocal == rhs.yesterdayPositionLocal))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetYesterdayPositionLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetYesterdayPositionLocal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SetYesterdayPositionLocal_pargs {
 public:


  virtual ~AtsOperation_SetYesterdayPositionLocal_pargs() throw();
  const PositionMsg* position;
  const int32_t* yesterdayPositionLocal;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetYesterdayPositionLocal_result__isset {
  _AtsOperation_SetYesterdayPositionLocal_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetYesterdayPositionLocal_result__isset;

class AtsOperation_SetYesterdayPositionLocal_result {
 public:

  AtsOperation_SetYesterdayPositionLocal_result(const AtsOperation_SetYesterdayPositionLocal_result&);
  AtsOperation_SetYesterdayPositionLocal_result& operator=(const AtsOperation_SetYesterdayPositionLocal_result&);
  AtsOperation_SetYesterdayPositionLocal_result() : success(0) {
  }

  virtual ~AtsOperation_SetYesterdayPositionLocal_result() throw();
  int32_t success;

  _AtsOperation_SetYesterdayPositionLocal_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const AtsOperation_SetYesterdayPositionLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetYesterdayPositionLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetYesterdayPositionLocal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetYesterdayPositionLocal_presult__isset {
  _AtsOperation_SetYesterdayPositionLocal_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetYesterdayPositionLocal_presult__isset;

class AtsOperation_SetYesterdayPositionLocal_presult {
 public:


  virtual ~AtsOperation_SetYesterdayPositionLocal_presult() throw();
  int32_t* success;

  _AtsOperation_SetYesterdayPositionLocal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_SetYesterdayPriceLocalLocal_args__isset {
  _AtsOperation_SetYesterdayPriceLocalLocal_args__isset() : position(false), yesterdayPriceLocal(false) {}
  bool position :1;
  bool yesterdayPriceLocal :1;
} _AtsOperation_SetYesterdayPriceLocalLocal_args__isset;

class AtsOperation_SetYesterdayPriceLocalLocal_args {
 public:

  AtsOperation_SetYesterdayPriceLocalLocal_args(const AtsOperation_SetYesterdayPriceLocalLocal_args&);
  AtsOperation_SetYesterdayPriceLocalLocal_args& operator=(const AtsOperation_SetYesterdayPriceLocalLocal_args&);
  AtsOperation_SetYesterdayPriceLocalLocal_args() : yesterdayPriceLocal(0) {
  }

  virtual ~AtsOperation_SetYesterdayPriceLocalLocal_args() throw();
  PositionMsg position;
  double yesterdayPriceLocal;

  _AtsOperation_SetYesterdayPriceLocalLocal_args__isset __isset;

  void __set_position(const PositionMsg& val);

  void __set_yesterdayPriceLocal(const double val);

  bool operator == (const AtsOperation_SetYesterdayPriceLocalLocal_args & rhs) const
  {
    if (!(position == rhs.position))
      return false;
    if (!(yesterdayPriceLocal == rhs.yesterdayPriceLocal))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetYesterdayPriceLocalLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetYesterdayPriceLocalLocal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SetYesterdayPriceLocalLocal_pargs {
 public:


  virtual ~AtsOperation_SetYesterdayPriceLocalLocal_pargs() throw();
  const PositionMsg* position;
  const double* yesterdayPriceLocal;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetYesterdayPriceLocalLocal_result__isset {
  _AtsOperation_SetYesterdayPriceLocalLocal_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetYesterdayPriceLocalLocal_result__isset;

class AtsOperation_SetYesterdayPriceLocalLocal_result {
 public:

  AtsOperation_SetYesterdayPriceLocalLocal_result(const AtsOperation_SetYesterdayPriceLocalLocal_result&);
  AtsOperation_SetYesterdayPriceLocalLocal_result& operator=(const AtsOperation_SetYesterdayPriceLocalLocal_result&);
  AtsOperation_SetYesterdayPriceLocalLocal_result() : success(0) {
  }

  virtual ~AtsOperation_SetYesterdayPriceLocalLocal_result() throw();
  double success;

  _AtsOperation_SetYesterdayPriceLocalLocal_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const AtsOperation_SetYesterdayPriceLocalLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetYesterdayPriceLocalLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetYesterdayPriceLocalLocal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetYesterdayPriceLocalLocal_presult__isset {
  _AtsOperation_SetYesterdayPriceLocalLocal_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetYesterdayPriceLocalLocal_presult__isset;

class AtsOperation_SetYesterdayPriceLocalLocal_presult {
 public:


  virtual ~AtsOperation_SetYesterdayPriceLocalLocal_presult() throw();
  double* success;

  _AtsOperation_SetYesterdayPriceLocalLocal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_SetYesterdayPositionManual_args__isset {
  _AtsOperation_SetYesterdayPositionManual_args__isset() : position(false), yesterdayPositionManual(false) {}
  bool position :1;
  bool yesterdayPositionManual :1;
} _AtsOperation_SetYesterdayPositionManual_args__isset;

class AtsOperation_SetYesterdayPositionManual_args {
 public:

  AtsOperation_SetYesterdayPositionManual_args(const AtsOperation_SetYesterdayPositionManual_args&);
  AtsOperation_SetYesterdayPositionManual_args& operator=(const AtsOperation_SetYesterdayPositionManual_args&);
  AtsOperation_SetYesterdayPositionManual_args() : yesterdayPositionManual(0) {
  }

  virtual ~AtsOperation_SetYesterdayPositionManual_args() throw();
  PositionMsg position;
  int32_t yesterdayPositionManual;

  _AtsOperation_SetYesterdayPositionManual_args__isset __isset;

  void __set_position(const PositionMsg& val);

  void __set_yesterdayPositionManual(const int32_t val);

  bool operator == (const AtsOperation_SetYesterdayPositionManual_args & rhs) const
  {
    if (!(position == rhs.position))
      return false;
    if (!(yesterdayPositionManual == rhs.yesterdayPositionManual))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetYesterdayPositionManual_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetYesterdayPositionManual_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SetYesterdayPositionManual_pargs {
 public:


  virtual ~AtsOperation_SetYesterdayPositionManual_pargs() throw();
  const PositionMsg* position;
  const int32_t* yesterdayPositionManual;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetYesterdayPositionManual_result__isset {
  _AtsOperation_SetYesterdayPositionManual_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetYesterdayPositionManual_result__isset;

class AtsOperation_SetYesterdayPositionManual_result {
 public:

  AtsOperation_SetYesterdayPositionManual_result(const AtsOperation_SetYesterdayPositionManual_result&);
  AtsOperation_SetYesterdayPositionManual_result& operator=(const AtsOperation_SetYesterdayPositionManual_result&);
  AtsOperation_SetYesterdayPositionManual_result() : success(0) {
  }

  virtual ~AtsOperation_SetYesterdayPositionManual_result() throw();
  int32_t success;

  _AtsOperation_SetYesterdayPositionManual_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const AtsOperation_SetYesterdayPositionManual_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetYesterdayPositionManual_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetYesterdayPositionManual_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetYesterdayPositionManual_presult__isset {
  _AtsOperation_SetYesterdayPositionManual_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetYesterdayPositionManual_presult__isset;

class AtsOperation_SetYesterdayPositionManual_presult {
 public:


  virtual ~AtsOperation_SetYesterdayPositionManual_presult() throw();
  int32_t* success;

  _AtsOperation_SetYesterdayPositionManual_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_SetYesterdayPositionExternal_args__isset {
  _AtsOperation_SetYesterdayPositionExternal_args__isset() : position(false), yesterdayPositionExternal(false) {}
  bool position :1;
  bool yesterdayPositionExternal :1;
} _AtsOperation_SetYesterdayPositionExternal_args__isset;

class AtsOperation_SetYesterdayPositionExternal_args {
 public:

  AtsOperation_SetYesterdayPositionExternal_args(const AtsOperation_SetYesterdayPositionExternal_args&);
  AtsOperation_SetYesterdayPositionExternal_args& operator=(const AtsOperation_SetYesterdayPositionExternal_args&);
  AtsOperation_SetYesterdayPositionExternal_args() : yesterdayPositionExternal(0) {
  }

  virtual ~AtsOperation_SetYesterdayPositionExternal_args() throw();
  PositionMsg position;
  int32_t yesterdayPositionExternal;

  _AtsOperation_SetYesterdayPositionExternal_args__isset __isset;

  void __set_position(const PositionMsg& val);

  void __set_yesterdayPositionExternal(const int32_t val);

  bool operator == (const AtsOperation_SetYesterdayPositionExternal_args & rhs) const
  {
    if (!(position == rhs.position))
      return false;
    if (!(yesterdayPositionExternal == rhs.yesterdayPositionExternal))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetYesterdayPositionExternal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetYesterdayPositionExternal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SetYesterdayPositionExternal_pargs {
 public:


  virtual ~AtsOperation_SetYesterdayPositionExternal_pargs() throw();
  const PositionMsg* position;
  const int32_t* yesterdayPositionExternal;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetYesterdayPositionExternal_result__isset {
  _AtsOperation_SetYesterdayPositionExternal_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetYesterdayPositionExternal_result__isset;

class AtsOperation_SetYesterdayPositionExternal_result {
 public:

  AtsOperation_SetYesterdayPositionExternal_result(const AtsOperation_SetYesterdayPositionExternal_result&);
  AtsOperation_SetYesterdayPositionExternal_result& operator=(const AtsOperation_SetYesterdayPositionExternal_result&);
  AtsOperation_SetYesterdayPositionExternal_result() : success(0) {
  }

  virtual ~AtsOperation_SetYesterdayPositionExternal_result() throw();
  int32_t success;

  _AtsOperation_SetYesterdayPositionExternal_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const AtsOperation_SetYesterdayPositionExternal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetYesterdayPositionExternal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetYesterdayPositionExternal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetYesterdayPositionExternal_presult__isset {
  _AtsOperation_SetYesterdayPositionExternal_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetYesterdayPositionExternal_presult__isset;

class AtsOperation_SetYesterdayPositionExternal_presult {
 public:


  virtual ~AtsOperation_SetYesterdayPositionExternal_presult() throw();
  int32_t* success;

  _AtsOperation_SetYesterdayPositionExternal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_SetUseManualPosition_args__isset {
  _AtsOperation_SetUseManualPosition_args__isset() : position(false), useManualPosition(false) {}
  bool position :1;
  bool useManualPosition :1;
} _AtsOperation_SetUseManualPosition_args__isset;

class AtsOperation_SetUseManualPosition_args {
 public:

  AtsOperation_SetUseManualPosition_args(const AtsOperation_SetUseManualPosition_args&);
  AtsOperation_SetUseManualPosition_args& operator=(const AtsOperation_SetUseManualPosition_args&);
  AtsOperation_SetUseManualPosition_args() : useManualPosition(0) {
  }

  virtual ~AtsOperation_SetUseManualPosition_args() throw();
  PositionMsg position;
  bool useManualPosition;

  _AtsOperation_SetUseManualPosition_args__isset __isset;

  void __set_position(const PositionMsg& val);

  void __set_useManualPosition(const bool val);

  bool operator == (const AtsOperation_SetUseManualPosition_args & rhs) const
  {
    if (!(position == rhs.position))
      return false;
    if (!(useManualPosition == rhs.useManualPosition))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetUseManualPosition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetUseManualPosition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SetUseManualPosition_pargs {
 public:


  virtual ~AtsOperation_SetUseManualPosition_pargs() throw();
  const PositionMsg* position;
  const bool* useManualPosition;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetUseManualPosition_result__isset {
  _AtsOperation_SetUseManualPosition_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetUseManualPosition_result__isset;

class AtsOperation_SetUseManualPosition_result {
 public:

  AtsOperation_SetUseManualPosition_result(const AtsOperation_SetUseManualPosition_result&);
  AtsOperation_SetUseManualPosition_result& operator=(const AtsOperation_SetUseManualPosition_result&);
  AtsOperation_SetUseManualPosition_result() : success(0) {
  }

  virtual ~AtsOperation_SetUseManualPosition_result() throw();
  bool success;

  _AtsOperation_SetUseManualPosition_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AtsOperation_SetUseManualPosition_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetUseManualPosition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetUseManualPosition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetUseManualPosition_presult__isset {
  _AtsOperation_SetUseManualPosition_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetUseManualPosition_presult__isset;

class AtsOperation_SetUseManualPosition_presult {
 public:


  virtual ~AtsOperation_SetUseManualPosition_presult() throw();
  bool* success;

  _AtsOperation_SetUseManualPosition_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_SetYstPositionType_args__isset {
  _AtsOperation_SetYstPositionType_args__isset() : position(false), ystPositionType(false) {}
  bool position :1;
  bool ystPositionType :1;
} _AtsOperation_SetYstPositionType_args__isset;

class AtsOperation_SetYstPositionType_args {
 public:

  AtsOperation_SetYstPositionType_args(const AtsOperation_SetYstPositionType_args&);
  AtsOperation_SetYstPositionType_args& operator=(const AtsOperation_SetYstPositionType_args&);
  AtsOperation_SetYstPositionType_args() : ystPositionType(( ::AtsType::YesterdayPositionType::type)0) {
  }

  virtual ~AtsOperation_SetYstPositionType_args() throw();
  PositionMsg position;
   ::AtsType::YesterdayPositionType::type ystPositionType;

  _AtsOperation_SetYstPositionType_args__isset __isset;

  void __set_position(const PositionMsg& val);

  void __set_ystPositionType(const  ::AtsType::YesterdayPositionType::type val);

  bool operator == (const AtsOperation_SetYstPositionType_args & rhs) const
  {
    if (!(position == rhs.position))
      return false;
    if (!(ystPositionType == rhs.ystPositionType))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetYstPositionType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetYstPositionType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SetYstPositionType_pargs {
 public:


  virtual ~AtsOperation_SetYstPositionType_pargs() throw();
  const PositionMsg* position;
  const  ::AtsType::YesterdayPositionType::type* ystPositionType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetYstPositionType_result__isset {
  _AtsOperation_SetYstPositionType_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetYstPositionType_result__isset;

class AtsOperation_SetYstPositionType_result {
 public:

  AtsOperation_SetYstPositionType_result(const AtsOperation_SetYstPositionType_result&);
  AtsOperation_SetYstPositionType_result& operator=(const AtsOperation_SetYstPositionType_result&);
  AtsOperation_SetYstPositionType_result() : success(( ::AtsType::YesterdayPositionType::type)0) {
  }

  virtual ~AtsOperation_SetYstPositionType_result() throw();
   ::AtsType::YesterdayPositionType::type success;

  _AtsOperation_SetYstPositionType_result__isset __isset;

  void __set_success(const  ::AtsType::YesterdayPositionType::type val);

  bool operator == (const AtsOperation_SetYstPositionType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetYstPositionType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetYstPositionType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetYstPositionType_presult__isset {
  _AtsOperation_SetYstPositionType_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetYstPositionType_presult__isset;

class AtsOperation_SetYstPositionType_presult {
 public:


  virtual ~AtsOperation_SetYstPositionType_presult() throw();
   ::AtsType::YesterdayPositionType::type* success;

  _AtsOperation_SetYstPositionType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_SetAtsYstPositionType_args__isset {
  _AtsOperation_SetAtsYstPositionType_args__isset() : ats(false), ystPositionType(false) {}
  bool ats :1;
  bool ystPositionType :1;
} _AtsOperation_SetAtsYstPositionType_args__isset;

class AtsOperation_SetAtsYstPositionType_args {
 public:

  AtsOperation_SetAtsYstPositionType_args(const AtsOperation_SetAtsYstPositionType_args&);
  AtsOperation_SetAtsYstPositionType_args& operator=(const AtsOperation_SetAtsYstPositionType_args&);
  AtsOperation_SetAtsYstPositionType_args() : ystPositionType(( ::AtsType::YesterdayPositionType::type)0) {
  }

  virtual ~AtsOperation_SetAtsYstPositionType_args() throw();
  AtsMsg ats;
   ::AtsType::YesterdayPositionType::type ystPositionType;

  _AtsOperation_SetAtsYstPositionType_args__isset __isset;

  void __set_ats(const AtsMsg& val);

  void __set_ystPositionType(const  ::AtsType::YesterdayPositionType::type val);

  bool operator == (const AtsOperation_SetAtsYstPositionType_args & rhs) const
  {
    if (!(ats == rhs.ats))
      return false;
    if (!(ystPositionType == rhs.ystPositionType))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetAtsYstPositionType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetAtsYstPositionType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SetAtsYstPositionType_pargs {
 public:


  virtual ~AtsOperation_SetAtsYstPositionType_pargs() throw();
  const AtsMsg* ats;
  const  ::AtsType::YesterdayPositionType::type* ystPositionType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetAtsYstPositionType_result__isset {
  _AtsOperation_SetAtsYstPositionType_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetAtsYstPositionType_result__isset;

class AtsOperation_SetAtsYstPositionType_result {
 public:

  AtsOperation_SetAtsYstPositionType_result(const AtsOperation_SetAtsYstPositionType_result&);
  AtsOperation_SetAtsYstPositionType_result& operator=(const AtsOperation_SetAtsYstPositionType_result&);
  AtsOperation_SetAtsYstPositionType_result() : success(( ::AtsType::YesterdayPositionType::type)0) {
  }

  virtual ~AtsOperation_SetAtsYstPositionType_result() throw();
   ::AtsType::YesterdayPositionType::type success;

  _AtsOperation_SetAtsYstPositionType_result__isset __isset;

  void __set_success(const  ::AtsType::YesterdayPositionType::type val);

  bool operator == (const AtsOperation_SetAtsYstPositionType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetAtsYstPositionType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetAtsYstPositionType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_SetAtsYstPositionType_presult__isset {
  _AtsOperation_SetAtsYstPositionType_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_SetAtsYstPositionType_presult__isset;

class AtsOperation_SetAtsYstPositionType_presult {
 public:


  virtual ~AtsOperation_SetAtsYstPositionType_presult() throw();
   ::AtsType::YesterdayPositionType::type* success;

  _AtsOperation_SetAtsYstPositionType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_CreateManualOrder_args__isset {
  _AtsOperation_CreateManualOrder_args__isset() : price(false), way(false), quantity(false), atsName(false), atsInstrumentCode(false), tradingtype(false), orderrestriction(false), openclose(false), priceMode(false) {}
  bool price :1;
  bool way :1;
  bool quantity :1;
  bool atsName :1;
  bool atsInstrumentCode :1;
  bool tradingtype :1;
  bool orderrestriction :1;
  bool openclose :1;
  bool priceMode :1;
} _AtsOperation_CreateManualOrder_args__isset;

class AtsOperation_CreateManualOrder_args {
 public:

  AtsOperation_CreateManualOrder_args(const AtsOperation_CreateManualOrder_args&);
  AtsOperation_CreateManualOrder_args& operator=(const AtsOperation_CreateManualOrder_args&);
  AtsOperation_CreateManualOrder_args() : price(0), way(( ::AtsType::OrderWay::type)0), quantity(0), atsName(), atsInstrumentCode(), tradingtype(0), orderrestriction(( ::AtsType::OrderRestriction::type)0), openclose(( ::AtsType::OrderOpenClose::type)0), priceMode(( ::AtsType::OrderPriceMode::type)0) {
  }

  virtual ~AtsOperation_CreateManualOrder_args() throw();
  double price;
   ::AtsType::OrderWay::type way;
  int32_t quantity;
  std::string atsName;
  std::string atsInstrumentCode;
  int32_t tradingtype;
   ::AtsType::OrderRestriction::type orderrestriction;
   ::AtsType::OrderOpenClose::type openclose;
   ::AtsType::OrderPriceMode::type priceMode;

  _AtsOperation_CreateManualOrder_args__isset __isset;

  void __set_price(const double val);

  void __set_way(const  ::AtsType::OrderWay::type val);

  void __set_quantity(const int32_t val);

  void __set_atsName(const std::string& val);

  void __set_atsInstrumentCode(const std::string& val);

  void __set_tradingtype(const int32_t val);

  void __set_orderrestriction(const  ::AtsType::OrderRestriction::type val);

  void __set_openclose(const  ::AtsType::OrderOpenClose::type val);

  void __set_priceMode(const  ::AtsType::OrderPriceMode::type val);

  bool operator == (const AtsOperation_CreateManualOrder_args & rhs) const
  {
    if (!(price == rhs.price))
      return false;
    if (!(way == rhs.way))
      return false;
    if (!(quantity == rhs.quantity))
      return false;
    if (!(atsName == rhs.atsName))
      return false;
    if (!(atsInstrumentCode == rhs.atsInstrumentCode))
      return false;
    if (!(tradingtype == rhs.tradingtype))
      return false;
    if (!(orderrestriction == rhs.orderrestriction))
      return false;
    if (!(openclose == rhs.openclose))
      return false;
    if (!(priceMode == rhs.priceMode))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_CreateManualOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CreateManualOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_CreateManualOrder_pargs {
 public:


  virtual ~AtsOperation_CreateManualOrder_pargs() throw();
  const double* price;
  const  ::AtsType::OrderWay::type* way;
  const int32_t* quantity;
  const std::string* atsName;
  const std::string* atsInstrumentCode;
  const int32_t* tradingtype;
  const  ::AtsType::OrderRestriction::type* orderrestriction;
  const  ::AtsType::OrderOpenClose::type* openclose;
  const  ::AtsType::OrderPriceMode::type* priceMode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_CreateManualOrder_result__isset {
  _AtsOperation_CreateManualOrder_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_CreateManualOrder_result__isset;

class AtsOperation_CreateManualOrder_result {
 public:

  AtsOperation_CreateManualOrder_result(const AtsOperation_CreateManualOrder_result&);
  AtsOperation_CreateManualOrder_result& operator=(const AtsOperation_CreateManualOrder_result&);
  AtsOperation_CreateManualOrder_result() : success(0) {
  }

  virtual ~AtsOperation_CreateManualOrder_result() throw();
  bool success;

  _AtsOperation_CreateManualOrder_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AtsOperation_CreateManualOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_CreateManualOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CreateManualOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_CreateManualOrder_presult__isset {
  _AtsOperation_CreateManualOrder_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_CreateManualOrder_presult__isset;

class AtsOperation_CreateManualOrder_presult {
 public:


  virtual ~AtsOperation_CreateManualOrder_presult() throw();
  bool* success;

  _AtsOperation_CreateManualOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_GetFeesStruct_args__isset {
  _AtsOperation_GetFeesStruct_args__isset() : className(false) {}
  bool className :1;
} _AtsOperation_GetFeesStruct_args__isset;

class AtsOperation_GetFeesStruct_args {
 public:

  AtsOperation_GetFeesStruct_args(const AtsOperation_GetFeesStruct_args&);
  AtsOperation_GetFeesStruct_args& operator=(const AtsOperation_GetFeesStruct_args&);
  AtsOperation_GetFeesStruct_args() : className() {
  }

  virtual ~AtsOperation_GetFeesStruct_args() throw();
  std::string className;

  _AtsOperation_GetFeesStruct_args__isset __isset;

  void __set_className(const std::string& val);

  bool operator == (const AtsOperation_GetFeesStruct_args & rhs) const
  {
    if (!(className == rhs.className))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_GetFeesStruct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_GetFeesStruct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_GetFeesStruct_pargs {
 public:


  virtual ~AtsOperation_GetFeesStruct_pargs() throw();
  const std::string* className;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_GetFeesStruct_result__isset {
  _AtsOperation_GetFeesStruct_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_GetFeesStruct_result__isset;

class AtsOperation_GetFeesStruct_result {
 public:

  AtsOperation_GetFeesStruct_result(const AtsOperation_GetFeesStruct_result&);
  AtsOperation_GetFeesStruct_result& operator=(const AtsOperation_GetFeesStruct_result&);
  AtsOperation_GetFeesStruct_result() {
  }

  virtual ~AtsOperation_GetFeesStruct_result() throw();
  FeesStructMsg success;

  _AtsOperation_GetFeesStruct_result__isset __isset;

  void __set_success(const FeesStructMsg& val);

  bool operator == (const AtsOperation_GetFeesStruct_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_GetFeesStruct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_GetFeesStruct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_GetFeesStruct_presult__isset {
  _AtsOperation_GetFeesStruct_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_GetFeesStruct_presult__isset;

class AtsOperation_GetFeesStruct_presult {
 public:


  virtual ~AtsOperation_GetFeesStruct_presult() throw();
  FeesStructMsg* success;

  _AtsOperation_GetFeesStruct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_UpdateFeesStruct_args__isset {
  _AtsOperation_UpdateFeesStruct_args__isset() : feesStruct(false) {}
  bool feesStruct :1;
} _AtsOperation_UpdateFeesStruct_args__isset;

class AtsOperation_UpdateFeesStruct_args {
 public:

  AtsOperation_UpdateFeesStruct_args(const AtsOperation_UpdateFeesStruct_args&);
  AtsOperation_UpdateFeesStruct_args& operator=(const AtsOperation_UpdateFeesStruct_args&);
  AtsOperation_UpdateFeesStruct_args() {
  }

  virtual ~AtsOperation_UpdateFeesStruct_args() throw();
  FeesStructMsg feesStruct;

  _AtsOperation_UpdateFeesStruct_args__isset __isset;

  void __set_feesStruct(const FeesStructMsg& val);

  bool operator == (const AtsOperation_UpdateFeesStruct_args & rhs) const
  {
    if (!(feesStruct == rhs.feesStruct))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_UpdateFeesStruct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_UpdateFeesStruct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_UpdateFeesStruct_pargs {
 public:


  virtual ~AtsOperation_UpdateFeesStruct_pargs() throw();
  const FeesStructMsg* feesStruct;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_UpdateFeesStruct_result__isset {
  _AtsOperation_UpdateFeesStruct_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_UpdateFeesStruct_result__isset;

class AtsOperation_UpdateFeesStruct_result {
 public:

  AtsOperation_UpdateFeesStruct_result(const AtsOperation_UpdateFeesStruct_result&);
  AtsOperation_UpdateFeesStruct_result& operator=(const AtsOperation_UpdateFeesStruct_result&);
  AtsOperation_UpdateFeesStruct_result() {
  }

  virtual ~AtsOperation_UpdateFeesStruct_result() throw();
  FeesStructMsg success;

  _AtsOperation_UpdateFeesStruct_result__isset __isset;

  void __set_success(const FeesStructMsg& val);

  bool operator == (const AtsOperation_UpdateFeesStruct_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_UpdateFeesStruct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_UpdateFeesStruct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_UpdateFeesStruct_presult__isset {
  _AtsOperation_UpdateFeesStruct_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_UpdateFeesStruct_presult__isset;

class AtsOperation_UpdateFeesStruct_presult {
 public:


  virtual ~AtsOperation_UpdateFeesStruct_presult() throw();
  FeesStructMsg* success;

  _AtsOperation_UpdateFeesStruct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_TickUpPrice_args__isset {
  _AtsOperation_TickUpPrice_args__isset() : instrument(false), price(false), ticks(false) {}
  bool instrument :1;
  bool price :1;
  bool ticks :1;
} _AtsOperation_TickUpPrice_args__isset;

class AtsOperation_TickUpPrice_args {
 public:

  AtsOperation_TickUpPrice_args(const AtsOperation_TickUpPrice_args&);
  AtsOperation_TickUpPrice_args& operator=(const AtsOperation_TickUpPrice_args&);
  AtsOperation_TickUpPrice_args() : price(0), ticks(0) {
  }

  virtual ~AtsOperation_TickUpPrice_args() throw();
  AtsInstrumentMsg instrument;
  double price;
  int32_t ticks;

  _AtsOperation_TickUpPrice_args__isset __isset;

  void __set_instrument(const AtsInstrumentMsg& val);

  void __set_price(const double val);

  void __set_ticks(const int32_t val);

  bool operator == (const AtsOperation_TickUpPrice_args & rhs) const
  {
    if (!(instrument == rhs.instrument))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(ticks == rhs.ticks))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_TickUpPrice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_TickUpPrice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_TickUpPrice_pargs {
 public:


  virtual ~AtsOperation_TickUpPrice_pargs() throw();
  const AtsInstrumentMsg* instrument;
  const double* price;
  const int32_t* ticks;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_TickUpPrice_result__isset {
  _AtsOperation_TickUpPrice_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_TickUpPrice_result__isset;

class AtsOperation_TickUpPrice_result {
 public:

  AtsOperation_TickUpPrice_result(const AtsOperation_TickUpPrice_result&);
  AtsOperation_TickUpPrice_result& operator=(const AtsOperation_TickUpPrice_result&);
  AtsOperation_TickUpPrice_result() : success(0) {
  }

  virtual ~AtsOperation_TickUpPrice_result() throw();
  double success;

  _AtsOperation_TickUpPrice_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const AtsOperation_TickUpPrice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_TickUpPrice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_TickUpPrice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_TickUpPrice_presult__isset {
  _AtsOperation_TickUpPrice_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_TickUpPrice_presult__isset;

class AtsOperation_TickUpPrice_presult {
 public:


  virtual ~AtsOperation_TickUpPrice_presult() throw();
  double* success;

  _AtsOperation_TickUpPrice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_TickDownPrice_args__isset {
  _AtsOperation_TickDownPrice_args__isset() : instrument(false), price(false), ticks(false) {}
  bool instrument :1;
  bool price :1;
  bool ticks :1;
} _AtsOperation_TickDownPrice_args__isset;

class AtsOperation_TickDownPrice_args {
 public:

  AtsOperation_TickDownPrice_args(const AtsOperation_TickDownPrice_args&);
  AtsOperation_TickDownPrice_args& operator=(const AtsOperation_TickDownPrice_args&);
  AtsOperation_TickDownPrice_args() : price(0), ticks(0) {
  }

  virtual ~AtsOperation_TickDownPrice_args() throw();
  AtsInstrumentMsg instrument;
  double price;
  int32_t ticks;

  _AtsOperation_TickDownPrice_args__isset __isset;

  void __set_instrument(const AtsInstrumentMsg& val);

  void __set_price(const double val);

  void __set_ticks(const int32_t val);

  bool operator == (const AtsOperation_TickDownPrice_args & rhs) const
  {
    if (!(instrument == rhs.instrument))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(ticks == rhs.ticks))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_TickDownPrice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_TickDownPrice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_TickDownPrice_pargs {
 public:


  virtual ~AtsOperation_TickDownPrice_pargs() throw();
  const AtsInstrumentMsg* instrument;
  const double* price;
  const int32_t* ticks;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_TickDownPrice_result__isset {
  _AtsOperation_TickDownPrice_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_TickDownPrice_result__isset;

class AtsOperation_TickDownPrice_result {
 public:

  AtsOperation_TickDownPrice_result(const AtsOperation_TickDownPrice_result&);
  AtsOperation_TickDownPrice_result& operator=(const AtsOperation_TickDownPrice_result&);
  AtsOperation_TickDownPrice_result() : success(0) {
  }

  virtual ~AtsOperation_TickDownPrice_result() throw();
  double success;

  _AtsOperation_TickDownPrice_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const AtsOperation_TickDownPrice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_TickDownPrice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_TickDownPrice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_TickDownPrice_presult__isset {
  _AtsOperation_TickDownPrice_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_TickDownPrice_presult__isset;

class AtsOperation_TickDownPrice_presult {
 public:


  virtual ~AtsOperation_TickDownPrice_presult() throw();
  double* success;

  _AtsOperation_TickDownPrice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_KillAll_args__isset {
  _AtsOperation_KillAll_args__isset() : atsName(false), tradingtype(false) {}
  bool atsName :1;
  bool tradingtype :1;
} _AtsOperation_KillAll_args__isset;

class AtsOperation_KillAll_args {
 public:

  AtsOperation_KillAll_args(const AtsOperation_KillAll_args&);
  AtsOperation_KillAll_args& operator=(const AtsOperation_KillAll_args&);
  AtsOperation_KillAll_args() : atsName(), tradingtype(0) {
  }

  virtual ~AtsOperation_KillAll_args() throw();
  std::string atsName;
  int32_t tradingtype;

  _AtsOperation_KillAll_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_tradingtype(const int32_t val);

  bool operator == (const AtsOperation_KillAll_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(tradingtype == rhs.tradingtype))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_KillAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_KillAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_KillAll_pargs {
 public:


  virtual ~AtsOperation_KillAll_pargs() throw();
  const std::string* atsName;
  const int32_t* tradingtype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_KillAll_result {
 public:

  AtsOperation_KillAll_result(const AtsOperation_KillAll_result&);
  AtsOperation_KillAll_result& operator=(const AtsOperation_KillAll_result&);
  AtsOperation_KillAll_result() {
  }

  virtual ~AtsOperation_KillAll_result() throw();

  bool operator == (const AtsOperation_KillAll_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_KillAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_KillAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_KillAll_presult {
 public:


  virtual ~AtsOperation_KillAll_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_GetTradingPeriodManager_args__isset {
  _AtsOperation_GetTradingPeriodManager_args__isset() : atsName(false) {}
  bool atsName :1;
} _AtsOperation_GetTradingPeriodManager_args__isset;

class AtsOperation_GetTradingPeriodManager_args {
 public:

  AtsOperation_GetTradingPeriodManager_args(const AtsOperation_GetTradingPeriodManager_args&);
  AtsOperation_GetTradingPeriodManager_args& operator=(const AtsOperation_GetTradingPeriodManager_args&);
  AtsOperation_GetTradingPeriodManager_args() : atsName() {
  }

  virtual ~AtsOperation_GetTradingPeriodManager_args() throw();
  std::string atsName;

  _AtsOperation_GetTradingPeriodManager_args__isset __isset;

  void __set_atsName(const std::string& val);

  bool operator == (const AtsOperation_GetTradingPeriodManager_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_GetTradingPeriodManager_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_GetTradingPeriodManager_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_GetTradingPeriodManager_pargs {
 public:


  virtual ~AtsOperation_GetTradingPeriodManager_pargs() throw();
  const std::string* atsName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_GetTradingPeriodManager_result__isset {
  _AtsOperation_GetTradingPeriodManager_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_GetTradingPeriodManager_result__isset;

class AtsOperation_GetTradingPeriodManager_result {
 public:

  AtsOperation_GetTradingPeriodManager_result(const AtsOperation_GetTradingPeriodManager_result&);
  AtsOperation_GetTradingPeriodManager_result& operator=(const AtsOperation_GetTradingPeriodManager_result&);
  AtsOperation_GetTradingPeriodManager_result() {
  }

  virtual ~AtsOperation_GetTradingPeriodManager_result() throw();
  TradingPeriodManagerMsg success;

  _AtsOperation_GetTradingPeriodManager_result__isset __isset;

  void __set_success(const TradingPeriodManagerMsg& val);

  bool operator == (const AtsOperation_GetTradingPeriodManager_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_GetTradingPeriodManager_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_GetTradingPeriodManager_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_GetTradingPeriodManager_presult__isset {
  _AtsOperation_GetTradingPeriodManager_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_GetTradingPeriodManager_presult__isset;

class AtsOperation_GetTradingPeriodManager_presult {
 public:


  virtual ~AtsOperation_GetTradingPeriodManager_presult() throw();
  TradingPeriodManagerMsg* success;

  _AtsOperation_GetTradingPeriodManager_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_SetTradingPeriodManager_args__isset {
  _AtsOperation_SetTradingPeriodManager_args__isset() : atsName(false), tradingperiodManager(false) {}
  bool atsName :1;
  bool tradingperiodManager :1;
} _AtsOperation_SetTradingPeriodManager_args__isset;

class AtsOperation_SetTradingPeriodManager_args {
 public:

  AtsOperation_SetTradingPeriodManager_args(const AtsOperation_SetTradingPeriodManager_args&);
  AtsOperation_SetTradingPeriodManager_args& operator=(const AtsOperation_SetTradingPeriodManager_args&);
  AtsOperation_SetTradingPeriodManager_args() : atsName() {
  }

  virtual ~AtsOperation_SetTradingPeriodManager_args() throw();
  std::string atsName;
  TradingPeriodManagerMsg tradingperiodManager;

  _AtsOperation_SetTradingPeriodManager_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_tradingperiodManager(const TradingPeriodManagerMsg& val);

  bool operator == (const AtsOperation_SetTradingPeriodManager_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(tradingperiodManager == rhs.tradingperiodManager))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SetTradingPeriodManager_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetTradingPeriodManager_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SetTradingPeriodManager_pargs {
 public:


  virtual ~AtsOperation_SetTradingPeriodManager_pargs() throw();
  const std::string* atsName;
  const TradingPeriodManagerMsg* tradingperiodManager;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SetTradingPeriodManager_result {
 public:

  AtsOperation_SetTradingPeriodManager_result(const AtsOperation_SetTradingPeriodManager_result&);
  AtsOperation_SetTradingPeriodManager_result& operator=(const AtsOperation_SetTradingPeriodManager_result&);
  AtsOperation_SetTradingPeriodManager_result() {
  }

  virtual ~AtsOperation_SetTradingPeriodManager_result() throw();

  bool operator == (const AtsOperation_SetTradingPeriodManager_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_SetTradingPeriodManager_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SetTradingPeriodManager_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SetTradingPeriodManager_presult {
 public:


  virtual ~AtsOperation_SetTradingPeriodManager_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_SaveReferential_args__isset {
  _AtsOperation_SaveReferential_args__isset() : atsName(false), tradingPeriodManager(false), underlying(false), StockClass(false) {}
  bool atsName :1;
  bool tradingPeriodManager :1;
  bool underlying :1;
  bool StockClass :1;
} _AtsOperation_SaveReferential_args__isset;

class AtsOperation_SaveReferential_args {
 public:

  AtsOperation_SaveReferential_args(const AtsOperation_SaveReferential_args&);
  AtsOperation_SaveReferential_args& operator=(const AtsOperation_SaveReferential_args&);
  AtsOperation_SaveReferential_args() : atsName() {
  }

  virtual ~AtsOperation_SaveReferential_args() throw();
  std::string atsName;
  TradingPeriodManagerMsg tradingPeriodManager;
  UnderlyingMsg underlying;
  InstrumentClassMsg StockClass;

  _AtsOperation_SaveReferential_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_tradingPeriodManager(const TradingPeriodManagerMsg& val);

  void __set_underlying(const UnderlyingMsg& val);

  void __set_StockClass(const InstrumentClassMsg& val);

  bool operator == (const AtsOperation_SaveReferential_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(tradingPeriodManager == rhs.tradingPeriodManager))
      return false;
    if (!(underlying == rhs.underlying))
      return false;
    if (!(StockClass == rhs.StockClass))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SaveReferential_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SaveReferential_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SaveReferential_pargs {
 public:


  virtual ~AtsOperation_SaveReferential_pargs() throw();
  const std::string* atsName;
  const TradingPeriodManagerMsg* tradingPeriodManager;
  const UnderlyingMsg* underlying;
  const InstrumentClassMsg* StockClass;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SaveReferential_result {
 public:

  AtsOperation_SaveReferential_result(const AtsOperation_SaveReferential_result&);
  AtsOperation_SaveReferential_result& operator=(const AtsOperation_SaveReferential_result&);
  AtsOperation_SaveReferential_result() {
  }

  virtual ~AtsOperation_SaveReferential_result() throw();

  bool operator == (const AtsOperation_SaveReferential_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_SaveReferential_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SaveReferential_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SaveReferential_presult {
 public:


  virtual ~AtsOperation_SaveReferential_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AtsOperation_StartPublish_args {
 public:

  AtsOperation_StartPublish_args(const AtsOperation_StartPublish_args&);
  AtsOperation_StartPublish_args& operator=(const AtsOperation_StartPublish_args&);
  AtsOperation_StartPublish_args() {
  }

  virtual ~AtsOperation_StartPublish_args() throw();

  bool operator == (const AtsOperation_StartPublish_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_StartPublish_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_StartPublish_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_StartPublish_pargs {
 public:


  virtual ~AtsOperation_StartPublish_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_StartPublish_result {
 public:

  AtsOperation_StartPublish_result(const AtsOperation_StartPublish_result&);
  AtsOperation_StartPublish_result& operator=(const AtsOperation_StartPublish_result&);
  AtsOperation_StartPublish_result() {
  }

  virtual ~AtsOperation_StartPublish_result() throw();

  bool operator == (const AtsOperation_StartPublish_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_StartPublish_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_StartPublish_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_StartPublish_presult {
 public:


  virtual ~AtsOperation_StartPublish_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_ForceSubScribe_args__isset {
  _AtsOperation_ForceSubScribe_args__isset() : atsName(false), instrumentCode(false) {}
  bool atsName :1;
  bool instrumentCode :1;
} _AtsOperation_ForceSubScribe_args__isset;

class AtsOperation_ForceSubScribe_args {
 public:

  AtsOperation_ForceSubScribe_args(const AtsOperation_ForceSubScribe_args&);
  AtsOperation_ForceSubScribe_args& operator=(const AtsOperation_ForceSubScribe_args&);
  AtsOperation_ForceSubScribe_args() : atsName(), instrumentCode() {
  }

  virtual ~AtsOperation_ForceSubScribe_args() throw();
  std::string atsName;
  std::string instrumentCode;

  _AtsOperation_ForceSubScribe_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_instrumentCode(const std::string& val);

  bool operator == (const AtsOperation_ForceSubScribe_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(instrumentCode == rhs.instrumentCode))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_ForceSubScribe_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_ForceSubScribe_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_ForceSubScribe_pargs {
 public:


  virtual ~AtsOperation_ForceSubScribe_pargs() throw();
  const std::string* atsName;
  const std::string* instrumentCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_ForceSubScribe_result {
 public:

  AtsOperation_ForceSubScribe_result(const AtsOperation_ForceSubScribe_result&);
  AtsOperation_ForceSubScribe_result& operator=(const AtsOperation_ForceSubScribe_result&);
  AtsOperation_ForceSubScribe_result() {
  }

  virtual ~AtsOperation_ForceSubScribe_result() throw();

  bool operator == (const AtsOperation_ForceSubScribe_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_ForceSubScribe_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_ForceSubScribe_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_ForceSubScribe_presult {
 public:


  virtual ~AtsOperation_ForceSubScribe_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_StartAutomaton_args__isset {
  _AtsOperation_StartAutomaton_args__isset() : atsName(false) {}
  bool atsName :1;
} _AtsOperation_StartAutomaton_args__isset;

class AtsOperation_StartAutomaton_args {
 public:

  AtsOperation_StartAutomaton_args(const AtsOperation_StartAutomaton_args&);
  AtsOperation_StartAutomaton_args& operator=(const AtsOperation_StartAutomaton_args&);
  AtsOperation_StartAutomaton_args() : atsName() {
  }

  virtual ~AtsOperation_StartAutomaton_args() throw();
  std::string atsName;

  _AtsOperation_StartAutomaton_args__isset __isset;

  void __set_atsName(const std::string& val);

  bool operator == (const AtsOperation_StartAutomaton_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_StartAutomaton_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_StartAutomaton_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_StartAutomaton_pargs {
 public:


  virtual ~AtsOperation_StartAutomaton_pargs() throw();
  const std::string* atsName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_StartAutomaton_result {
 public:

  AtsOperation_StartAutomaton_result(const AtsOperation_StartAutomaton_result&);
  AtsOperation_StartAutomaton_result& operator=(const AtsOperation_StartAutomaton_result&);
  AtsOperation_StartAutomaton_result() {
  }

  virtual ~AtsOperation_StartAutomaton_result() throw();

  bool operator == (const AtsOperation_StartAutomaton_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_StartAutomaton_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_StartAutomaton_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_StartAutomaton_presult {
 public:


  virtual ~AtsOperation_StartAutomaton_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_StartAutomatonByList_args__isset {
  _AtsOperation_StartAutomatonByList_args__isset() : atsName(false) {}
  bool atsName :1;
} _AtsOperation_StartAutomatonByList_args__isset;

class AtsOperation_StartAutomatonByList_args {
 public:

  AtsOperation_StartAutomatonByList_args(const AtsOperation_StartAutomatonByList_args&);
  AtsOperation_StartAutomatonByList_args& operator=(const AtsOperation_StartAutomatonByList_args&);
  AtsOperation_StartAutomatonByList_args() {
  }

  virtual ~AtsOperation_StartAutomatonByList_args() throw();
  std::vector<std::string>  atsName;

  _AtsOperation_StartAutomatonByList_args__isset __isset;

  void __set_atsName(const std::vector<std::string> & val);

  bool operator == (const AtsOperation_StartAutomatonByList_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_StartAutomatonByList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_StartAutomatonByList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_StartAutomatonByList_pargs {
 public:


  virtual ~AtsOperation_StartAutomatonByList_pargs() throw();
  const std::vector<std::string> * atsName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_StartAutomatonByList_result {
 public:

  AtsOperation_StartAutomatonByList_result(const AtsOperation_StartAutomatonByList_result&);
  AtsOperation_StartAutomatonByList_result& operator=(const AtsOperation_StartAutomatonByList_result&);
  AtsOperation_StartAutomatonByList_result() {
  }

  virtual ~AtsOperation_StartAutomatonByList_result() throw();

  bool operator == (const AtsOperation_StartAutomatonByList_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_StartAutomatonByList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_StartAutomatonByList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_StartAutomatonByList_presult {
 public:


  virtual ~AtsOperation_StartAutomatonByList_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_StopAutomaton_args__isset {
  _AtsOperation_StopAutomaton_args__isset() : atsNamme(false) {}
  bool atsNamme :1;
} _AtsOperation_StopAutomaton_args__isset;

class AtsOperation_StopAutomaton_args {
 public:

  AtsOperation_StopAutomaton_args(const AtsOperation_StopAutomaton_args&);
  AtsOperation_StopAutomaton_args& operator=(const AtsOperation_StopAutomaton_args&);
  AtsOperation_StopAutomaton_args() : atsNamme() {
  }

  virtual ~AtsOperation_StopAutomaton_args() throw();
  std::string atsNamme;

  _AtsOperation_StopAutomaton_args__isset __isset;

  void __set_atsNamme(const std::string& val);

  bool operator == (const AtsOperation_StopAutomaton_args & rhs) const
  {
    if (!(atsNamme == rhs.atsNamme))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_StopAutomaton_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_StopAutomaton_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_StopAutomaton_pargs {
 public:


  virtual ~AtsOperation_StopAutomaton_pargs() throw();
  const std::string* atsNamme;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_StopAutomaton_result {
 public:

  AtsOperation_StopAutomaton_result(const AtsOperation_StopAutomaton_result&);
  AtsOperation_StopAutomaton_result& operator=(const AtsOperation_StopAutomaton_result&);
  AtsOperation_StopAutomaton_result() {
  }

  virtual ~AtsOperation_StopAutomaton_result() throw();

  bool operator == (const AtsOperation_StopAutomaton_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_StopAutomaton_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_StopAutomaton_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_StopAutomaton_presult {
 public:


  virtual ~AtsOperation_StopAutomaton_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_CaculateATS_args__isset {
  _AtsOperation_CaculateATS_args__isset() : atsName(false) {}
  bool atsName :1;
} _AtsOperation_CaculateATS_args__isset;

class AtsOperation_CaculateATS_args {
 public:

  AtsOperation_CaculateATS_args(const AtsOperation_CaculateATS_args&);
  AtsOperation_CaculateATS_args& operator=(const AtsOperation_CaculateATS_args&);
  AtsOperation_CaculateATS_args() : atsName() {
  }

  virtual ~AtsOperation_CaculateATS_args() throw();
  std::string atsName;

  _AtsOperation_CaculateATS_args__isset __isset;

  void __set_atsName(const std::string& val);

  bool operator == (const AtsOperation_CaculateATS_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_CaculateATS_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CaculateATS_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_CaculateATS_pargs {
 public:


  virtual ~AtsOperation_CaculateATS_pargs() throw();
  const std::string* atsName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_CaculateATS_result {
 public:

  AtsOperation_CaculateATS_result(const AtsOperation_CaculateATS_result&);
  AtsOperation_CaculateATS_result& operator=(const AtsOperation_CaculateATS_result&);
  AtsOperation_CaculateATS_result() {
  }

  virtual ~AtsOperation_CaculateATS_result() throw();

  bool operator == (const AtsOperation_CaculateATS_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_CaculateATS_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CaculateATS_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_CaculateATS_presult {
 public:


  virtual ~AtsOperation_CaculateATS_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_Start_args__isset {
  _AtsOperation_Start_args__isset() : atsName(false) {}
  bool atsName :1;
} _AtsOperation_Start_args__isset;

class AtsOperation_Start_args {
 public:

  AtsOperation_Start_args(const AtsOperation_Start_args&);
  AtsOperation_Start_args& operator=(const AtsOperation_Start_args&);
  AtsOperation_Start_args() : atsName() {
  }

  virtual ~AtsOperation_Start_args() throw();
  std::string atsName;

  _AtsOperation_Start_args__isset __isset;

  void __set_atsName(const std::string& val);

  bool operator == (const AtsOperation_Start_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_Start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_Start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_Start_pargs {
 public:


  virtual ~AtsOperation_Start_pargs() throw();
  const std::string* atsName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_Start_result {
 public:

  AtsOperation_Start_result(const AtsOperation_Start_result&);
  AtsOperation_Start_result& operator=(const AtsOperation_Start_result&);
  AtsOperation_Start_result() {
  }

  virtual ~AtsOperation_Start_result() throw();

  bool operator == (const AtsOperation_Start_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_Start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_Start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_Start_presult {
 public:


  virtual ~AtsOperation_Start_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_Stop_args__isset {
  _AtsOperation_Stop_args__isset() : atsName(false) {}
  bool atsName :1;
} _AtsOperation_Stop_args__isset;

class AtsOperation_Stop_args {
 public:

  AtsOperation_Stop_args(const AtsOperation_Stop_args&);
  AtsOperation_Stop_args& operator=(const AtsOperation_Stop_args&);
  AtsOperation_Stop_args() : atsName() {
  }

  virtual ~AtsOperation_Stop_args() throw();
  std::string atsName;

  _AtsOperation_Stop_args__isset __isset;

  void __set_atsName(const std::string& val);

  bool operator == (const AtsOperation_Stop_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_Stop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_Stop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_Stop_pargs {
 public:


  virtual ~AtsOperation_Stop_pargs() throw();
  const std::string* atsName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_Stop_result {
 public:

  AtsOperation_Stop_result(const AtsOperation_Stop_result&);
  AtsOperation_Stop_result& operator=(const AtsOperation_Stop_result&);
  AtsOperation_Stop_result() {
  }

  virtual ~AtsOperation_Stop_result() throw();

  bool operator == (const AtsOperation_Stop_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_Stop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_Stop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_Stop_presult {
 public:


  virtual ~AtsOperation_Stop_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_SaveConfig_args__isset {
  _AtsOperation_SaveConfig_args__isset() : atsName(false) {}
  bool atsName :1;
} _AtsOperation_SaveConfig_args__isset;

class AtsOperation_SaveConfig_args {
 public:

  AtsOperation_SaveConfig_args(const AtsOperation_SaveConfig_args&);
  AtsOperation_SaveConfig_args& operator=(const AtsOperation_SaveConfig_args&);
  AtsOperation_SaveConfig_args() : atsName() {
  }

  virtual ~AtsOperation_SaveConfig_args() throw();
  std::string atsName;

  _AtsOperation_SaveConfig_args__isset __isset;

  void __set_atsName(const std::string& val);

  bool operator == (const AtsOperation_SaveConfig_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SaveConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SaveConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SaveConfig_pargs {
 public:


  virtual ~AtsOperation_SaveConfig_pargs() throw();
  const std::string* atsName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SaveConfig_result {
 public:

  AtsOperation_SaveConfig_result(const AtsOperation_SaveConfig_result&);
  AtsOperation_SaveConfig_result& operator=(const AtsOperation_SaveConfig_result&);
  AtsOperation_SaveConfig_result() {
  }

  virtual ~AtsOperation_SaveConfig_result() throw();

  bool operator == (const AtsOperation_SaveConfig_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_SaveConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SaveConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SaveConfig_presult {
 public:


  virtual ~AtsOperation_SaveConfig_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_SaveConfigDaily_args__isset {
  _AtsOperation_SaveConfigDaily_args__isset() : atsName(false) {}
  bool atsName :1;
} _AtsOperation_SaveConfigDaily_args__isset;

class AtsOperation_SaveConfigDaily_args {
 public:

  AtsOperation_SaveConfigDaily_args(const AtsOperation_SaveConfigDaily_args&);
  AtsOperation_SaveConfigDaily_args& operator=(const AtsOperation_SaveConfigDaily_args&);
  AtsOperation_SaveConfigDaily_args() : atsName() {
  }

  virtual ~AtsOperation_SaveConfigDaily_args() throw();
  std::string atsName;

  _AtsOperation_SaveConfigDaily_args__isset __isset;

  void __set_atsName(const std::string& val);

  bool operator == (const AtsOperation_SaveConfigDaily_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SaveConfigDaily_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SaveConfigDaily_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SaveConfigDaily_pargs {
 public:


  virtual ~AtsOperation_SaveConfigDaily_pargs() throw();
  const std::string* atsName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SaveConfigDaily_result {
 public:

  AtsOperation_SaveConfigDaily_result(const AtsOperation_SaveConfigDaily_result&);
  AtsOperation_SaveConfigDaily_result& operator=(const AtsOperation_SaveConfigDaily_result&);
  AtsOperation_SaveConfigDaily_result() {
  }

  virtual ~AtsOperation_SaveConfigDaily_result() throw();

  bool operator == (const AtsOperation_SaveConfigDaily_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_SaveConfigDaily_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SaveConfigDaily_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SaveConfigDaily_presult {
 public:


  virtual ~AtsOperation_SaveConfigDaily_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_CheckAesData_args__isset {
  _AtsOperation_CheckAesData_args__isset() : msg(false) {}
  bool msg :1;
} _AtsOperation_CheckAesData_args__isset;

class AtsOperation_CheckAesData_args {
 public:

  AtsOperation_CheckAesData_args(const AtsOperation_CheckAesData_args&);
  AtsOperation_CheckAesData_args& operator=(const AtsOperation_CheckAesData_args&);
  AtsOperation_CheckAesData_args() {
  }

  virtual ~AtsOperation_CheckAesData_args() throw();
  AESDataMsg msg;

  _AtsOperation_CheckAesData_args__isset __isset;

  void __set_msg(const AESDataMsg& val);

  bool operator == (const AtsOperation_CheckAesData_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_CheckAesData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CheckAesData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_CheckAesData_pargs {
 public:


  virtual ~AtsOperation_CheckAesData_pargs() throw();
  const AESDataMsg* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_CheckAesData_result__isset {
  _AtsOperation_CheckAesData_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_CheckAesData_result__isset;

class AtsOperation_CheckAesData_result {
 public:

  AtsOperation_CheckAesData_result(const AtsOperation_CheckAesData_result&);
  AtsOperation_CheckAesData_result& operator=(const AtsOperation_CheckAesData_result&);
  AtsOperation_CheckAesData_result() : success(0) {
  }

  virtual ~AtsOperation_CheckAesData_result() throw();
  bool success;

  _AtsOperation_CheckAesData_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AtsOperation_CheckAesData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_CheckAesData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CheckAesData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_CheckAesData_presult__isset {
  _AtsOperation_CheckAesData_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_CheckAesData_presult__isset;

class AtsOperation_CheckAesData_presult {
 public:


  virtual ~AtsOperation_CheckAesData_presult() throw();
  bool* success;

  _AtsOperation_CheckAesData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_SendExternalPosition_args__isset {
  _AtsOperation_SendExternalPosition_args__isset() : positions(false) {}
  bool positions :1;
} _AtsOperation_SendExternalPosition_args__isset;

class AtsOperation_SendExternalPosition_args {
 public:

  AtsOperation_SendExternalPosition_args(const AtsOperation_SendExternalPosition_args&);
  AtsOperation_SendExternalPosition_args& operator=(const AtsOperation_SendExternalPosition_args&);
  AtsOperation_SendExternalPosition_args() {
  }

  virtual ~AtsOperation_SendExternalPosition_args() throw();
  std::vector<std::string>  positions;

  _AtsOperation_SendExternalPosition_args__isset __isset;

  void __set_positions(const std::vector<std::string> & val);

  bool operator == (const AtsOperation_SendExternalPosition_args & rhs) const
  {
    if (!(positions == rhs.positions))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_SendExternalPosition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SendExternalPosition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SendExternalPosition_pargs {
 public:


  virtual ~AtsOperation_SendExternalPosition_pargs() throw();
  const std::vector<std::string> * positions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SendExternalPosition_result {
 public:

  AtsOperation_SendExternalPosition_result(const AtsOperation_SendExternalPosition_result&);
  AtsOperation_SendExternalPosition_result& operator=(const AtsOperation_SendExternalPosition_result&);
  AtsOperation_SendExternalPosition_result() {
  }

  virtual ~AtsOperation_SendExternalPosition_result() throw();

  bool operator == (const AtsOperation_SendExternalPosition_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_SendExternalPosition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_SendExternalPosition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_SendExternalPosition_presult {
 public:


  virtual ~AtsOperation_SendExternalPosition_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AtsOperation_RequestDeals_args {
 public:

  AtsOperation_RequestDeals_args(const AtsOperation_RequestDeals_args&);
  AtsOperation_RequestDeals_args& operator=(const AtsOperation_RequestDeals_args&);
  AtsOperation_RequestDeals_args() {
  }

  virtual ~AtsOperation_RequestDeals_args() throw();

  bool operator == (const AtsOperation_RequestDeals_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_RequestDeals_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_RequestDeals_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_RequestDeals_pargs {
 public:


  virtual ~AtsOperation_RequestDeals_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_RequestDeals_result__isset {
  _AtsOperation_RequestDeals_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_RequestDeals_result__isset;

class AtsOperation_RequestDeals_result {
 public:

  AtsOperation_RequestDeals_result(const AtsOperation_RequestDeals_result&);
  AtsOperation_RequestDeals_result& operator=(const AtsOperation_RequestDeals_result&);
  AtsOperation_RequestDeals_result() {
  }

  virtual ~AtsOperation_RequestDeals_result() throw();
  std::vector<std::string>  success;

  _AtsOperation_RequestDeals_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const AtsOperation_RequestDeals_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_RequestDeals_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_RequestDeals_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_RequestDeals_presult__isset {
  _AtsOperation_RequestDeals_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_RequestDeals_presult__isset;

class AtsOperation_RequestDeals_presult {
 public:


  virtual ~AtsOperation_RequestDeals_presult() throw();
  std::vector<std::string> * success;

  _AtsOperation_RequestDeals_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_CreateManualQuote_args__isset {
  _AtsOperation_CreateManualQuote_args__isset() : atsName(false), atsInstrumentCode(false), bidprice(false), bidquantity(false), askprice(false), askquantity(false), tradingtype(false), bidopenclose(false), askopenclose(false) {}
  bool atsName :1;
  bool atsInstrumentCode :1;
  bool bidprice :1;
  bool bidquantity :1;
  bool askprice :1;
  bool askquantity :1;
  bool tradingtype :1;
  bool bidopenclose :1;
  bool askopenclose :1;
} _AtsOperation_CreateManualQuote_args__isset;

class AtsOperation_CreateManualQuote_args {
 public:

  AtsOperation_CreateManualQuote_args(const AtsOperation_CreateManualQuote_args&);
  AtsOperation_CreateManualQuote_args& operator=(const AtsOperation_CreateManualQuote_args&);
  AtsOperation_CreateManualQuote_args() : atsName(), atsInstrumentCode(), bidprice(0), bidquantity(0), askprice(0), askquantity(0), tradingtype(0), bidopenclose(( ::AtsType::OrderOpenClose::type)0), askopenclose(( ::AtsType::OrderOpenClose::type)0) {
  }

  virtual ~AtsOperation_CreateManualQuote_args() throw();
  std::string atsName;
  std::string atsInstrumentCode;
  double bidprice;
  int32_t bidquantity;
  double askprice;
  int32_t askquantity;
  int32_t tradingtype;
   ::AtsType::OrderOpenClose::type bidopenclose;
   ::AtsType::OrderOpenClose::type askopenclose;

  _AtsOperation_CreateManualQuote_args__isset __isset;

  void __set_atsName(const std::string& val);

  void __set_atsInstrumentCode(const std::string& val);

  void __set_bidprice(const double val);

  void __set_bidquantity(const int32_t val);

  void __set_askprice(const double val);

  void __set_askquantity(const int32_t val);

  void __set_tradingtype(const int32_t val);

  void __set_bidopenclose(const  ::AtsType::OrderOpenClose::type val);

  void __set_askopenclose(const  ::AtsType::OrderOpenClose::type val);

  bool operator == (const AtsOperation_CreateManualQuote_args & rhs) const
  {
    if (!(atsName == rhs.atsName))
      return false;
    if (!(atsInstrumentCode == rhs.atsInstrumentCode))
      return false;
    if (!(bidprice == rhs.bidprice))
      return false;
    if (!(bidquantity == rhs.bidquantity))
      return false;
    if (!(askprice == rhs.askprice))
      return false;
    if (!(askquantity == rhs.askquantity))
      return false;
    if (!(tradingtype == rhs.tradingtype))
      return false;
    if (!(bidopenclose == rhs.bidopenclose))
      return false;
    if (!(askopenclose == rhs.askopenclose))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_CreateManualQuote_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CreateManualQuote_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_CreateManualQuote_pargs {
 public:


  virtual ~AtsOperation_CreateManualQuote_pargs() throw();
  const std::string* atsName;
  const std::string* atsInstrumentCode;
  const double* bidprice;
  const int32_t* bidquantity;
  const double* askprice;
  const int32_t* askquantity;
  const int32_t* tradingtype;
  const  ::AtsType::OrderOpenClose::type* bidopenclose;
  const  ::AtsType::OrderOpenClose::type* askopenclose;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_CreateManualQuote_result__isset {
  _AtsOperation_CreateManualQuote_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_CreateManualQuote_result__isset;

class AtsOperation_CreateManualQuote_result {
 public:

  AtsOperation_CreateManualQuote_result(const AtsOperation_CreateManualQuote_result&);
  AtsOperation_CreateManualQuote_result& operator=(const AtsOperation_CreateManualQuote_result&);
  AtsOperation_CreateManualQuote_result() : success(0) {
  }

  virtual ~AtsOperation_CreateManualQuote_result() throw();
  bool success;

  _AtsOperation_CreateManualQuote_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AtsOperation_CreateManualQuote_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_CreateManualQuote_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CreateManualQuote_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_CreateManualQuote_presult__isset {
  _AtsOperation_CreateManualQuote_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_CreateManualQuote_presult__isset;

class AtsOperation_CreateManualQuote_presult {
 public:


  virtual ~AtsOperation_CreateManualQuote_presult() throw();
  bool* success;

  _AtsOperation_CreateManualQuote_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AtsOperation_CancelQuote_args__isset {
  _AtsOperation_CancelQuote_args__isset() : id(false) {}
  bool id :1;
} _AtsOperation_CancelQuote_args__isset;

class AtsOperation_CancelQuote_args {
 public:

  AtsOperation_CancelQuote_args(const AtsOperation_CancelQuote_args&);
  AtsOperation_CancelQuote_args& operator=(const AtsOperation_CancelQuote_args&);
  AtsOperation_CancelQuote_args() : id(0) {
  }

  virtual ~AtsOperation_CancelQuote_args() throw();
  int32_t id;

  _AtsOperation_CancelQuote_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const AtsOperation_CancelQuote_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_CancelQuote_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CancelQuote_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_CancelQuote_pargs {
 public:


  virtual ~AtsOperation_CancelQuote_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_CancelQuote_result__isset {
  _AtsOperation_CancelQuote_result__isset() : success(false) {}
  bool success :1;
} _AtsOperation_CancelQuote_result__isset;

class AtsOperation_CancelQuote_result {
 public:

  AtsOperation_CancelQuote_result(const AtsOperation_CancelQuote_result&);
  AtsOperation_CancelQuote_result& operator=(const AtsOperation_CancelQuote_result&);
  AtsOperation_CancelQuote_result() : success(0) {
  }

  virtual ~AtsOperation_CancelQuote_result() throw();
  bool success;

  _AtsOperation_CancelQuote_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AtsOperation_CancelQuote_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AtsOperation_CancelQuote_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CancelQuote_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AtsOperation_CancelQuote_presult__isset {
  _AtsOperation_CancelQuote_presult__isset() : success(false) {}
  bool success :1;
} _AtsOperation_CancelQuote_presult__isset;

class AtsOperation_CancelQuote_presult {
 public:


  virtual ~AtsOperation_CancelQuote_presult() throw();
  bool* success;

  _AtsOperation_CancelQuote_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AtsOperation_CancelAllQuote_args {
 public:

  AtsOperation_CancelAllQuote_args(const AtsOperation_CancelAllQuote_args&);
  AtsOperation_CancelAllQuote_args& operator=(const AtsOperation_CancelAllQuote_args&);
  AtsOperation_CancelAllQuote_args() {
  }

  virtual ~AtsOperation_CancelAllQuote_args() throw();

  bool operator == (const AtsOperation_CancelAllQuote_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_CancelAllQuote_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CancelAllQuote_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_CancelAllQuote_pargs {
 public:


  virtual ~AtsOperation_CancelAllQuote_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_CancelAllQuote_result {
 public:

  AtsOperation_CancelAllQuote_result(const AtsOperation_CancelAllQuote_result&);
  AtsOperation_CancelAllQuote_result& operator=(const AtsOperation_CancelAllQuote_result&);
  AtsOperation_CancelAllQuote_result() {
  }

  virtual ~AtsOperation_CancelAllQuote_result() throw();

  bool operator == (const AtsOperation_CancelAllQuote_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AtsOperation_CancelAllQuote_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AtsOperation_CancelAllQuote_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AtsOperation_CancelAllQuote_presult {
 public:


  virtual ~AtsOperation_CancelAllQuote_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AtsOperationClient : virtual public AtsOperationIf {
 public:
  AtsOperationClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AtsOperationClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t HeartBeat();
  void send_HeartBeat();
  int64_t recv_HeartBeat();
  void SetLocalTime(const int64_t ticks);
  void send_SetLocalTime(const int64_t ticks);
  void recv_SetLocalTime();
  void CloseAll();
  void send_CloseAll();
  void recv_CloseAll();
  void FeedSourceRelease(const std::string& feedsourcename);
  void send_FeedSourceRelease(const std::string& feedsourcename);
  void recv_FeedSourceRelease();
  bool SetFeedActived(const std::string& feedsourcename, const bool activated);
  void send_SetFeedActived(const std::string& feedsourcename, const bool activated);
  bool recv_SetFeedActived();
  bool SetConnectionTradingAllowed(const std::string& connectionname, const bool allowed);
  void send_SetConnectionTradingAllowed(const std::string& connectionname, const bool allowed);
  bool recv_SetConnectionTradingAllowed();
  void ConnectionConnect(const std::string& connectionname, const bool toConnect);
  void send_ConnectionConnect(const std::string& connectionname, const bool toConnect);
  void recv_ConnectionConnect();
  bool CancelOrder(const int32_t id);
  void send_CancelOrder(const int32_t id);
  bool recv_CancelOrder();
  void CancelAllOrder();
  void send_CancelAllOrder();
  void recv_CancelAllOrder();
  int32_t SetYesterdayPositionLocal(const PositionMsg& position, const int32_t yesterdayPositionLocal);
  void send_SetYesterdayPositionLocal(const PositionMsg& position, const int32_t yesterdayPositionLocal);
  int32_t recv_SetYesterdayPositionLocal();
  double SetYesterdayPriceLocalLocal(const PositionMsg& position, const double yesterdayPriceLocal);
  void send_SetYesterdayPriceLocalLocal(const PositionMsg& position, const double yesterdayPriceLocal);
  double recv_SetYesterdayPriceLocalLocal();
  int32_t SetYesterdayPositionManual(const PositionMsg& position, const int32_t yesterdayPositionManual);
  void send_SetYesterdayPositionManual(const PositionMsg& position, const int32_t yesterdayPositionManual);
  int32_t recv_SetYesterdayPositionManual();
  int32_t SetYesterdayPositionExternal(const PositionMsg& position, const int32_t yesterdayPositionExternal);
  void send_SetYesterdayPositionExternal(const PositionMsg& position, const int32_t yesterdayPositionExternal);
  int32_t recv_SetYesterdayPositionExternal();
  bool SetUseManualPosition(const PositionMsg& position, const bool useManualPosition);
  void send_SetUseManualPosition(const PositionMsg& position, const bool useManualPosition);
  bool recv_SetUseManualPosition();
   ::AtsType::YesterdayPositionType::type SetYstPositionType(const PositionMsg& position, const  ::AtsType::YesterdayPositionType::type ystPositionType);
  void send_SetYstPositionType(const PositionMsg& position, const  ::AtsType::YesterdayPositionType::type ystPositionType);
   ::AtsType::YesterdayPositionType::type recv_SetYstPositionType();
   ::AtsType::YesterdayPositionType::type SetAtsYstPositionType(const AtsMsg& ats, const  ::AtsType::YesterdayPositionType::type ystPositionType);
  void send_SetAtsYstPositionType(const AtsMsg& ats, const  ::AtsType::YesterdayPositionType::type ystPositionType);
   ::AtsType::YesterdayPositionType::type recv_SetAtsYstPositionType();
  bool CreateManualOrder(const double price, const  ::AtsType::OrderWay::type way, const int32_t quantity, const std::string& atsName, const std::string& atsInstrumentCode, const int32_t tradingtype, const  ::AtsType::OrderRestriction::type orderrestriction, const  ::AtsType::OrderOpenClose::type openclose, const  ::AtsType::OrderPriceMode::type priceMode);
  void send_CreateManualOrder(const double price, const  ::AtsType::OrderWay::type way, const int32_t quantity, const std::string& atsName, const std::string& atsInstrumentCode, const int32_t tradingtype, const  ::AtsType::OrderRestriction::type orderrestriction, const  ::AtsType::OrderOpenClose::type openclose, const  ::AtsType::OrderPriceMode::type priceMode);
  bool recv_CreateManualOrder();
  void GetFeesStruct(FeesStructMsg& _return, const std::string& className);
  void send_GetFeesStruct(const std::string& className);
  void recv_GetFeesStruct(FeesStructMsg& _return);
  void UpdateFeesStruct(FeesStructMsg& _return, const FeesStructMsg& feesStruct);
  void send_UpdateFeesStruct(const FeesStructMsg& feesStruct);
  void recv_UpdateFeesStruct(FeesStructMsg& _return);
  double TickUpPrice(const AtsInstrumentMsg& instrument, const double price, const int32_t ticks);
  void send_TickUpPrice(const AtsInstrumentMsg& instrument, const double price, const int32_t ticks);
  double recv_TickUpPrice();
  double TickDownPrice(const AtsInstrumentMsg& instrument, const double price, const int32_t ticks);
  void send_TickDownPrice(const AtsInstrumentMsg& instrument, const double price, const int32_t ticks);
  double recv_TickDownPrice();
  void KillAll(const std::string& atsName, const int32_t tradingtype);
  void send_KillAll(const std::string& atsName, const int32_t tradingtype);
  void recv_KillAll();
  void GetTradingPeriodManager(TradingPeriodManagerMsg& _return, const std::string& atsName);
  void send_GetTradingPeriodManager(const std::string& atsName);
  void recv_GetTradingPeriodManager(TradingPeriodManagerMsg& _return);
  void SetTradingPeriodManager(const std::string& atsName, const TradingPeriodManagerMsg& tradingperiodManager);
  void send_SetTradingPeriodManager(const std::string& atsName, const TradingPeriodManagerMsg& tradingperiodManager);
  void recv_SetTradingPeriodManager();
  void SaveReferential(const std::string& atsName, const TradingPeriodManagerMsg& tradingPeriodManager, const UnderlyingMsg& underlying, const InstrumentClassMsg& StockClass);
  void send_SaveReferential(const std::string& atsName, const TradingPeriodManagerMsg& tradingPeriodManager, const UnderlyingMsg& underlying, const InstrumentClassMsg& StockClass);
  void recv_SaveReferential();
  void StartPublish();
  void send_StartPublish();
  void recv_StartPublish();
  void ForceSubScribe(const std::string& atsName, const std::string& instrumentCode);
  void send_ForceSubScribe(const std::string& atsName, const std::string& instrumentCode);
  void recv_ForceSubScribe();
  void StartAutomaton(const std::string& atsName);
  void send_StartAutomaton(const std::string& atsName);
  void recv_StartAutomaton();
  void StartAutomatonByList(const std::vector<std::string> & atsName);
  void send_StartAutomatonByList(const std::vector<std::string> & atsName);
  void recv_StartAutomatonByList();
  void StopAutomaton(const std::string& atsNamme);
  void send_StopAutomaton(const std::string& atsNamme);
  void recv_StopAutomaton();
  void CaculateATS(const std::string& atsName);
  void send_CaculateATS(const std::string& atsName);
  void recv_CaculateATS();
  void Start(const std::string& atsName);
  void send_Start(const std::string& atsName);
  void recv_Start();
  void Stop(const std::string& atsName);
  void send_Stop(const std::string& atsName);
  void recv_Stop();
  void SaveConfig(const std::string& atsName);
  void send_SaveConfig(const std::string& atsName);
  void recv_SaveConfig();
  void SaveConfigDaily(const std::string& atsName);
  void send_SaveConfigDaily(const std::string& atsName);
  void recv_SaveConfigDaily();
  bool CheckAesData(const AESDataMsg& msg);
  void send_CheckAesData(const AESDataMsg& msg);
  bool recv_CheckAesData();
  void SendExternalPosition(const std::vector<std::string> & positions);
  void send_SendExternalPosition(const std::vector<std::string> & positions);
  void recv_SendExternalPosition();
  void RequestDeals(std::vector<std::string> & _return);
  void send_RequestDeals();
  void recv_RequestDeals(std::vector<std::string> & _return);
  bool CreateManualQuote(const std::string& atsName, const std::string& atsInstrumentCode, const double bidprice, const int32_t bidquantity, const double askprice, const int32_t askquantity, const int32_t tradingtype, const  ::AtsType::OrderOpenClose::type bidopenclose, const  ::AtsType::OrderOpenClose::type askopenclose);
  void send_CreateManualQuote(const std::string& atsName, const std::string& atsInstrumentCode, const double bidprice, const int32_t bidquantity, const double askprice, const int32_t askquantity, const int32_t tradingtype, const  ::AtsType::OrderOpenClose::type bidopenclose, const  ::AtsType::OrderOpenClose::type askopenclose);
  bool recv_CreateManualQuote();
  bool CancelQuote(const int32_t id);
  void send_CancelQuote(const int32_t id);
  bool recv_CancelQuote();
  void CancelAllQuote();
  void send_CancelAllQuote();
  void recv_CancelAllQuote();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AtsOperationProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AtsOperationIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AtsOperationProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_HeartBeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetLocalTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CloseAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FeedSourceRelease(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetFeedActived(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetConnectionTradingAllowed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ConnectionConnect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CancelOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CancelAllOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetYesterdayPositionLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetYesterdayPriceLocalLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetYesterdayPositionManual(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetYesterdayPositionExternal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetUseManualPosition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetYstPositionType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetAtsYstPositionType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateManualOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetFeesStruct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateFeesStruct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TickUpPrice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TickDownPrice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_KillAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTradingPeriodManager(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetTradingPeriodManager(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SaveReferential(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StartPublish(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ForceSubScribe(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StartAutomaton(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StartAutomatonByList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StopAutomaton(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CaculateATS(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SaveConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SaveConfigDaily(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CheckAesData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SendExternalPosition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RequestDeals(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateManualQuote(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CancelQuote(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CancelAllQuote(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AtsOperationProcessor(boost::shared_ptr<AtsOperationIf> iface) :
    iface_(iface) {
    processMap_["HeartBeat"] = &AtsOperationProcessor::process_HeartBeat;
    processMap_["SetLocalTime"] = &AtsOperationProcessor::process_SetLocalTime;
    processMap_["CloseAll"] = &AtsOperationProcessor::process_CloseAll;
    processMap_["FeedSourceRelease"] = &AtsOperationProcessor::process_FeedSourceRelease;
    processMap_["SetFeedActived"] = &AtsOperationProcessor::process_SetFeedActived;
    processMap_["SetConnectionTradingAllowed"] = &AtsOperationProcessor::process_SetConnectionTradingAllowed;
    processMap_["ConnectionConnect"] = &AtsOperationProcessor::process_ConnectionConnect;
    processMap_["CancelOrder"] = &AtsOperationProcessor::process_CancelOrder;
    processMap_["CancelAllOrder"] = &AtsOperationProcessor::process_CancelAllOrder;
    processMap_["SetYesterdayPositionLocal"] = &AtsOperationProcessor::process_SetYesterdayPositionLocal;
    processMap_["SetYesterdayPriceLocalLocal"] = &AtsOperationProcessor::process_SetYesterdayPriceLocalLocal;
    processMap_["SetYesterdayPositionManual"] = &AtsOperationProcessor::process_SetYesterdayPositionManual;
    processMap_["SetYesterdayPositionExternal"] = &AtsOperationProcessor::process_SetYesterdayPositionExternal;
    processMap_["SetUseManualPosition"] = &AtsOperationProcessor::process_SetUseManualPosition;
    processMap_["SetYstPositionType"] = &AtsOperationProcessor::process_SetYstPositionType;
    processMap_["SetAtsYstPositionType"] = &AtsOperationProcessor::process_SetAtsYstPositionType;
    processMap_["CreateManualOrder"] = &AtsOperationProcessor::process_CreateManualOrder;
    processMap_["GetFeesStruct"] = &AtsOperationProcessor::process_GetFeesStruct;
    processMap_["UpdateFeesStruct"] = &AtsOperationProcessor::process_UpdateFeesStruct;
    processMap_["TickUpPrice"] = &AtsOperationProcessor::process_TickUpPrice;
    processMap_["TickDownPrice"] = &AtsOperationProcessor::process_TickDownPrice;
    processMap_["KillAll"] = &AtsOperationProcessor::process_KillAll;
    processMap_["GetTradingPeriodManager"] = &AtsOperationProcessor::process_GetTradingPeriodManager;
    processMap_["SetTradingPeriodManager"] = &AtsOperationProcessor::process_SetTradingPeriodManager;
    processMap_["SaveReferential"] = &AtsOperationProcessor::process_SaveReferential;
    processMap_["StartPublish"] = &AtsOperationProcessor::process_StartPublish;
    processMap_["ForceSubScribe"] = &AtsOperationProcessor::process_ForceSubScribe;
    processMap_["StartAutomaton"] = &AtsOperationProcessor::process_StartAutomaton;
    processMap_["StartAutomatonByList"] = &AtsOperationProcessor::process_StartAutomatonByList;
    processMap_["StopAutomaton"] = &AtsOperationProcessor::process_StopAutomaton;
    processMap_["CaculateATS"] = &AtsOperationProcessor::process_CaculateATS;
    processMap_["Start"] = &AtsOperationProcessor::process_Start;
    processMap_["Stop"] = &AtsOperationProcessor::process_Stop;
    processMap_["SaveConfig"] = &AtsOperationProcessor::process_SaveConfig;
    processMap_["SaveConfigDaily"] = &AtsOperationProcessor::process_SaveConfigDaily;
    processMap_["CheckAesData"] = &AtsOperationProcessor::process_CheckAesData;
    processMap_["SendExternalPosition"] = &AtsOperationProcessor::process_SendExternalPosition;
    processMap_["RequestDeals"] = &AtsOperationProcessor::process_RequestDeals;
    processMap_["CreateManualQuote"] = &AtsOperationProcessor::process_CreateManualQuote;
    processMap_["CancelQuote"] = &AtsOperationProcessor::process_CancelQuote;
    processMap_["CancelAllQuote"] = &AtsOperationProcessor::process_CancelAllQuote;
  }

  virtual ~AtsOperationProcessor() {}
};

class AtsOperationProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AtsOperationProcessorFactory(const ::boost::shared_ptr< AtsOperationIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AtsOperationIfFactory > handlerFactory_;
};

class AtsOperationMultiface : virtual public AtsOperationIf {
 public:
  AtsOperationMultiface(std::vector<boost::shared_ptr<AtsOperationIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AtsOperationMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AtsOperationIf> > ifaces_;
  AtsOperationMultiface() {}
  void add(boost::shared_ptr<AtsOperationIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t HeartBeat() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HeartBeat();
    }
    return ifaces_[i]->HeartBeat();
  }

  void SetLocalTime(const int64_t ticks) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetLocalTime(ticks);
    }
    ifaces_[i]->SetLocalTime(ticks);
  }

  void CloseAll() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CloseAll();
    }
    ifaces_[i]->CloseAll();
  }

  void FeedSourceRelease(const std::string& feedsourcename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FeedSourceRelease(feedsourcename);
    }
    ifaces_[i]->FeedSourceRelease(feedsourcename);
  }

  bool SetFeedActived(const std::string& feedsourcename, const bool activated) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetFeedActived(feedsourcename, activated);
    }
    return ifaces_[i]->SetFeedActived(feedsourcename, activated);
  }

  bool SetConnectionTradingAllowed(const std::string& connectionname, const bool allowed) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetConnectionTradingAllowed(connectionname, allowed);
    }
    return ifaces_[i]->SetConnectionTradingAllowed(connectionname, allowed);
  }

  void ConnectionConnect(const std::string& connectionname, const bool toConnect) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ConnectionConnect(connectionname, toConnect);
    }
    ifaces_[i]->ConnectionConnect(connectionname, toConnect);
  }

  bool CancelOrder(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CancelOrder(id);
    }
    return ifaces_[i]->CancelOrder(id);
  }

  void CancelAllOrder() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CancelAllOrder();
    }
    ifaces_[i]->CancelAllOrder();
  }

  int32_t SetYesterdayPositionLocal(const PositionMsg& position, const int32_t yesterdayPositionLocal) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetYesterdayPositionLocal(position, yesterdayPositionLocal);
    }
    return ifaces_[i]->SetYesterdayPositionLocal(position, yesterdayPositionLocal);
  }

  double SetYesterdayPriceLocalLocal(const PositionMsg& position, const double yesterdayPriceLocal) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetYesterdayPriceLocalLocal(position, yesterdayPriceLocal);
    }
    return ifaces_[i]->SetYesterdayPriceLocalLocal(position, yesterdayPriceLocal);
  }

  int32_t SetYesterdayPositionManual(const PositionMsg& position, const int32_t yesterdayPositionManual) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetYesterdayPositionManual(position, yesterdayPositionManual);
    }
    return ifaces_[i]->SetYesterdayPositionManual(position, yesterdayPositionManual);
  }

  int32_t SetYesterdayPositionExternal(const PositionMsg& position, const int32_t yesterdayPositionExternal) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetYesterdayPositionExternal(position, yesterdayPositionExternal);
    }
    return ifaces_[i]->SetYesterdayPositionExternal(position, yesterdayPositionExternal);
  }

  bool SetUseManualPosition(const PositionMsg& position, const bool useManualPosition) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetUseManualPosition(position, useManualPosition);
    }
    return ifaces_[i]->SetUseManualPosition(position, useManualPosition);
  }

   ::AtsType::YesterdayPositionType::type SetYstPositionType(const PositionMsg& position, const  ::AtsType::YesterdayPositionType::type ystPositionType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetYstPositionType(position, ystPositionType);
    }
    return ifaces_[i]->SetYstPositionType(position, ystPositionType);
  }

   ::AtsType::YesterdayPositionType::type SetAtsYstPositionType(const AtsMsg& ats, const  ::AtsType::YesterdayPositionType::type ystPositionType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetAtsYstPositionType(ats, ystPositionType);
    }
    return ifaces_[i]->SetAtsYstPositionType(ats, ystPositionType);
  }

  bool CreateManualOrder(const double price, const  ::AtsType::OrderWay::type way, const int32_t quantity, const std::string& atsName, const std::string& atsInstrumentCode, const int32_t tradingtype, const  ::AtsType::OrderRestriction::type orderrestriction, const  ::AtsType::OrderOpenClose::type openclose, const  ::AtsType::OrderPriceMode::type priceMode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateManualOrder(price, way, quantity, atsName, atsInstrumentCode, tradingtype, orderrestriction, openclose, priceMode);
    }
    return ifaces_[i]->CreateManualOrder(price, way, quantity, atsName, atsInstrumentCode, tradingtype, orderrestriction, openclose, priceMode);
  }

  void GetFeesStruct(FeesStructMsg& _return, const std::string& className) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetFeesStruct(_return, className);
    }
    ifaces_[i]->GetFeesStruct(_return, className);
    return;
  }

  void UpdateFeesStruct(FeesStructMsg& _return, const FeesStructMsg& feesStruct) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateFeesStruct(_return, feesStruct);
    }
    ifaces_[i]->UpdateFeesStruct(_return, feesStruct);
    return;
  }

  double TickUpPrice(const AtsInstrumentMsg& instrument, const double price, const int32_t ticks) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TickUpPrice(instrument, price, ticks);
    }
    return ifaces_[i]->TickUpPrice(instrument, price, ticks);
  }

  double TickDownPrice(const AtsInstrumentMsg& instrument, const double price, const int32_t ticks) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TickDownPrice(instrument, price, ticks);
    }
    return ifaces_[i]->TickDownPrice(instrument, price, ticks);
  }

  void KillAll(const std::string& atsName, const int32_t tradingtype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->KillAll(atsName, tradingtype);
    }
    ifaces_[i]->KillAll(atsName, tradingtype);
  }

  void GetTradingPeriodManager(TradingPeriodManagerMsg& _return, const std::string& atsName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTradingPeriodManager(_return, atsName);
    }
    ifaces_[i]->GetTradingPeriodManager(_return, atsName);
    return;
  }

  void SetTradingPeriodManager(const std::string& atsName, const TradingPeriodManagerMsg& tradingperiodManager) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetTradingPeriodManager(atsName, tradingperiodManager);
    }
    ifaces_[i]->SetTradingPeriodManager(atsName, tradingperiodManager);
  }

  void SaveReferential(const std::string& atsName, const TradingPeriodManagerMsg& tradingPeriodManager, const UnderlyingMsg& underlying, const InstrumentClassMsg& StockClass) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SaveReferential(atsName, tradingPeriodManager, underlying, StockClass);
    }
    ifaces_[i]->SaveReferential(atsName, tradingPeriodManager, underlying, StockClass);
  }

  void StartPublish() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StartPublish();
    }
    ifaces_[i]->StartPublish();
  }

  void ForceSubScribe(const std::string& atsName, const std::string& instrumentCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ForceSubScribe(atsName, instrumentCode);
    }
    ifaces_[i]->ForceSubScribe(atsName, instrumentCode);
  }

  void StartAutomaton(const std::string& atsName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StartAutomaton(atsName);
    }
    ifaces_[i]->StartAutomaton(atsName);
  }

  void StartAutomatonByList(const std::vector<std::string> & atsName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StartAutomatonByList(atsName);
    }
    ifaces_[i]->StartAutomatonByList(atsName);
  }

  void StopAutomaton(const std::string& atsNamme) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StopAutomaton(atsNamme);
    }
    ifaces_[i]->StopAutomaton(atsNamme);
  }

  void CaculateATS(const std::string& atsName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CaculateATS(atsName);
    }
    ifaces_[i]->CaculateATS(atsName);
  }

  void Start(const std::string& atsName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Start(atsName);
    }
    ifaces_[i]->Start(atsName);
  }

  void Stop(const std::string& atsName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Stop(atsName);
    }
    ifaces_[i]->Stop(atsName);
  }

  void SaveConfig(const std::string& atsName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SaveConfig(atsName);
    }
    ifaces_[i]->SaveConfig(atsName);
  }

  void SaveConfigDaily(const std::string& atsName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SaveConfigDaily(atsName);
    }
    ifaces_[i]->SaveConfigDaily(atsName);
  }

  bool CheckAesData(const AESDataMsg& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CheckAesData(msg);
    }
    return ifaces_[i]->CheckAesData(msg);
  }

  void SendExternalPosition(const std::vector<std::string> & positions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendExternalPosition(positions);
    }
    ifaces_[i]->SendExternalPosition(positions);
  }

  void RequestDeals(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RequestDeals(_return);
    }
    ifaces_[i]->RequestDeals(_return);
    return;
  }

  bool CreateManualQuote(const std::string& atsName, const std::string& atsInstrumentCode, const double bidprice, const int32_t bidquantity, const double askprice, const int32_t askquantity, const int32_t tradingtype, const  ::AtsType::OrderOpenClose::type bidopenclose, const  ::AtsType::OrderOpenClose::type askopenclose) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateManualQuote(atsName, atsInstrumentCode, bidprice, bidquantity, askprice, askquantity, tradingtype, bidopenclose, askopenclose);
    }
    return ifaces_[i]->CreateManualQuote(atsName, atsInstrumentCode, bidprice, bidquantity, askprice, askquantity, tradingtype, bidopenclose, askopenclose);
  }

  bool CancelQuote(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CancelQuote(id);
    }
    return ifaces_[i]->CancelQuote(id);
  }

  void CancelAllQuote() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CancelAllQuote();
    }
    ifaces_[i]->CancelAllQuote();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AtsOperationConcurrentClient : virtual public AtsOperationIf {
 public:
  AtsOperationConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AtsOperationConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t HeartBeat();
  int32_t send_HeartBeat();
  int64_t recv_HeartBeat(const int32_t seqid);
  void SetLocalTime(const int64_t ticks);
  int32_t send_SetLocalTime(const int64_t ticks);
  void recv_SetLocalTime(const int32_t seqid);
  void CloseAll();
  int32_t send_CloseAll();
  void recv_CloseAll(const int32_t seqid);
  void FeedSourceRelease(const std::string& feedsourcename);
  int32_t send_FeedSourceRelease(const std::string& feedsourcename);
  void recv_FeedSourceRelease(const int32_t seqid);
  bool SetFeedActived(const std::string& feedsourcename, const bool activated);
  int32_t send_SetFeedActived(const std::string& feedsourcename, const bool activated);
  bool recv_SetFeedActived(const int32_t seqid);
  bool SetConnectionTradingAllowed(const std::string& connectionname, const bool allowed);
  int32_t send_SetConnectionTradingAllowed(const std::string& connectionname, const bool allowed);
  bool recv_SetConnectionTradingAllowed(const int32_t seqid);
  void ConnectionConnect(const std::string& connectionname, const bool toConnect);
  int32_t send_ConnectionConnect(const std::string& connectionname, const bool toConnect);
  void recv_ConnectionConnect(const int32_t seqid);
  bool CancelOrder(const int32_t id);
  int32_t send_CancelOrder(const int32_t id);
  bool recv_CancelOrder(const int32_t seqid);
  void CancelAllOrder();
  int32_t send_CancelAllOrder();
  void recv_CancelAllOrder(const int32_t seqid);
  int32_t SetYesterdayPositionLocal(const PositionMsg& position, const int32_t yesterdayPositionLocal);
  int32_t send_SetYesterdayPositionLocal(const PositionMsg& position, const int32_t yesterdayPositionLocal);
  int32_t recv_SetYesterdayPositionLocal(const int32_t seqid);
  double SetYesterdayPriceLocalLocal(const PositionMsg& position, const double yesterdayPriceLocal);
  int32_t send_SetYesterdayPriceLocalLocal(const PositionMsg& position, const double yesterdayPriceLocal);
  double recv_SetYesterdayPriceLocalLocal(const int32_t seqid);
  int32_t SetYesterdayPositionManual(const PositionMsg& position, const int32_t yesterdayPositionManual);
  int32_t send_SetYesterdayPositionManual(const PositionMsg& position, const int32_t yesterdayPositionManual);
  int32_t recv_SetYesterdayPositionManual(const int32_t seqid);
  int32_t SetYesterdayPositionExternal(const PositionMsg& position, const int32_t yesterdayPositionExternal);
  int32_t send_SetYesterdayPositionExternal(const PositionMsg& position, const int32_t yesterdayPositionExternal);
  int32_t recv_SetYesterdayPositionExternal(const int32_t seqid);
  bool SetUseManualPosition(const PositionMsg& position, const bool useManualPosition);
  int32_t send_SetUseManualPosition(const PositionMsg& position, const bool useManualPosition);
  bool recv_SetUseManualPosition(const int32_t seqid);
   ::AtsType::YesterdayPositionType::type SetYstPositionType(const PositionMsg& position, const  ::AtsType::YesterdayPositionType::type ystPositionType);
  int32_t send_SetYstPositionType(const PositionMsg& position, const  ::AtsType::YesterdayPositionType::type ystPositionType);
   ::AtsType::YesterdayPositionType::type recv_SetYstPositionType(const int32_t seqid);
   ::AtsType::YesterdayPositionType::type SetAtsYstPositionType(const AtsMsg& ats, const  ::AtsType::YesterdayPositionType::type ystPositionType);
  int32_t send_SetAtsYstPositionType(const AtsMsg& ats, const  ::AtsType::YesterdayPositionType::type ystPositionType);
   ::AtsType::YesterdayPositionType::type recv_SetAtsYstPositionType(const int32_t seqid);
  bool CreateManualOrder(const double price, const  ::AtsType::OrderWay::type way, const int32_t quantity, const std::string& atsName, const std::string& atsInstrumentCode, const int32_t tradingtype, const  ::AtsType::OrderRestriction::type orderrestriction, const  ::AtsType::OrderOpenClose::type openclose, const  ::AtsType::OrderPriceMode::type priceMode);
  int32_t send_CreateManualOrder(const double price, const  ::AtsType::OrderWay::type way, const int32_t quantity, const std::string& atsName, const std::string& atsInstrumentCode, const int32_t tradingtype, const  ::AtsType::OrderRestriction::type orderrestriction, const  ::AtsType::OrderOpenClose::type openclose, const  ::AtsType::OrderPriceMode::type priceMode);
  bool recv_CreateManualOrder(const int32_t seqid);
  void GetFeesStruct(FeesStructMsg& _return, const std::string& className);
  int32_t send_GetFeesStruct(const std::string& className);
  void recv_GetFeesStruct(FeesStructMsg& _return, const int32_t seqid);
  void UpdateFeesStruct(FeesStructMsg& _return, const FeesStructMsg& feesStruct);
  int32_t send_UpdateFeesStruct(const FeesStructMsg& feesStruct);
  void recv_UpdateFeesStruct(FeesStructMsg& _return, const int32_t seqid);
  double TickUpPrice(const AtsInstrumentMsg& instrument, const double price, const int32_t ticks);
  int32_t send_TickUpPrice(const AtsInstrumentMsg& instrument, const double price, const int32_t ticks);
  double recv_TickUpPrice(const int32_t seqid);
  double TickDownPrice(const AtsInstrumentMsg& instrument, const double price, const int32_t ticks);
  int32_t send_TickDownPrice(const AtsInstrumentMsg& instrument, const double price, const int32_t ticks);
  double recv_TickDownPrice(const int32_t seqid);
  void KillAll(const std::string& atsName, const int32_t tradingtype);
  int32_t send_KillAll(const std::string& atsName, const int32_t tradingtype);
  void recv_KillAll(const int32_t seqid);
  void GetTradingPeriodManager(TradingPeriodManagerMsg& _return, const std::string& atsName);
  int32_t send_GetTradingPeriodManager(const std::string& atsName);
  void recv_GetTradingPeriodManager(TradingPeriodManagerMsg& _return, const int32_t seqid);
  void SetTradingPeriodManager(const std::string& atsName, const TradingPeriodManagerMsg& tradingperiodManager);
  int32_t send_SetTradingPeriodManager(const std::string& atsName, const TradingPeriodManagerMsg& tradingperiodManager);
  void recv_SetTradingPeriodManager(const int32_t seqid);
  void SaveReferential(const std::string& atsName, const TradingPeriodManagerMsg& tradingPeriodManager, const UnderlyingMsg& underlying, const InstrumentClassMsg& StockClass);
  int32_t send_SaveReferential(const std::string& atsName, const TradingPeriodManagerMsg& tradingPeriodManager, const UnderlyingMsg& underlying, const InstrumentClassMsg& StockClass);
  void recv_SaveReferential(const int32_t seqid);
  void StartPublish();
  int32_t send_StartPublish();
  void recv_StartPublish(const int32_t seqid);
  void ForceSubScribe(const std::string& atsName, const std::string& instrumentCode);
  int32_t send_ForceSubScribe(const std::string& atsName, const std::string& instrumentCode);
  void recv_ForceSubScribe(const int32_t seqid);
  void StartAutomaton(const std::string& atsName);
  int32_t send_StartAutomaton(const std::string& atsName);
  void recv_StartAutomaton(const int32_t seqid);
  void StartAutomatonByList(const std::vector<std::string> & atsName);
  int32_t send_StartAutomatonByList(const std::vector<std::string> & atsName);
  void recv_StartAutomatonByList(const int32_t seqid);
  void StopAutomaton(const std::string& atsNamme);
  int32_t send_StopAutomaton(const std::string& atsNamme);
  void recv_StopAutomaton(const int32_t seqid);
  void CaculateATS(const std::string& atsName);
  int32_t send_CaculateATS(const std::string& atsName);
  void recv_CaculateATS(const int32_t seqid);
  void Start(const std::string& atsName);
  int32_t send_Start(const std::string& atsName);
  void recv_Start(const int32_t seqid);
  void Stop(const std::string& atsName);
  int32_t send_Stop(const std::string& atsName);
  void recv_Stop(const int32_t seqid);
  void SaveConfig(const std::string& atsName);
  int32_t send_SaveConfig(const std::string& atsName);
  void recv_SaveConfig(const int32_t seqid);
  void SaveConfigDaily(const std::string& atsName);
  int32_t send_SaveConfigDaily(const std::string& atsName);
  void recv_SaveConfigDaily(const int32_t seqid);
  bool CheckAesData(const AESDataMsg& msg);
  int32_t send_CheckAesData(const AESDataMsg& msg);
  bool recv_CheckAesData(const int32_t seqid);
  void SendExternalPosition(const std::vector<std::string> & positions);
  int32_t send_SendExternalPosition(const std::vector<std::string> & positions);
  void recv_SendExternalPosition(const int32_t seqid);
  void RequestDeals(std::vector<std::string> & _return);
  int32_t send_RequestDeals();
  void recv_RequestDeals(std::vector<std::string> & _return, const int32_t seqid);
  bool CreateManualQuote(const std::string& atsName, const std::string& atsInstrumentCode, const double bidprice, const int32_t bidquantity, const double askprice, const int32_t askquantity, const int32_t tradingtype, const  ::AtsType::OrderOpenClose::type bidopenclose, const  ::AtsType::OrderOpenClose::type askopenclose);
  int32_t send_CreateManualQuote(const std::string& atsName, const std::string& atsInstrumentCode, const double bidprice, const int32_t bidquantity, const double askprice, const int32_t askquantity, const int32_t tradingtype, const  ::AtsType::OrderOpenClose::type bidopenclose, const  ::AtsType::OrderOpenClose::type askopenclose);
  bool recv_CreateManualQuote(const int32_t seqid);
  bool CancelQuote(const int32_t id);
  int32_t send_CancelQuote(const int32_t id);
  bool recv_CancelQuote(const int32_t seqid);
  void CancelAllQuote();
  int32_t send_CancelAllQuote();
  void recv_CancelAllQuote(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
