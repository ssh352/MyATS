/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "SimpleAtsMsg_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace SimpleMsg {

int _kTradingTypeValues[] = {
  TradingType::Unknown,
  TradingType::Manual,
  TradingType::Hitter,
  TradingType::Max
};
const char* _kTradingTypeNames[] = {
  "Unknown",
  "Manual",
  "Hitter",
  "Max"
};
const std::map<int, const char*> _TradingType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTradingTypeValues, _kTradingTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


TrdInstrumentMsg::~TrdInstrumentMsg() throw() {
}


void TrdInstrumentMsg::__set_AtsInstrument(const  ::AtsGeneral::AtsInstrumentMsg& val) {
  this->AtsInstrument = val;
}

void TrdInstrumentMsg::__set_AtsName(const std::string& val) {
  this->AtsName = val;
}

uint32_t TrdInstrumentMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->AtsInstrument.read(iprot);
          this->__isset.AtsInstrument = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->AtsName);
          this->__isset.AtsName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TrdInstrumentMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TrdInstrumentMsg");

  xfer += oprot->writeFieldBegin("AtsInstrument", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->AtsInstrument.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AtsName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->AtsName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TrdInstrumentMsg &a, TrdInstrumentMsg &b) {
  using ::std::swap;
  swap(a.AtsInstrument, b.AtsInstrument);
  swap(a.AtsName, b.AtsName);
  swap(a.__isset, b.__isset);
}

TrdInstrumentMsg::TrdInstrumentMsg(const TrdInstrumentMsg& other0) {
  AtsInstrument = other0.AtsInstrument;
  AtsName = other0.AtsName;
  __isset = other0.__isset;
}
TrdInstrumentMsg& TrdInstrumentMsg::operator=(const TrdInstrumentMsg& other1) {
  AtsInstrument = other1.AtsInstrument;
  AtsName = other1.AtsName;
  __isset = other1.__isset;
  return *this;
}
void TrdInstrumentMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TrdInstrumentMsg(";
  out << "AtsInstrument=" << to_string(AtsInstrument);
  out << ", " << "AtsName=" << to_string(AtsName);
  out << ")";
}


SimpleAtsMsg::~SimpleAtsMsg() throw() {
}


void SimpleAtsMsg::__set_Ats(const  ::AtsGeneral::AtsMsg& val) {
  this->Ats = val;
}

void SimpleAtsMsg::__set_AllFutures(const std::vector<TrdInstrumentMsg> & val) {
  this->AllFutures = val;
}

void SimpleAtsMsg::__set_KeepOrders(const bool val) {
  this->KeepOrders = val;
}

void SimpleAtsMsg::__set_ForceOpen(const bool val) {
  this->ForceOpen = val;
}

void SimpleAtsMsg::__set_AtsIntraDataCols(const std::vector<std::string> & val) {
  this->AtsIntraDataCols = val;
}

void SimpleAtsMsg::__set_FeedsourcesStr(const std::string& val) {
  this->FeedsourcesStr = val;
}

void SimpleAtsMsg::__set_ConnectionsStr(const std::string& val) {
  this->ConnectionsStr = val;
}

void SimpleAtsMsg::__set_Underlyings(const std::vector< ::AtsGeneral::UnderlyingMsg> & val) {
  this->Underlyings = val;
}

void SimpleAtsMsg::__set_AllOptions(const std::vector<TrdInstrumentMsg> & val) {
  this->AllOptions = val;
}

void SimpleAtsMsg::__set_AllStocks(const std::vector<TrdInstrumentMsg> & val) {
  this->AllStocks = val;
}

uint32_t SimpleAtsMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Ats.read(iprot);
          this->__isset.Ats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AllFutures.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->AllFutures.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->AllFutures[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AllFutures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->KeepOrders);
          this->__isset.KeepOrders = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ForceOpen);
          this->__isset.ForceOpen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AtsIntraDataCols.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->AtsIntraDataCols.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += iprot->readString(this->AtsIntraDataCols[_i11]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AtsIntraDataCols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->FeedsourcesStr);
          this->__isset.FeedsourcesStr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ConnectionsStr);
          this->__isset.ConnectionsStr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Underlyings.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->Underlyings.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->Underlyings[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Underlyings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AllOptions.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readListBegin(_etype20, _size17);
            this->AllOptions.resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += this->AllOptions[_i21].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AllOptions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AllStocks.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->AllStocks.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += this->AllStocks[_i26].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AllStocks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleAtsMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SimpleAtsMsg");

  xfer += oprot->writeFieldBegin("Ats", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->Ats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AllFutures", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AllFutures.size()));
    std::vector<TrdInstrumentMsg> ::const_iterator _iter27;
    for (_iter27 = this->AllFutures.begin(); _iter27 != this->AllFutures.end(); ++_iter27)
    {
      xfer += (*_iter27).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeepOrders", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->KeepOrders);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ForceOpen", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->ForceOpen);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AtsIntraDataCols", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->AtsIntraDataCols.size()));
    std::vector<std::string> ::const_iterator _iter28;
    for (_iter28 = this->AtsIntraDataCols.begin(); _iter28 != this->AtsIntraDataCols.end(); ++_iter28)
    {
      xfer += oprot->writeString((*_iter28));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FeedsourcesStr", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->FeedsourcesStr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ConnectionsStr", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->ConnectionsStr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Underlyings", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Underlyings.size()));
    std::vector< ::AtsGeneral::UnderlyingMsg> ::const_iterator _iter29;
    for (_iter29 = this->Underlyings.begin(); _iter29 != this->Underlyings.end(); ++_iter29)
    {
      xfer += (*_iter29).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AllOptions", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AllOptions.size()));
    std::vector<TrdInstrumentMsg> ::const_iterator _iter30;
    for (_iter30 = this->AllOptions.begin(); _iter30 != this->AllOptions.end(); ++_iter30)
    {
      xfer += (*_iter30).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AllStocks", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AllStocks.size()));
    std::vector<TrdInstrumentMsg> ::const_iterator _iter31;
    for (_iter31 = this->AllStocks.begin(); _iter31 != this->AllStocks.end(); ++_iter31)
    {
      xfer += (*_iter31).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SimpleAtsMsg &a, SimpleAtsMsg &b) {
  using ::std::swap;
  swap(a.Ats, b.Ats);
  swap(a.AllFutures, b.AllFutures);
  swap(a.KeepOrders, b.KeepOrders);
  swap(a.ForceOpen, b.ForceOpen);
  swap(a.AtsIntraDataCols, b.AtsIntraDataCols);
  swap(a.FeedsourcesStr, b.FeedsourcesStr);
  swap(a.ConnectionsStr, b.ConnectionsStr);
  swap(a.Underlyings, b.Underlyings);
  swap(a.AllOptions, b.AllOptions);
  swap(a.AllStocks, b.AllStocks);
  swap(a.__isset, b.__isset);
}

SimpleAtsMsg::SimpleAtsMsg(const SimpleAtsMsg& other32) {
  Ats = other32.Ats;
  AllFutures = other32.AllFutures;
  KeepOrders = other32.KeepOrders;
  ForceOpen = other32.ForceOpen;
  AtsIntraDataCols = other32.AtsIntraDataCols;
  FeedsourcesStr = other32.FeedsourcesStr;
  ConnectionsStr = other32.ConnectionsStr;
  Underlyings = other32.Underlyings;
  AllOptions = other32.AllOptions;
  AllStocks = other32.AllStocks;
  __isset = other32.__isset;
}
SimpleAtsMsg& SimpleAtsMsg::operator=(const SimpleAtsMsg& other33) {
  Ats = other33.Ats;
  AllFutures = other33.AllFutures;
  KeepOrders = other33.KeepOrders;
  ForceOpen = other33.ForceOpen;
  AtsIntraDataCols = other33.AtsIntraDataCols;
  FeedsourcesStr = other33.FeedsourcesStr;
  ConnectionsStr = other33.ConnectionsStr;
  Underlyings = other33.Underlyings;
  AllOptions = other33.AllOptions;
  AllStocks = other33.AllStocks;
  __isset = other33.__isset;
  return *this;
}
void SimpleAtsMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SimpleAtsMsg(";
  out << "Ats=" << to_string(Ats);
  out << ", " << "AllFutures=" << to_string(AllFutures);
  out << ", " << "KeepOrders=" << to_string(KeepOrders);
  out << ", " << "ForceOpen=" << to_string(ForceOpen);
  out << ", " << "AtsIntraDataCols=" << to_string(AtsIntraDataCols);
  out << ", " << "FeedsourcesStr=" << to_string(FeedsourcesStr);
  out << ", " << "ConnectionsStr=" << to_string(ConnectionsStr);
  out << ", " << "Underlyings=" << to_string(Underlyings);
  out << ", " << "AllOptions=" << to_string(AllOptions);
  out << ", " << "AllStocks=" << to_string(AllStocks);
  out << ")";
}

} // namespace
