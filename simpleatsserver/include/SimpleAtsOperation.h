/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SimpleAtsOperation_H
#define SimpleAtsOperation_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "SimpleAtsMsg_types.h"
#include "AtsOperation.h"

namespace SimpleMsg {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SimpleAtsOperationIf : virtual public  ::AtsGeneral::AtsOperationIf {
 public:
  virtual ~SimpleAtsOperationIf() {}
  virtual void CreateAutomaton(SimpleAtsMsg& _return, const std::string& automatonName, const std::string& underlyingName, const std::string& feedsourcesStr, const std::string& connectionsStr, const std::string& stocks) = 0;
};

class SimpleAtsOperationIfFactory : virtual public  ::AtsGeneral::AtsOperationIfFactory {
 public:
  typedef SimpleAtsOperationIf Handler;

  virtual ~SimpleAtsOperationIfFactory() {}

  virtual SimpleAtsOperationIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::AtsGeneral::AtsOperationIf* /* handler */) = 0;
};

class SimpleAtsOperationIfSingletonFactory : virtual public SimpleAtsOperationIfFactory {
 public:
  SimpleAtsOperationIfSingletonFactory(const boost::shared_ptr<SimpleAtsOperationIf>& iface) : iface_(iface) {}
  virtual ~SimpleAtsOperationIfSingletonFactory() {}

  virtual SimpleAtsOperationIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::AtsGeneral::AtsOperationIf* /* handler */) {}

 protected:
  boost::shared_ptr<SimpleAtsOperationIf> iface_;
};

class SimpleAtsOperationNull : virtual public SimpleAtsOperationIf , virtual public  ::AtsGeneral::AtsOperationNull {
 public:
  virtual ~SimpleAtsOperationNull() {}
  void CreateAutomaton(SimpleAtsMsg& /* _return */, const std::string& /* automatonName */, const std::string& /* underlyingName */, const std::string& /* feedsourcesStr */, const std::string& /* connectionsStr */, const std::string& /* stocks */) {
    return;
  }
};

typedef struct _SimpleAtsOperation_CreateAutomaton_args__isset {
  _SimpleAtsOperation_CreateAutomaton_args__isset() : automatonName(false), underlyingName(false), feedsourcesStr(false), connectionsStr(false), stocks(false) {}
  bool automatonName :1;
  bool underlyingName :1;
  bool feedsourcesStr :1;
  bool connectionsStr :1;
  bool stocks :1;
} _SimpleAtsOperation_CreateAutomaton_args__isset;

class SimpleAtsOperation_CreateAutomaton_args {
 public:

  SimpleAtsOperation_CreateAutomaton_args(const SimpleAtsOperation_CreateAutomaton_args&);
  SimpleAtsOperation_CreateAutomaton_args& operator=(const SimpleAtsOperation_CreateAutomaton_args&);
  SimpleAtsOperation_CreateAutomaton_args() : automatonName(), underlyingName(), feedsourcesStr(), connectionsStr(), stocks() {
  }

  virtual ~SimpleAtsOperation_CreateAutomaton_args() throw();
  std::string automatonName;
  std::string underlyingName;
  std::string feedsourcesStr;
  std::string connectionsStr;
  std::string stocks;

  _SimpleAtsOperation_CreateAutomaton_args__isset __isset;

  void __set_automatonName(const std::string& val);

  void __set_underlyingName(const std::string& val);

  void __set_feedsourcesStr(const std::string& val);

  void __set_connectionsStr(const std::string& val);

  void __set_stocks(const std::string& val);

  bool operator == (const SimpleAtsOperation_CreateAutomaton_args & rhs) const
  {
    if (!(automatonName == rhs.automatonName))
      return false;
    if (!(underlyingName == rhs.underlyingName))
      return false;
    if (!(feedsourcesStr == rhs.feedsourcesStr))
      return false;
    if (!(connectionsStr == rhs.connectionsStr))
      return false;
    if (!(stocks == rhs.stocks))
      return false;
    return true;
  }
  bool operator != (const SimpleAtsOperation_CreateAutomaton_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleAtsOperation_CreateAutomaton_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SimpleAtsOperation_CreateAutomaton_pargs {
 public:


  virtual ~SimpleAtsOperation_CreateAutomaton_pargs() throw();
  const std::string* automatonName;
  const std::string* underlyingName;
  const std::string* feedsourcesStr;
  const std::string* connectionsStr;
  const std::string* stocks;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimpleAtsOperation_CreateAutomaton_result__isset {
  _SimpleAtsOperation_CreateAutomaton_result__isset() : success(false) {}
  bool success :1;
} _SimpleAtsOperation_CreateAutomaton_result__isset;

class SimpleAtsOperation_CreateAutomaton_result {
 public:

  SimpleAtsOperation_CreateAutomaton_result(const SimpleAtsOperation_CreateAutomaton_result&);
  SimpleAtsOperation_CreateAutomaton_result& operator=(const SimpleAtsOperation_CreateAutomaton_result&);
  SimpleAtsOperation_CreateAutomaton_result() {
  }

  virtual ~SimpleAtsOperation_CreateAutomaton_result() throw();
  SimpleAtsMsg success;

  _SimpleAtsOperation_CreateAutomaton_result__isset __isset;

  void __set_success(const SimpleAtsMsg& val);

  bool operator == (const SimpleAtsOperation_CreateAutomaton_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleAtsOperation_CreateAutomaton_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleAtsOperation_CreateAutomaton_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimpleAtsOperation_CreateAutomaton_presult__isset {
  _SimpleAtsOperation_CreateAutomaton_presult__isset() : success(false) {}
  bool success :1;
} _SimpleAtsOperation_CreateAutomaton_presult__isset;

class SimpleAtsOperation_CreateAutomaton_presult {
 public:


  virtual ~SimpleAtsOperation_CreateAutomaton_presult() throw();
  SimpleAtsMsg* success;

  _SimpleAtsOperation_CreateAutomaton_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SimpleAtsOperationClient : virtual public SimpleAtsOperationIf, public  ::AtsGeneral::AtsOperationClient {
 public:
  SimpleAtsOperationClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::AtsGeneral::AtsOperationClient(prot, prot) {}
  SimpleAtsOperationClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::AtsGeneral::AtsOperationClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void CreateAutomaton(SimpleAtsMsg& _return, const std::string& automatonName, const std::string& underlyingName, const std::string& feedsourcesStr, const std::string& connectionsStr, const std::string& stocks);
  void send_CreateAutomaton(const std::string& automatonName, const std::string& underlyingName, const std::string& feedsourcesStr, const std::string& connectionsStr, const std::string& stocks);
  void recv_CreateAutomaton(SimpleAtsMsg& _return);
};

class SimpleAtsOperationProcessor : public  ::AtsGeneral::AtsOperationProcessor {
 protected:
  boost::shared_ptr<SimpleAtsOperationIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SimpleAtsOperationProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_CreateAutomaton(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SimpleAtsOperationProcessor(boost::shared_ptr<SimpleAtsOperationIf> iface) :
     ::AtsGeneral::AtsOperationProcessor(iface),
    iface_(iface) {
    processMap_["CreateAutomaton"] = &SimpleAtsOperationProcessor::process_CreateAutomaton;
  }

  virtual ~SimpleAtsOperationProcessor() {}
};

class SimpleAtsOperationProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SimpleAtsOperationProcessorFactory(const ::boost::shared_ptr< SimpleAtsOperationIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SimpleAtsOperationIfFactory > handlerFactory_;
};

class SimpleAtsOperationMultiface : virtual public SimpleAtsOperationIf, public  ::AtsGeneral::AtsOperationMultiface {
 public:
  SimpleAtsOperationMultiface(std::vector<boost::shared_ptr<SimpleAtsOperationIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<SimpleAtsOperationIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::AtsGeneral::AtsOperationMultiface::add(*iter);
    }
  }
  virtual ~SimpleAtsOperationMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SimpleAtsOperationIf> > ifaces_;
  SimpleAtsOperationMultiface() {}
  void add(boost::shared_ptr<SimpleAtsOperationIf> iface) {
     ::AtsGeneral::AtsOperationMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void CreateAutomaton(SimpleAtsMsg& _return, const std::string& automatonName, const std::string& underlyingName, const std::string& feedsourcesStr, const std::string& connectionsStr, const std::string& stocks) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateAutomaton(_return, automatonName, underlyingName, feedsourcesStr, connectionsStr, stocks);
    }
    ifaces_[i]->CreateAutomaton(_return, automatonName, underlyingName, feedsourcesStr, connectionsStr, stocks);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SimpleAtsOperationConcurrentClient : virtual public SimpleAtsOperationIf, public  ::AtsGeneral::AtsOperationConcurrentClient {
 public:
  SimpleAtsOperationConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::AtsGeneral::AtsOperationConcurrentClient(prot, prot) {}
  SimpleAtsOperationConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::AtsGeneral::AtsOperationConcurrentClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void CreateAutomaton(SimpleAtsMsg& _return, const std::string& automatonName, const std::string& underlyingName, const std::string& feedsourcesStr, const std::string& connectionsStr, const std::string& stocks);
  int32_t send_CreateAutomaton(const std::string& automatonName, const std::string& underlyingName, const std::string& feedsourcesStr, const std::string& connectionsStr, const std::string& stocks);
  void recv_CreateAutomaton(SimpleAtsMsg& _return, const int32_t seqid);
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
